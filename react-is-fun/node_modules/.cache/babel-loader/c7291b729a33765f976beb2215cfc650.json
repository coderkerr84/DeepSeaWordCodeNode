{"ast":null,"code":"var _jsxFileName = \"/Users/JMKerr/CodeNode2/react-is-fun/src/ResultsModal.js\";\nimport ReactModal from 'react-modal';\nimport React, { useState, Component } from 'react';\nimport Spinner from './Loader';\nimport './ResultsModal.css';\nimport ReactTooltip from 'react-tooltip';\nimport UIfx from 'uifx';\nimport perfectSfx from './sounds/perfect.mp3';\nimport sadSfx from './sounds/sad.mp3';\nconst perfectSound = new UIfx(perfectSfx);\nperfectSound.setVolume(0.9);\nconst sadSound = new UIfx(sadSfx);\nsadSound.setVolume(0.4);\n\nfunction DisplayLeaderboard() {\n  var leadDiv = document.getElementById(\"LeaderboardDiv\");\n  leadDiv.style.display = \"block\";\n  var rulesDiv = document.getElementById(\"RulesDiv\");\n  rulesDiv.style.display = \"none\";\n  document.getElementById(\"RulesSpan\").className = \"fontSmaller\";\n  document.getElementById(\"LeaderboardSpan\").className = \"fontBigger\";\n}\n\nfunction DisplayRules() {\n  var leadDiv = document.getElementById(\"LeaderboardDiv\");\n  leadDiv.style.display = \"none\";\n  var rulesDiv = document.getElementById(\"RulesDiv\");\n  rulesDiv.style.display = \"block\";\n  document.getElementById(\"RulesSpan\").className = \"fontBigger\";\n  document.getElementById(\"LeaderboardSpan\").className = \"fontSmaller\";\n}\n\nclass ResultsModal extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  } //scoreData={scoreData.TotalScore} scoreDataDetail={scoreData.ClueScores}\n\n\n  render() {\n    //console.log(\"ResultsModal\" + this.props.showModal);\n    if (this.props.showModal == false) {\n      return \"\";\n    }\n\n    if (this.props.highScoreData != null) {\n      const highScoringRows = [];\n\n      for (let index = 0; index < this.props.highScoreData.length; index++) {\n        const element = this.props.highScoreData[index];\n        highScoringRows.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: element.playerName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }\n        }, element.playerName), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }\n        }, element.timesPlayed), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }\n        }, element.perfectDives), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }\n        }, (element.foundTreasure / element.timesPlayed).toFixed(2) * 100, \"%\"), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }\n        }, (element.oxygenTanksUsed / element.timesPlayed).toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }\n        }, \"$\", element.averagePointsPerDive, \"m\"), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }\n        }, element.longestStreak), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }\n        }, \"$\", element.totalPoints, \"m\")));\n      }\n\n      return /*#__PURE__*/React.createElement(ReactModal, {\n        isOpen: this.props.showModal,\n        contentLabel: \"Minimal Modal Example\",\n        appElement: document.getElementById(\"root\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        id: \"LeaderboardSpan\",\n        className: \"fontBigger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"#\",\n        onClick: () => DisplayLeaderboard(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 65\n        }\n      }, \"Leaderboard\")), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }\n      }, \" / \"), /*#__PURE__*/React.createElement(\"span\", {\n        id: \"RulesSpan\",\n        className: \"fontSmaller\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"#\",\n        onClick: () => DisplayRules(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 60\n        }\n      }, \"Rules\"))), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"LeaderboardDiv\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        \"data-tip\": \"Who\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 23\n        }\n      }, \"Player Name\"), /*#__PURE__*/React.createElement(\"th\", {\n        \"data-tip\": \"Number of Times Played\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 23\n        }\n      }, \"# Dives Taken\"), /*#__PURE__*/React.createElement(\"th\", {\n        \"data-tip\": \"Number of Maximum Scores\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 23\n        }\n      }, \"# Perfect Dives\"), /*#__PURE__*/React.createElement(\"th\", {\n        \"data-tip\": \"FoundTreasure/TimesPlayed * 100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 23\n        }\n      }, \"% Treasure Found\"), /*#__PURE__*/React.createElement(\"th\", {\n        \"data-tip\": \"TanksOfOxygenUsed/TimesPlayed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 23\n        }\n      }, \"Oxygen Reliance\"), /*#__PURE__*/React.createElement(\"th\", {\n        \"data-tip\": \"TotalPoints/TimesPlayed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 23\n        }\n      }, \"Avg Points Per Dive\"), /*#__PURE__*/React.createElement(\"th\", {\n        \"data-tip\": \"Consecutive dives found treasure\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 23\n        }\n      }, \"Longest Streak\"), /*#__PURE__*/React.createElement(\"th\", {\n        \"data-tip\": \"Total Points\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 23\n        }\n      }, \"Total Points\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, highScoringRows))), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"RulesDiv\",\n        style: {\n          display: \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      }, \"Dive School (Rules)\"), \"You are diving for a hidden Treasure Word - a series of 6 clues will reveal information about the word's make-up leading you ever closer to it,\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }\n      }), \"until the 7th clue will provide you with the dictionary's definition of the word.\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 20\n        }\n      }), \"The Treasure Word is always a noun, so guess those if you can, but any valid word will earn 1 point-per-clue-it-satisfies.\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 20\n        }\n      }), \"Even if you successfully guess the Treasure Word before the end, there are still points on the table for you to claim by entering\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 144\n        }\n      }), \"other words that meet as many clues as possible.\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 20\n        }\n      }), \"There might be plenty more fish in the sea but you'll only play each noun \", /*#__PURE__*/React.createElement(\"span\", {\n        style: boldFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 89\n        }\n      }, \"once\"), \" - avoid drowning and scoring zero\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 157\n        }\n      }), \"by using the oxygen to buy more time, or Resurface to \\\"bank\\\" i.e, end your turn and receive points for the words you've already submitted.\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 20\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        style: (boldFont, red),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }\n      }, \"Sharks!\"), \" randomly appear. While struggling with them you cannot refill oxygen tanks!\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 20\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        style: (boldFont, blue),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }, \"Mines!\"), \" randomly appear. Take great care to ensure your next answer is a valid dictionary word as the invalid-word buzzer will trigger the mine!\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 20\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        style: boldFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }\n      }, \"Squid!\"), \" randomly appear. They'll squirt ink to cover up the previous clues - hope you've memorized them!\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 20\n        }\n      }), \"A Perfect Dive is achieved by scoring the maximum 38 points. This score can be reached by :\", /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }\n      }, \"Getting 1pt for every clue that (each of) your submitted word satisfies. Max = 27pts \"), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }\n      }, \" +2pts bonus if you got all 27pts\"), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      }, \" +3pts if you found the Treasure word\"), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }\n      }, \" +1pts for using no oxygen\"), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }\n      }, \" +1pts for every unused oxygen tank (up to 5)\")), \"There's treasure to be found - suit-up and lets dive in!\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 20\n        }\n      })), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.props.handleReplay,\n        className: \"button\",\n        value: \"Replay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, \"Dive Again!\"), /*#__PURE__*/React.createElement(ReactTooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }\n      }));\n    }\n\n    if (this.props.scoreData == null && this.props.highScoreData == null) {\n      return /*#__PURE__*/React.createElement(ReactModal, {\n        isOpen: this.props.showModal,\n        contentLabel: \"Minimal Modal Example\",\n        appElement: document.getElementById(\"root\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: spinnerStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 41\n        }\n      })));\n    }\n\n    if (this.props.isDead) {\n      sadSound.play();\n      return /*#__PURE__*/React.createElement(ReactModal, {\n        isOpen: this.props.showModal,\n        contentLabel: \"Minimal Modal Example\",\n        appElement: document.getElementById(\"root\"),\n        style: {\n          content: {\n            color: 'red',\n            backgroundImage: 'url(/images/funeral.jpg)',\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundColor: 'black',\n            overflow: 'scroll',\n            filter: 'drop-shadow(1px 2px 4px darkblue)'\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"DeadSpan\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }\n      }, \"You perished in the seas while searching for \", /*#__PURE__*/React.createElement(\"span\", {\n        style: resultStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 62\n        }\n      }, this.props.scoreData.wordBeingSought), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }\n      }), \"Top Three Scores for \", \"'\" + this.props.scoreData.wordBeingSought + \"'\", \" :\", DisplayTopThree(this.props.scoreData.topThreeScores), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.props.handleReplay,\n        className: \"button\",\n        value: \"Replay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }\n      }, \"Dive Again!\")));\n    }\n\n    const clueScoringRows = [];\n\n    for (let index = 0; index < 7; index++) {\n      const element = this.props.scoreData.clueScores[index];\n      clueScoringRows.push( /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }\n      }, this.props.userGuesses[index]), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }\n      }, element.scorePerClue[0] > 0 ? SuccessImage() : FailImage(index, 0)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }\n      }, element.scorePerClue[1] > 0 ? SuccessImage() : FailImage(index, 1)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }\n      }, element.scorePerClue[2] > 0 ? SuccessImage() : FailImage(index, 2)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }\n      }, element.scorePerClue[3] > 0 ? SuccessImage() : FailImage(index, 3)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }\n      }, element.scorePerClue[4] > 0 ? SuccessImage() : FailImage(index, 4)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }\n      }, element.scorePerClue[5] > 0 ? SuccessImage() : FailImage(index, 5)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }\n      }, \"N/A\")));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ReactModal, {\n      isOpen: this.props.showModal,\n      contentLabel: \"Minimal Modal Example\",\n      appElement: document.getElementById(\"root\"),\n      style: {\n        content: {\n          color: 'darkblue',\n          backgroundColor: 'aliceblue',\n          overflow: 'scroll',\n          filter: 'drop-shadow(1px 2px 4px darkblue)'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }\n    }, this.props.scoreData.isPerfectDive != null && this.props.scoreData.isPerfectDive == 1 ? PerfectDive() : \"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }), \"You \", this.props.scoreData.foundTreasure != null && this.props.scoreData.foundTreasure == 1 ? \"successfully found \" : \"were searching for \", \" the Treasure Word : \", /*#__PURE__*/React.createElement(\"span\", {\n      style: resultStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 174\n      }\n    }, this.props.scoreData.wordBeingSought), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    }), \"You consumed oxygen bottles : \", /*#__PURE__*/React.createElement(\"span\", {\n      style: resultStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 43\n      }\n    }, this.props.oxygenBottlesUsed), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }), \"Total Score: \", /*#__PURE__*/React.createElement(\"span\", {\n      style: resultStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 26\n      }\n    }, \"$\", this.props.scoreData.totalScore, \"m\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }), \"Top Three Scores for \", this.props.scoreData.wordBeingSought, \" :\", DisplayTopThree(this.props.scoreData.topThreeScores), \"How you scored against the clues:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: smallerFont,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }, \" (hover over e.g 'Clue 2' to be reminded of that clue)\"), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"th\", {\n      \"data-tip\": \"'\" + this.props.clues[0].clueText + \"'\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }\n    }, \"Clue 1\"), /*#__PURE__*/React.createElement(\"th\", {\n      \"data-tip\": \"'\" + this.props.clues[1].clueText + \"'\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }\n    }, \"Clue 2\"), /*#__PURE__*/React.createElement(\"th\", {\n      \"data-tip\": \"'\" + this.props.clues[2].clueText + \"'\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }\n    }, \"Clue 3\"), /*#__PURE__*/React.createElement(\"th\", {\n      \"data-tip\": \"'\" + this.props.clues[3].clueText + \"'\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, \"Clue 4\"), /*#__PURE__*/React.createElement(\"th\", {\n      \"data-tip\": \"'\" + this.props.clues[4].clueText + \"'\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }, \"Clue 5\"), /*#__PURE__*/React.createElement(\"th\", {\n      \"data-tip\": \"'\" + this.props.clues[5].clueText + \"'\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }\n    }, \"Clue 6\"), /*#__PURE__*/React.createElement(\"th\", {\n      \"data-tip\": \"'\" + this.props.clues[6].clueText + \"'\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    }, \"Clue 7\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 15\n      }\n    }, clueScoringRows)), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.handleReplay,\n      className: \"button\",\n      value: \"Replay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }, \"Dive Again!\"), /*#__PURE__*/React.createElement(ReactTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }\n    })));\n\n    function PerfectDive() {\n      perfectSound.play();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: biggerFont,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: blue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }\n      }, \"Congratulations \"), /*#__PURE__*/React.createElement(\"span\", {\n        style: green,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }\n      }, \"It's \"), /*#__PURE__*/React.createElement(\"span\", {\n        style: orange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }\n      }, \"A \"), /*#__PURE__*/React.createElement(\"span\", {\n        style: violet,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }\n      }, \"*PERFECT* \"), /*#__PURE__*/React.createElement(\"span\", {\n        style: red,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }\n      }, \"Dive! \"));\n    }\n\n    function SuccessImage() {\n      return /*#__PURE__*/React.createElement(\"img\", {\n        src: \"/images/Coin.png\",\n        width: \"25px\",\n        height: \"25px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }\n      });\n    }\n\n    function FailImage(answerIndex, clueIndex) {\n      //console.log(\"aI: \" + answerIndex + \" cI:\" +clueIndex);\n      let isThisRelevant = parseInt(clueIndex) <= parseInt(answerIndex);\n\n      if (!isThisRelevant) {\n        //console.log(\"display N/A for aI: \" + answerIndex + \" cI:\" +clueIndex);\n        return \"N/A\";\n      } //readme: otherwise it was relevant - a clue they knew about and didn't meet so FAILED\n\n\n      return /*#__PURE__*/React.createElement(\"img\", {\n        src: \"/images/Skull.jpg\",\n        width: \"25px\",\n        height: \"25px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }\n      });\n    }\n\n    function DisplayTopThree(topThree) {\n      //console.log(\"DisplayTopThree: \" + topThree[0].playerName);\n      return /*#__PURE__*/React.createElement(\"ol\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }\n      }, topThree[0] != null && topThree[0] != undefined ? topThree[0].playerName : \"...no-one yet!\", /*#__PURE__*/React.createElement(\"span\", {\n        style: resultStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 108\n        }\n      }, topThree[0] != null && topThree[0] != undefined ? \" : $\" + topThree[0].totalPoints + \"m\" : \"\")), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }\n      }, topThree[1] != null && topThree[1] != undefined ? topThree[1].playerName : \"...no-one yet!\", /*#__PURE__*/React.createElement(\"span\", {\n        style: resultStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 108\n        }\n      }, topThree[1] != null && topThree[1] != undefined ? \" : $\" + topThree[1].totalPoints + \"m\" : \"\")), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }\n      }, topThree[2] != null && topThree[2] != undefined ? topThree[2].playerName : \"...no-one yet!\", /*#__PURE__*/React.createElement(\"span\", {\n        style: resultStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 108\n        }\n      }, topThree[2] != null && topThree[2] != undefined ? \" : $\" + topThree[2].totalPoints + \"m\" : \"\")));\n    }\n  }\n\n}\n\nvar smallerFont = {\n  fontSize: 'smaller'\n};\nvar boldFont = {\n  fontWeight: 'bold'\n};\nvar biggerFont = {\n  fontSize: 'larger'\n};\nvar resultStyle = {\n  color: 'coral',\n  fontFamily: 'Arial',\n  fontSize: 'larger',\n  textAlign: 'left'\n};\nvar red = {\n  color: 'red'\n};\nvar violet = {\n  color: 'violet'\n};\nvar green = {\n  color: 'green'\n};\nvar orange = {\n  color: 'orange'\n};\nvar blue = {\n  color: 'blue'\n};\nvar spinnerStyle = {\n  margin: \"0 auto\"\n};\nexport default ResultsModal;","map":{"version":3,"sources":["/Users/JMKerr/CodeNode2/react-is-fun/src/ResultsModal.js"],"names":["ReactModal","React","useState","Component","Spinner","ReactTooltip","UIfx","perfectSfx","sadSfx","perfectSound","setVolume","sadSound","DisplayLeaderboard","leadDiv","document","getElementById","style","display","rulesDiv","className","DisplayRules","ResultsModal","constructor","state","render","props","showModal","highScoreData","highScoringRows","index","length","element","push","playerName","timesPlayed","perfectDives","foundTreasure","toFixed","oxygenTanksUsed","averagePointsPerDive","longestStreak","totalPoints","boldFont","red","blue","handleReplay","scoreData","spinnerStyle","isDead","play","content","color","backgroundImage","backgroundSize","backgroundPosition","backgroundColor","overflow","filter","resultStyle","wordBeingSought","DisplayTopThree","topThreeScores","clueScoringRows","clueScores","userGuesses","scorePerClue","SuccessImage","FailImage","isPerfectDive","PerfectDive","oxygenBottlesUsed","totalScore","smallerFont","clues","clueText","biggerFont","green","orange","violet","answerIndex","clueIndex","isThisRelevant","parseInt","topThree","undefined","fontSize","fontWeight","fontFamily","textAlign","margin"],"mappings":"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","sourcesContent":["import ReactModal from 'react-modal';\nimport React, {useState, Component} from 'react';\nimport Spinner from './Loader';\nimport './ResultsModal.css';\nimport ReactTooltip from 'react-tooltip';\nimport UIfx from 'uifx';\nimport perfectSfx from './sounds/perfect.mp3'; \nimport sadSfx from './sounds/sad.mp3'; \n\nconst perfectSound = new UIfx(perfectSfx);\nperfectSound.setVolume(0.9);\nconst sadSound = new UIfx(sadSfx);\nsadSound.setVolume(0.4);\n\nfunction DisplayLeaderboard()\n{\n  var leadDiv = document.getElementById(\"LeaderboardDiv\");\n  leadDiv.style.display = \"block\";\n\n  var rulesDiv = document.getElementById(\"RulesDiv\");\n  rulesDiv.style.display = \"none\";\n\n  document.getElementById(\"RulesSpan\").className = \"fontSmaller\";\n  document.getElementById(\"LeaderboardSpan\").className = \"fontBigger\";\n}\n\nfunction DisplayRules()\n{\n  var leadDiv = document.getElementById(\"LeaderboardDiv\");\n  leadDiv.style.display = \"none\";\n\n  var rulesDiv = document.getElementById(\"RulesDiv\");\n  rulesDiv.style.display = \"block\";\n\n  document.getElementById(\"RulesSpan\").className = \"fontBigger\";\n  document.getElementById(\"LeaderboardSpan\").className = \"fontSmaller\";\n}\n\nclass ResultsModal extends React.Component {\n    constructor () {\n      super();\n      this.state = {\n      };\n\n    }\n    //scoreData={scoreData.TotalScore} scoreDataDetail={scoreData.ClueScores}\n\n    render () {\n      //console.log(\"ResultsModal\" + this.props.showModal);\n      \n      if(this.props.showModal == false)\n      {\n        return \"\";\n      }\n\n      if(this.props.highScoreData != null)\n      {\n        const highScoringRows = []\n        for (let index = 0; index < this.props.highScoreData.length; index++) {\n          const element = this.props.highScoreData[index];\n          highScoringRows.push(\n          <tr key={element.playerName}>\n            <td>{element.playerName}</td>\n            <td>{element.timesPlayed}</td>\n            <td>{element.perfectDives}</td>\n            <td>{(element.foundTreasure / element.timesPlayed).toFixed(2) * 100}%</td>\n            <td>{(element.oxygenTanksUsed / element.timesPlayed).toFixed(2)}</td>\n            <td>${element.averagePointsPerDive}m</td>\n            <td>{element.longestStreak}</td>\n            <td>${element.totalPoints}m</td>\n          </tr>)\n        }\n\n        return (\n          <ReactModal \n          isOpen={this.props.showModal}\n          contentLabel=\"Minimal Modal Example\"\n          appElement={document.getElementById(\"root\")}\n          >\n            <div>\n              <span id=\"LeaderboardSpan\" className=\"fontBigger\"><a href=\"#\" onClick={()=>DisplayLeaderboard()}>Leaderboard</a></span>\n              <span> / </span>\n              <span id=\"RulesSpan\" className=\"fontSmaller\"><a href=\"#\" onClick={()=>DisplayRules()}>Rules</a></span>\n            </div>\n            <div id=\"LeaderboardDiv\">\n              <table>\n                  <thead>\n                    <tr>\n                      <th data-tip={\"Who\"}>Player Name</th>\n                      <th data-tip={\"Number of Times Played\"}># Dives Taken</th>\n                      <th data-tip={\"Number of Maximum Scores\"}># Perfect Dives</th>\n                      <th data-tip={\"FoundTreasure/TimesPlayed * 100\"}>% Treasure Found</th>\n                      <th data-tip={\"TanksOfOxygenUsed/TimesPlayed\"}>Oxygen Reliance</th>\n                      <th data-tip={\"TotalPoints/TimesPlayed\"}>Avg Points Per Dive</th>\n                      <th data-tip={\"Consecutive dives found treasure\"}>Longest Streak</th>\n                      <th data-tip={\"Total Points\"}>Total Points</th>\n                    </tr>\n                  </thead>\n                <tbody>\n                  {highScoringRows}\n                </tbody>\n              </table>\n            </div>\n            <div id=\"RulesDiv\" style={{display:\"none\"}}>\n              <h1>Dive School (Rules)</h1>\n              You are diving for a hidden Treasure Word - a series of 6 clues will reveal information about the word's make-up leading you ever closer to it, \n              <br/>\n              until the 7th clue will provide you with the dictionary's definition of the word.\n              <br/><br/>\n              The Treasure Word is always a noun, so guess those if you can, but any valid word will earn 1 point-per-clue-it-satisfies.\n              <br/><br/>\n              Even if you successfully guess the Treasure Word before the end, there are still points on the table for you to claim by entering<br/>\n              other words that meet as many clues as possible.\n              <br/><br/>\n              There might be plenty more fish in the sea but you'll only play each noun <span style={boldFont}>once</span> - avoid drowning and scoring zero<br/>\n              by using the oxygen to buy more time, or Resurface to \"bank\" i.e, end your turn and receive points for the words you've already submitted.\n              <br/><br/>\n              <span style={boldFont,red}>Sharks!</span> randomly appear. While struggling with them you cannot refill oxygen tanks!\n              <br/><br/>\n              <span style={boldFont,blue}>Mines!</span> randomly appear. Take great care to ensure your next answer is a valid dictionary word as the invalid-word buzzer will trigger the mine!\n              <br/><br/>\n              <span style={boldFont}>Squid!</span> randomly appear. They'll squirt ink to cover up the previous clues - hope you've memorized them!\n              <br/><br/>\n              A Perfect Dive is achieved by scoring the maximum 38 points.\n              This score can be reached by :\n              <ul>\n                <li>Getting 1pt for every clue that (each of) your submitted word satisfies. Max = 27pts </li>\n                <li> +2pts bonus if you got all 27pts</li>\n                <li> +3pts if you found the Treasure word</li>\n                <li> +1pts for using no oxygen</li>\n                <li> +1pts for every unused oxygen tank (up to 5)</li>\n              </ul>\n              There's treasure to be found - suit-up and lets dive in!\n              <br/><br/>\n            </div>\n            <button onClick={this.props.handleReplay} className=\"button\" value=\"Replay\">Dive Again!</button>\n            <ReactTooltip />\n          </ReactModal>\n        );\n      }\n\n      if(this.props.scoreData == null && this.props.highScoreData == null)\n      {\n        return (\n              <ReactModal \n              isOpen={this.props.showModal}\n              contentLabel=\"Minimal Modal Example\"\n              appElement={document.getElementById(\"root\")}\n              >\n              <div style={spinnerStyle}><Spinner/></div>\n              </ReactModal>\n        );\n      }\n\n      if(this.props.isDead)\n      {\n        sadSound.play();\n        return (\n              <ReactModal \n              isOpen={this.props.showModal}\n              contentLabel=\"Minimal Modal Example\"\n              appElement={document.getElementById(\"root\")}\n              style={{\n                content: {\n                  color: 'red',\n                   backgroundImage: 'url(/images/funeral.jpg)',\n                   backgroundSize: 'cover',\n                   backgroundPosition: 'center',\n                  backgroundColor: 'black',\n                  overflow: 'scroll',\n                  filter: 'drop-shadow(1px 2px 4px darkblue)'\n                }\n              }}\n              >\n              {/* <span className=\"DeadSpan\">Not all treasure hunters return home with loot...\n              <button onClick={this.props.handleReplay} className=\"button\" value=\"Replay\">Dive Again!</button>\n              </span> */}\n              <span className=\"DeadSpan\">\n                You perished in the seas while searching for <span style={resultStyle}>{this.props.scoreData.wordBeingSought}</span>\n                <br/>\n                Top Three Scores for {\"'\"+ this.props.scoreData.wordBeingSought + \"'\"} : \n                {DisplayTopThree(this.props.scoreData.topThreeScores)}\n                <button onClick={this.props.handleReplay} className=\"button\" value=\"Replay\">Dive Again!</button>\n              </span>\n              </ReactModal>\n        );\n      }\n\n      const clueScoringRows = []\n\n      for (let index = 0; index < 7; index++) {\n        const element = this.props.scoreData.clueScores[index];\n        clueScoringRows.push(\n        <tr>\n          <td>{this.props.userGuesses[index]}</td>\n          <td>{element.scorePerClue[0] > 0 ? SuccessImage() : FailImage(index, 0)}</td>\n          <td>{element.scorePerClue[1] > 0 ? SuccessImage() : FailImage(index, 1)}</td>\n          <td>{element.scorePerClue[2] > 0 ? SuccessImage() : FailImage(index, 2)}</td>\n          <td>{element.scorePerClue[3] > 0 ? SuccessImage() : FailImage(index, 3)}</td>\n          <td>{element.scorePerClue[4] > 0 ? SuccessImage() : FailImage(index, 4)}</td>\n          <td>{element.scorePerClue[5] > 0 ? SuccessImage() : FailImage(index, 5)}</td>\n          <td>{\"N/A\"}</td>\n        </tr>)\n      }\n\n      return (\n        <div>\n          \n          <ReactModal \n             isOpen={this.props.showModal}\n             contentLabel=\"Minimal Modal Example\"\n             appElement={document.getElementById(\"root\")}\n             style={{\n              content: {\n                color: 'darkblue',\n                backgroundColor: 'aliceblue',\n                overflow: 'scroll',\n                filter: 'drop-shadow(1px 2px 4px darkblue)'\n              }\n            }}\n            \n          >\n            {this.props.scoreData.isPerfectDive != null && this.props.scoreData.isPerfectDive == 1 ? PerfectDive() : \"\"}\n            <br/>  \n            You {this.props.scoreData.foundTreasure != null && this.props.scoreData.foundTreasure == 1 ? \"successfully found \" : \"were searching for \" } the Treasure Word : <span style={resultStyle}>{this.props.scoreData.wordBeingSought}</span>\n            <br/>\n            You consumed oxygen bottles : <span style={resultStyle}>{this.props.oxygenBottlesUsed}</span>\n            <br/>\n            Total Score: <span style={resultStyle}>${this.props.scoreData.totalScore}m</span>\n            <br/>\n            Top Three Scores for {this.props.scoreData.wordBeingSought} : \n            {DisplayTopThree(this.props.scoreData.topThreeScores)}\n\n            How you scored against the clues:\n            <br/>\n            <span style={smallerFont}> (hover over e.g 'Clue 2' to be reminded of that clue)</span>\n            <table>\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th data-tip={\"'\" + this.props.clues[0].clueText + \"'\"}>Clue 1</th>\n                    <th data-tip={\"'\" + this.props.clues[1].clueText + \"'\"}>Clue 2</th>\n                    <th data-tip={\"'\" + this.props.clues[2].clueText + \"'\"}>Clue 3</th>\n                    <th data-tip={\"'\" + this.props.clues[3].clueText + \"'\"}>Clue 4</th>\n                    <th data-tip={\"'\" + this.props.clues[4].clueText + \"'\"}>Clue 5</th>\n                    <th data-tip={\"'\" + this.props.clues[5].clueText + \"'\"}>Clue 6</th>\n                    <th data-tip={\"'\" + this.props.clues[6].clueText + \"'\"}>Clue 7</th>\n                  </tr>\n                </thead>\n              <tbody>\n                {clueScoringRows}\n              </tbody>\n            </table>\n            <br/>\n\n            <button onClick={this.props.handleReplay} className=\"button\" value=\"Replay\">Dive Again!</button>\n            <ReactTooltip />\n          </ReactModal>\n        </div>\n      );\n\n      function PerfectDive()\n      {\n        perfectSound.play();\n        return(\n          <div style={biggerFont}>\n            <span style={blue}>Congratulations </span>\n            <span style={green}>It's </span>\n            <span style={orange}>A </span>\n            <span style={violet}>*PERFECT* </span>\n            <span style={red}>Dive! </span>\n          </div>            \n        ); \n\n      }\n      function SuccessImage()\n      {\n        return(\n            <img src=\"/images/Coin.png\" width=\"25px\" height=\"25px\"/>\n        );\n      }\n\n      function FailImage(answerIndex,clueIndex)\n      {\n        //console.log(\"aI: \" + answerIndex + \" cI:\" +clueIndex);\n        let isThisRelevant = (parseInt(clueIndex) <= parseInt(answerIndex));\n        if(!isThisRelevant)\n        {\n          //console.log(\"display N/A for aI: \" + answerIndex + \" cI:\" +clueIndex);\n          return \"N/A\";\n        }\n        //readme: otherwise it was relevant - a clue they knew about and didn't meet so FAILED\n        return(\n\n            <img src=\"/images/Skull.jpg\" width=\"25px\" height=\"25px\"/>\n          \n        );\n      }\n\n      function DisplayTopThree(topThree)\n      {\n        //console.log(\"DisplayTopThree: \" + topThree[0].playerName);\n        return(\n          <ol>\n          <li>{topThree[0] != null && topThree[0] != undefined ? topThree[0].playerName : \"...no-one yet!\"}<span style={resultStyle}>{topThree[0] != null && topThree[0] != undefined ? \" : $\" + topThree[0].totalPoints + \"m\" : \"\"}</span></li>\n          <li>{topThree[1] != null && topThree[1] != undefined ? topThree[1].playerName : \"...no-one yet!\"}<span style={resultStyle}>{topThree[1] != null && topThree[1] != undefined  ? \" : $\" + topThree[1].totalPoints + \"m\" : \"\"}</span></li>\n          <li>{topThree[2] != null && topThree[2] != undefined ? topThree[2].playerName : \"...no-one yet!\"}<span style={resultStyle}>{topThree[2] != null && topThree[2] != undefined ? \" : $\" + topThree[2].totalPoints + \"m\" : \"\"}</span></li>\n          </ol>\n        );\n      }\n\n    }\n  }\n\nvar smallerFont = {\n  fontSize: 'smaller'\n}\n\nvar boldFont = {\n  fontWeight: 'bold'\n}\n\nvar biggerFont = {\n  fontSize: 'larger'\n}\n\n  var resultStyle = {\n    color: 'coral',\n    fontFamily: 'Arial',\n    fontSize: 'larger',\n    textAlign: 'left'\n  }\n\n  var red = {\n    color: 'red'\n  }\n  var violet = {\n    color: 'violet'\n  }\n  var green = {\n    color: 'green'\n  }\n  var orange = {\n    color: 'orange'\n  }\n  var blue = {\n    color: 'blue'\n  }\n\n  var spinnerStyle = {\n    margin: \"0 auto\"\n  }\n\n  export default ResultsModal;"]},"metadata":{},"sourceType":"module"}