{"ast":null,"code":"var _jsxFileName = \"/Users/JMKerr/Code3/react-is-fun/src/TimerCircle.js\";\n// Credit: Mateusz Rybczonec\nimport React, { useState, Component } from 'react';\nimport './TimerCircle.css';\nconst FULL_DASH_ARRAY = 283;\nconst WARNING_THRESHOLD = 10;\nconst ALERT_THRESHOLD = 5;\nconst TIMER_NEEDS_INITIALIZING = 1;\nconst TIMER_HAS_BEEN_INITIALIZED = 2;\nconst COLOR_CODES = {\n  info: {\n    color: \"green\"\n  },\n  warning: {\n    color: \"orange\",\n    threshold: WARNING_THRESHOLD\n  },\n  alert: {\n    color: \"red\",\n    threshold: ALERT_THRESHOLD\n  }\n}; //readme: these variables are shared by all TimerCircles (unlike State which they each have their own)\n\nconst TIME_LIMIT = 90;\nlet timePassed = 0;\nlet timeLeft = TIME_LIMIT;\nlet timerInterval = Array(7).fill(null);\nlet remainingPathColor = COLOR_CODES.info.color;\nlet oxygenBottlesApplied = 0;\nlet timerRanOutGlobal = null;\n\nfunction Init(uniqueKey) {\n  onTimesUp();\n  /*\n  * readme: bring these two back in if you want the timer to NOT be shared across all rounds\n  timePassed = 0;\n  timeLeft = TIME_LIMIT;\n  */\n\n  timerInterval[uniqueKey] = null;\n  remainingPathColor = COLOR_CODES.info.color;\n  console.log('Timer started' + uniqueKey);\n  document.getElementById(\"TimerCircle\" + uniqueKey).innerHTML = '<div class=\"base-timer\"><svg class=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">   <g class=\"base-timer__circle\">    <circle class=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>    <path      id=\"base-timer-path-remaining' + uniqueKey + '\"      stroke-dasharray=\"283\"       class=\"base-timer__path-remaining ' + remainingPathColor + '\"      d=\"        M 50, 50        m -45, 0        a 45,45 0 1,0 90,0        a 45,45 0 1,0 -90,0      \"    ></path>  </g></svg><span id=\"base-timer-label' + uniqueKey + '\" class=\"base-timer__label\">' + formatTime(timeLeft) + '</span></div>';\n  startTimer(uniqueKey);\n}\n\nfunction AddToTimer(sec) {\n  console.log('timePassed' + timePassed);\n  timePassed -= sec;\n}\n\nfunction onTimesUp(uniqueKey) {\n  clearInterval(timerInterval[uniqueKey]);\n\n  if (timerRanOutGlobal != null && timerRanOutGlobal != undefined && i != null && i != undefined) {\n    timerRanOutGlobal(uniqueKey);\n  }\n}\n\nfunction startTimer(uniqueKey) {\n  timerInterval[uniqueKey] = setInterval(() => {\n    timePassed = timePassed += 1;\n    timeLeft = TIME_LIMIT - timePassed;\n    document.getElementById(\"base-timer-label\" + uniqueKey).innerHTML = formatTime(timeLeft);\n    setCircleDasharray(uniqueKey);\n    setRemainingPathColor(timeLeft, uniqueKey);\n\n    if (timeLeft === 0) {\n      onTimesUp(uniqueKey);\n    }\n  }, 1000);\n}\n\nfunction formatTime(time) {\n  const minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n\n  return `${minutes}:${seconds}`;\n}\n\nfunction setRemainingPathColor(timeLeft, uniqueKey) {\n  const {\n    alert,\n    warning,\n    info\n  } = COLOR_CODES;\n\n  if (timeLeft <= alert.threshold) {\n    document.getElementById(\"base-timer-path-remaining\" + uniqueKey).classList.remove(warning.color);\n    document.getElementById(\"base-timer-path-remaining\" + uniqueKey).classList.add(alert.color);\n  } else if (timeLeft <= warning.threshold) {\n    document.getElementById(\"base-timer-path-remaining\" + uniqueKey).classList.remove(info.color);\n    document.getElementById(\"base-timer-path-remaining\" + uniqueKey).classList.add(warning.color);\n  }\n}\n\nfunction calculateTimeFraction() {\n  const rawTimeFraction = timeLeft / TIME_LIMIT;\n  return rawTimeFraction - 1 / TIME_LIMIT * (1 - rawTimeFraction);\n}\n\nfunction setCircleDasharray(uniqueKey) {\n  const circleDasharray = `${(calculateTimeFraction() * FULL_DASH_ARRAY).toFixed(0)} 283`;\n  document.getElementById(\"base-timer-path-remaining\" + uniqueKey).setAttribute(\"stroke-dasharray\", circleDasharray);\n}\n\nclass TimerCircle extends React.Component {\n  // readme: dont appear to need each Timer to have their own state.\n  // am happy sharing the timer variables globally across all Timers (e.g. TimePassed and oxygenBottlesApplied are used by all 7)\n  render() {\n    timerRanOutGlobal = this.props.timerRanOut; //console.log('Got here' + this.props.initializeTimers[this.props.uniqueKey - 1] + ' ' + this.props.uniqueKey);\n    // readme: '1' means the timer's div is ready and the timer can be initialized. '2' means it's all setup, dont reinit it as that would reset it.\n\n    if (this.props.initializeTimers[this.props.uniqueKey - 1] == TIMER_NEEDS_INITIALIZING) {\n      Init(this.props.uniqueKey); //readme: to my surprise changing this array prop seems to change the STATE (possibly am breaking a pattern)\n      //readme: will leave for now, but could change later to a callback to the GameBoard and change the state in there instead.\n\n      this.props.initializeTimers[this.props.uniqueKey - 1] = TIMER_HAS_BEEN_INITIALIZED;\n    } // readme: haltTimer will be true for any rounds that aren't the current round.\n\n\n    if (this.props.haltTimer) {\n      onTimesUp(this.props.uniqueKey);\n    }\n\n    if (oxygenBottlesApplied < this.props.oxygenBottlesUsed && this.props.currentRoundBeingPlayed == this.props.uniqueKey) {\n      //readme: 11 because it takes about 1s for the 10 to be added!\n      //readme: note the condition checking what round we are on, necessary or ALL 7 timers would think they needed to update the timer.\n      AddToTimer(11);\n      oxygenBottlesApplied++;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"TimerCircle\" + this.props.uniqueKey,\n      style: this.props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    });\n  } //readme: putting this here solved a problem of a red warning the browser dev console when setting state inside Render()\n\n\n  componentDidUpdate() {//readme: have no longer got a reason to use this...\n  }\n\n}\n\nexport default TimerCircle;","map":{"version":3,"sources":["/Users/JMKerr/Code3/react-is-fun/src/TimerCircle.js"],"names":["React","useState","Component","FULL_DASH_ARRAY","WARNING_THRESHOLD","ALERT_THRESHOLD","TIMER_NEEDS_INITIALIZING","TIMER_HAS_BEEN_INITIALIZED","COLOR_CODES","info","color","warning","threshold","alert","TIME_LIMIT","timePassed","timeLeft","timerInterval","Array","fill","remainingPathColor","oxygenBottlesApplied","timerRanOutGlobal","Init","uniqueKey","onTimesUp","console","log","document","getElementById","innerHTML","formatTime","startTimer","AddToTimer","sec","clearInterval","undefined","i","setInterval","setCircleDasharray","setRemainingPathColor","time","minutes","Math","floor","seconds","classList","remove","add","calculateTimeFraction","rawTimeFraction","circleDasharray","toFixed","setAttribute","TimerCircle","render","props","timerRanOut","initializeTimers","haltTimer","oxygenBottlesUsed","currentRoundBeingPlayed","style","componentDidUpdate"],"mappings":"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","sourcesContent":["// Credit: Mateusz Rybczonec\nimport React, {useState, Component} from 'react';\nimport './TimerCircle.css';\n\nconst FULL_DASH_ARRAY = 283;\nconst WARNING_THRESHOLD = 10;\nconst ALERT_THRESHOLD = 5;\nconst TIMER_NEEDS_INITIALIZING = 1;\nconst TIMER_HAS_BEEN_INITIALIZED = 2;\n\n\nconst COLOR_CODES = {\n  info: {\n    color: \"green\"\n  },\n  warning: {\n    color: \"orange\",\n    threshold: WARNING_THRESHOLD\n  },\n  alert: {\n    color: \"red\",\n    threshold: ALERT_THRESHOLD\n  }\n};\n\n//readme: these variables are shared by all TimerCircles (unlike State which they each have their own)\nconst TIME_LIMIT = 90;\nlet timePassed = 0;\nlet timeLeft = TIME_LIMIT;\nlet timerInterval =  Array(7).fill(null);\nlet remainingPathColor = COLOR_CODES.info.color;\nlet oxygenBottlesApplied = 0;\nlet timerRanOutGlobal = null;\n\nfunction Init(uniqueKey)\n{\n        onTimesUp();\n\n        /*\n        * readme: bring these two back in if you want the timer to NOT be shared across all rounds\n        timePassed = 0;\n        timeLeft = TIME_LIMIT;\n        */\n        timerInterval[uniqueKey] = null;\n        remainingPathColor = COLOR_CODES.info.color;\n    \n        console.log('Timer started' + uniqueKey);\n        document.getElementById(\"TimerCircle\" + uniqueKey).innerHTML = '<div class=\"base-timer\"><svg class=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">   <g class=\"base-timer__circle\">    <circle class=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>    <path      id=\"base-timer-path-remaining'+uniqueKey+'\"      stroke-dasharray=\"283\"       class=\"base-timer__path-remaining '+remainingPathColor+'\"      d=\"        M 50, 50        m -45, 0        a 45,45 0 1,0 90,0        a 45,45 0 1,0 -90,0      \"    ></path>  </g></svg><span id=\"base-timer-label'+uniqueKey+'\" class=\"base-timer__label\">'+formatTime(timeLeft)+'</span></div>';\n        startTimer(uniqueKey);\n}\n\nfunction AddToTimer(sec)\n{\n    console.log('timePassed'+ timePassed);\n    timePassed -= sec;\n}\n\nfunction onTimesUp(uniqueKey) {\n  clearInterval(timerInterval[uniqueKey]);\n  if(timerRanOutGlobal != null && timerRanOutGlobal != undefined \n    && i != null && i != undefined)\n  {\n    timerRanOutGlobal(uniqueKey);\n  }\n}\n\nfunction startTimer(uniqueKey) {\n    timerInterval[uniqueKey] = setInterval(() => {\n    timePassed = timePassed += 1;\n    timeLeft = TIME_LIMIT - timePassed;\n    document.getElementById(\"base-timer-label\" + uniqueKey).innerHTML = formatTime(\n      timeLeft\n    );\n    setCircleDasharray(uniqueKey);\n    setRemainingPathColor(timeLeft,uniqueKey);\n\n    if (timeLeft === 0) {\n      onTimesUp(uniqueKey);\n    }\n  }, 1000);\n}\n\nfunction formatTime(time) {\n  const minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n\n  return `${minutes}:${seconds}`;\n}\n\nfunction setRemainingPathColor(timeLeft,uniqueKey) {\n  const { alert, warning, info } = COLOR_CODES;\n  if (timeLeft <= alert.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(warning.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(alert.color);\n  } else if (timeLeft <= warning.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(info.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(warning.color);\n  }\n}\n\nfunction calculateTimeFraction() {\n  const rawTimeFraction = timeLeft / TIME_LIMIT;\n  return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);\n}\n\nfunction setCircleDasharray(uniqueKey) {\n  const circleDasharray = `${(\n    calculateTimeFraction() * FULL_DASH_ARRAY\n  ).toFixed(0)} 283`;\n  document\n    .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n    .setAttribute(\"stroke-dasharray\", circleDasharray);\n}\n\nclass TimerCircle extends React.Component\n{ \n    // readme: dont appear to need each Timer to have their own state.\n    // am happy sharing the timer variables globally across all Timers (e.g. TimePassed and oxygenBottlesApplied are used by all 7)\nrender()\n    {\n        timerRanOutGlobal = this.props.timerRanOut;\n        //console.log('Got here' + this.props.initializeTimers[this.props.uniqueKey - 1] + ' ' + this.props.uniqueKey);\n        \n        // readme: '1' means the timer's div is ready and the timer can be initialized. '2' means it's all setup, dont reinit it as that would reset it.\n        if(this.props.initializeTimers[this.props.uniqueKey - 1] == TIMER_NEEDS_INITIALIZING)\n        {\n            Init(this.props.uniqueKey);\n            //readme: to my surprise changing this array prop seems to change the STATE (possibly am breaking a pattern)\n            //readme: will leave for now, but could change later to a callback to the GameBoard and change the state in there instead.\n            this.props.initializeTimers[this.props.uniqueKey - 1] = TIMER_HAS_BEEN_INITIALIZED;\n        }\n\n        // readme: haltTimer will be true for any rounds that aren't the current round.\n        if(this.props.haltTimer)\n        {   \n            onTimesUp(this.props.uniqueKey);          \n        }\n\n        if(oxygenBottlesApplied < this.props.oxygenBottlesUsed &&\n            this.props.currentRoundBeingPlayed == this.props.uniqueKey)\n        {\n            //readme: 11 because it takes about 1s for the 10 to be added!\n            //readme: note the condition checking what round we are on, necessary or ALL 7 timers would think they needed to update the timer.\n            AddToTimer(11);\n            oxygenBottlesApplied++;\n        }\n\n        return(\n            <div id={\"TimerCircle\" + this.props.uniqueKey} style={this.props.style}></div>\n        );\n    }\n    //readme: putting this here solved a problem of a red warning the browser dev console when setting state inside Render()\n    componentDidUpdate()\n    {\n        //readme: have no longer got a reason to use this...\n    }\n}\n\nexport default TimerCircle;\n\n\n\n"]},"metadata":{},"sourceType":"module"}