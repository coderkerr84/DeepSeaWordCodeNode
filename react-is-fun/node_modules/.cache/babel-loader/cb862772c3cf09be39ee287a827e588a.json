{"ast":null,"code":"var _jsxFileName = \"/Users/JMKerr/CodeNode2/react-is-fun/src/TimerCircle.js\";\n// Credit: Mateusz Rybczonec\nimport React, { useState, Component } from 'react';\nimport './TimerCircle.css';\nimport UIfx from 'uifx';\nimport tickSfx from './sounds/tick.mp3';\nconst tickSoundQuiet = new UIfx(tickSfx);\ntickSoundQuiet.setVolume(0.4);\nconst tickSoundUrgent = new UIfx(tickSfx);\ntickSoundUrgent.setVolume(0.9);\nconst FULL_DASH_ARRAY = 283;\nconst WARNING_THRESHOLD = 10;\nconst ALERT_THRESHOLD = 5;\nconst TIMER_NEEDS_INITIALIZING = 1;\nconst TIMER_HAS_BEEN_INITIALIZED = 2;\nconst COLOR_CODES = {\n  info: {\n    color: \"green\"\n  },\n  warning: {\n    color: \"orange\",\n    threshold: WARNING_THRESHOLD\n  },\n  alert: {\n    color: \"red\",\n    threshold: ALERT_THRESHOLD\n  }\n}; //readme: these variables are shared by all TimerCircles (unlike State which they each have their own)\n\nconst TIME_LIMIT = 90;\nlet timePassed = 0;\nlet timeLeft = TIME_LIMIT;\nlet timerInterval = Array(7).fill(null);\nlet remainingPathColor = COLOR_CODES.info.color;\nlet oxygenBottlesApplied = 0;\nlet oxygenBottlesBought = 0;\nlet timerRanOutCallback = null; // readme: not certain I need this next variable? Because this is global to all timers it saves me passing it back to here from the GameBoard state\n// but maybe having a copy here is undesirable and i should use the state one.\n\nlet roundTheyWereOnWhenTimerExpired = null;\n\nfunction Init(uniqueKey) {\n  // INIT;\n  timerInterval = Array(7).fill(null);\n  onTimesUp(uniqueKey);\n  /*\n  * readme: bring these two back in if you want the timer to NOT be shared across all rounds\n  timePassed = 0;\n  timeLeft = TIME_LIMIT;\n  */\n\n  timerInterval[uniqueKey] = null;\n  remainingPathColor = COLOR_CODES.info.color;\n  console.log('Timer started' + uniqueKey);\n  document.getElementById(\"TimerCircle\" + uniqueKey).innerHTML = '<div class=\"base-timer\"><svg class=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">   <g class=\"base-timer__circle\">    <circle class=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>    <path      id=\"base-timer-path-remaining' + uniqueKey + '\"      stroke-dasharray=\"283\"       class=\"base-timer__path-remaining ' + remainingPathColor + '\"      d=\"        M 50, 50        m -45, 0        a 45,45 0 1,0 90,0        a 45,45 0 1,0 -90,0      \"    ></path>  </g></svg><span id=\"base-timer-label' + uniqueKey + '\" class=\"base-timer__label\">' + formatTime(timeLeft) + '</span></div>';\n  startTimer(uniqueKey);\n}\n\nfunction ResetTimer(calledBy) {\n  console.log(\"ResetTimer \" + calledBy); //readme: reset the shared static timer vars - be careful when calling this as don't want to reset in between rounds \n\n  timePassed = 0;\n  timeLeft = TIME_LIMIT;\n  oxygenBottlesApplied = 0;\n}\n\nfunction AddToTimer(sec) {\n  console.log('timePassed' + timePassed);\n  timePassed -= sec;\n}\n\nfunction onTimesUp(uniqueKey) {\n  console.log(\"killing timer : \" + uniqueKey);\n  clearInterval(timerInterval[uniqueKey]);\n}\n\nfunction startTimer(uniqueKey) {\n  timerInterval[uniqueKey] = setInterval(() => {\n    if (document.getElementById(\"base-timer-label\" + uniqueKey)) {\n      // if(oxygenBottlesApplied < oxygenBottlesBought)\n      // {\n      //     let diff = oxygenBottlesBought - oxygenBottlesApplied;\n      //     //readme : they have paid for oxygen that's not yet been used - use it!\n      //     timePassed -= (11 * diff);\n      //     oxygenBottlesApplied += diff;\n      // }\n      timePassed = timePassed += 1;\n      timeLeft = TIME_LIMIT - timePassed; // readme: only do stuff if html rendered\n\n      document.getElementById(\"base-timer-label\" + uniqueKey).innerHTML = formatTime(timeLeft);\n      setCircleDasharray(uniqueKey);\n      setRemainingPathColor(timeLeft, uniqueKey);\n\n      if (timeLeft === 0) {\n        onTimesUp(uniqueKey);\n\n        if (timerRanOutCallback != null && timerRanOutCallback != undefined && uniqueKey != null && uniqueKey != undefined) {\n          timerRanOutCallback(uniqueKey);\n          roundTheyWereOnWhenTimerExpired = uniqueKey; // readme: so if the timer runs out, then here I reset the timers for the next time they might be used\n\n          ResetTimer(\"bcoz timer expired on \" + uniqueKey + \" oxygenApplied: \" + oxygenBottlesApplied + \" oxyBought: \" + oxygenBottlesBought);\n        }\n      }\n\n      if (timeLeft === 10) tickSoundQuiet.play();\n      if (timeLeft === 5) tickSoundUrgent.play();\n    } else {\n      // readme: hmm, I dont fully understand this - assume this else hit when doing a \"Replay\" and clears out stuff ahead of reusing timer class vars\n      ResetTimer(\"bcoz didn't find a timer for \" + uniqueKey);\n      onTimesUp(uniqueKey);\n    }\n  }, 1000);\n}\n\nfunction formatTime(time) {\n  const minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n\n  return `${minutes}:${seconds}`;\n}\n\nfunction setRemainingPathColor(timeLeft, uniqueKey) {\n  const {\n    alert,\n    warning,\n    info\n  } = COLOR_CODES;\n\n  if (timeLeft <= alert.threshold) {\n    document.getElementById(\"base-timer-path-remaining\" + uniqueKey).classList.remove(warning.color);\n    document.getElementById(\"base-timer-path-remaining\" + uniqueKey).classList.add(alert.color);\n  } else if (timeLeft <= warning.threshold) {\n    document.getElementById(\"base-timer-path-remaining\" + uniqueKey).classList.remove(info.color);\n    document.getElementById(\"base-timer-path-remaining\" + uniqueKey).classList.add(warning.color);\n  }\n}\n\nfunction calculateTimeFraction() {\n  const rawTimeFraction = timeLeft / TIME_LIMIT;\n  return rawTimeFraction - 1 / TIME_LIMIT * (1 - rawTimeFraction);\n}\n\nfunction setCircleDasharray(uniqueKey) {\n  const circleDasharray = `${(calculateTimeFraction() * FULL_DASH_ARRAY).toFixed(0)} 283`;\n  document.getElementById(\"base-timer-path-remaining\" + uniqueKey).setAttribute(\"stroke-dasharray\", circleDasharray);\n}\n\nclass TimerCircle extends React.Component {\n  // readme: dont appear to need each Tier to have their own state.\n  // am happy sharing the timer variables globally across all Timers (e.g. TimePassed and oxygenBottlesApplied are used by all 7)\n  render() {\n    oxygenBottlesBought = this.props.oxygenBottlesBought; //console.log(\"uniqueKey:\" + this.props.uniqueKey + \" oxygenBottlesApplied:\" + oxygenBottlesApplied + \" oxygenBottlesBought:\" + oxygenBottlesBought + \" timePassed: \" + timePassed)\n\n    if (oxygenBottlesApplied < oxygenBottlesBought) {\n      // readme: they appear to have bought oxygen - kill current timer thread,\n      // update the global timer numbers, and start a new thread. Designed to stop race conditions.\n      if (this.props.uniqueKey == this.props.currentRoundBeingPlayed) {\n        // readme: stop the exact timer in question.\n        onTimesUp(this.props.uniqueKey); // readme: these are global vars shared by all timers, update all.\n\n        let diff = oxygenBottlesBought - oxygenBottlesApplied;\n        timePassed -= 11 * diff;\n        oxygenBottlesApplied += diff;\n        console.log(\"oxygenBottlesApplied:\" + oxygenBottlesApplied);\n        startTimer(this.props.uniqueKey);\n      } else {//console.log(\"not the timer we care about: \" +this.props.uniqueKey);\n      }\n    }\n\n    if (this.props.initializeTimers[0] == null) {\n      // readme: bit of an assumption - if the first timer is null, the game has been started or replayed so reset timer.\n      ResetTimer(\"Init.\");\n    }\n\n    timerRanOutCallback = this.props.timerRanOut; //console.log('Got here' + this.props.initializeTimers[this.props.uniqueKey - 1] + ' ' + this.props.uniqueKey);\n    // readme: '1' means the timer's div is ready and the timer can be initialized. '2' means it's all setup, dont reinit it as that would reset it.\n\n    if (this.props.initializeTimers[this.props.uniqueKey - 1] == TIMER_NEEDS_INITIALIZING) {\n      Init(this.props.uniqueKey); //readme: to my surprise changing this array prop seems to change the STATE (possibly am breaking a pattern)\n      //readme: will leave for now, but could change later to a callback to the GameBoard and change the state in there instead.\n\n      this.props.initializeTimers[this.props.uniqueKey - 1] = TIMER_HAS_BEEN_INITIALIZED;\n    } // readme: haltTimer will be true for any rounds that aren't the current round.\n\n\n    if (this.props.haltTimer) {\n      onTimesUp(this.props.uniqueKey);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"TimerCircle\" + this.props.uniqueKey,\n      style: this.props.style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    });\n  } //readme: putting this here solved a problem of a red warning the browser dev console when setting state inside Render()\n\n\n  componentDidUpdate() {//readme: have no longer got a reason to use this...\n  }\n\n}\n\nexport default TimerCircle;","map":{"version":3,"sources":["/Users/JMKerr/CodeNode2/react-is-fun/src/TimerCircle.js"],"names":["React","useState","Component","UIfx","tickSfx","tickSoundQuiet","setVolume","tickSoundUrgent","FULL_DASH_ARRAY","WARNING_THRESHOLD","ALERT_THRESHOLD","TIMER_NEEDS_INITIALIZING","TIMER_HAS_BEEN_INITIALIZED","COLOR_CODES","info","color","warning","threshold","alert","TIME_LIMIT","timePassed","timeLeft","timerInterval","Array","fill","remainingPathColor","oxygenBottlesApplied","oxygenBottlesBought","timerRanOutCallback","roundTheyWereOnWhenTimerExpired","Init","uniqueKey","onTimesUp","console","log","document","getElementById","innerHTML","formatTime","startTimer","ResetTimer","calledBy","AddToTimer","sec","clearInterval","setInterval","setCircleDasharray","setRemainingPathColor","undefined","play","time","minutes","Math","floor","seconds","classList","remove","add","calculateTimeFraction","rawTimeFraction","circleDasharray","toFixed","setAttribute","TimerCircle","render","props","currentRoundBeingPlayed","diff","initializeTimers","timerRanOut","haltTimer","style","componentDidUpdate"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,mBAAP;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,MAAMC,cAAc,GAAG,IAAIF,IAAJ,CAASC,OAAT,CAAvB;AACAC,cAAc,CAACC,SAAf,CAAyB,GAAzB;AACA,MAAMC,eAAe,GAAG,IAAIJ,IAAJ,CAASC,OAAT,CAAxB;AACAG,eAAe,CAACD,SAAhB,CAA0B,GAA1B;AAEA,MAAME,eAAe,GAAG,GAAxB;AACA,MAAMC,iBAAiB,GAAG,EAA1B;AACA,MAAMC,eAAe,GAAG,CAAxB;AACA,MAAMC,wBAAwB,GAAG,CAAjC;AACA,MAAMC,0BAA0B,GAAG,CAAnC;AAGA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH,GADY;AAIlBC,EAAAA,OAAO,EAAE;AACPD,IAAAA,KAAK,EAAE,QADA;AAEPE,IAAAA,SAAS,EAAER;AAFJ,GAJS;AAQlBS,EAAAA,KAAK,EAAE;AACLH,IAAAA,KAAK,EAAE,KADF;AAELE,IAAAA,SAAS,EAAEP;AAFN;AARW,CAApB,C,CAcA;;AACA,MAAMS,UAAU,GAAG,EAAnB;AACA,IAAIC,UAAU,GAAG,CAAjB;AACA,IAAIC,QAAQ,GAAGF,UAAf;AACA,IAAIG,aAAa,GAAIC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAArB;AACA,IAAIC,kBAAkB,GAAGZ,WAAW,CAACC,IAAZ,CAAiBC,KAA1C;AACA,IAAIW,oBAAoB,GAAG,CAA3B;AACA,IAAIC,mBAAmB,GAAG,CAA1B;AACA,IAAIC,mBAAmB,GAAG,IAA1B,C,CACA;AACA;;AACA,IAAIC,+BAA+B,GAAG,IAAtC;;AAEA,SAASC,IAAT,CAAcC,SAAd,EACA;AACQ;AACAT,EAAAA,aAAa,GAAIC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAjB;AAEAQ,EAAAA,SAAS,CAACD,SAAD,CAAT;AAEA;;;;;;AAKAT,EAAAA,aAAa,CAACS,SAAD,CAAb,GAA2B,IAA3B;AACAN,EAAAA,kBAAkB,GAAGZ,WAAW,CAACC,IAAZ,CAAiBC,KAAtC;AAEAkB,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBH,SAA9B;AACAI,EAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAgBL,SAAxC,EAAmDM,SAAnD,GAA+D,6QAA2QN,SAA3Q,GAAqR,wEAArR,GAA8VN,kBAA9V,GAAiX,0JAAjX,GAA4gBM,SAA5gB,GAAshB,8BAAthB,GAAqjBO,UAAU,CAACjB,QAAD,CAA/jB,GAA0kB,eAAzoB;AACAkB,EAAAA,UAAU,CAACR,SAAD,CAAV;AACP;;AAED,SAASS,UAAT,CAAoBC,QAApB,EACA;AACER,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBO,QAA5B,EADF,CAEE;;AACArB,EAAAA,UAAU,GAAG,CAAb;AACAC,EAAAA,QAAQ,GAAGF,UAAX;AACAO,EAAAA,oBAAoB,GAAG,CAAvB;AACD;;AAED,SAASgB,UAAT,CAAoBC,GAApB,EACA;AACIV,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAcd,UAA1B;AACAA,EAAAA,UAAU,IAAIuB,GAAd;AACH;;AAED,SAASX,SAAT,CAAmBD,SAAnB,EAA8B;AAC5BE,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBH,SAAjC;AACAa,EAAAA,aAAa,CAACtB,aAAa,CAACS,SAAD,CAAd,CAAb;AACD;;AAED,SAASQ,UAAT,CAAoBR,SAApB,EAA+B;AAC3BT,EAAAA,aAAa,CAACS,SAAD,CAAb,GAA2Bc,WAAW,CAAC,MAAM;AAC7C,QAAGV,QAAQ,CAACC,cAAT,CAAwB,qBAAqBL,SAA7C,CAAH,EACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,MAAAA,UAAU,GAAGA,UAAU,IAAI,CAA3B;AACAC,MAAAA,QAAQ,GAAGF,UAAU,GAAGC,UAAxB,CATF,CAUE;;AAEEe,MAAAA,QAAQ,CAACC,cAAT,CAAwB,qBAAqBL,SAA7C,EAAwDM,SAAxD,GAAoEC,UAAU,CAC5EjB,QAD4E,CAA9E;AAGAyB,MAAAA,kBAAkB,CAACf,SAAD,CAAlB;AACAgB,MAAAA,qBAAqB,CAAC1B,QAAD,EAAUU,SAAV,CAArB;;AAEA,UAAIV,QAAQ,KAAK,CAAjB,EAAoB;AAClBW,QAAAA,SAAS,CAACD,SAAD,CAAT;;AACA,YAAGH,mBAAmB,IAAI,IAAvB,IAA+BA,mBAAmB,IAAIoB,SAAtD,IACEjB,SAAS,IAAI,IADf,IACuBA,SAAS,IAAIiB,SADvC,EAEA;AACEpB,UAAAA,mBAAmB,CAACG,SAAD,CAAnB;AACAF,UAAAA,+BAA+B,GAAGE,SAAlC,CAFF,CAGE;;AACAS,UAAAA,UAAU,CAAC,2BAA2BT,SAA3B,GAAuC,kBAAvC,GAA4DL,oBAA5D,GAAmF,cAAnF,GAAoGC,mBAArG,CAAV;AACD;AACF;;AACD,UAAIN,QAAQ,KAAK,EAAjB,EAAqBhB,cAAc,CAAC4C,IAAf;AACrB,UAAI5B,QAAQ,KAAK,CAAjB,EAAoBd,eAAe,CAAC0C,IAAhB;AAEvB,KAjCD,MAkCA;AACE;AACAT,MAAAA,UAAU,CAAC,kCAAkCT,SAAnC,CAAV;AACAC,MAAAA,SAAS,CAACD,SAAD,CAAT;AACD;AACF,GAxCuC,EAwCrC,IAxCqC,CAAtC;AAyCH;;AAED,SAASO,UAAT,CAAoBY,IAApB,EAA0B;AACxB,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAII,OAAO,GAAGJ,IAAI,GAAG,EAArB;;AAEA,MAAII,OAAO,GAAG,EAAd,EAAkB;AAChBA,IAAAA,OAAO,GAAI,IAAGA,OAAQ,EAAtB;AACD;;AAED,SAAQ,GAAEH,OAAQ,IAAGG,OAAQ,EAA7B;AACD;;AAED,SAASP,qBAAT,CAA+B1B,QAA/B,EAAwCU,SAAxC,EAAmD;AACjD,QAAM;AAAEb,IAAAA,KAAF;AAASF,IAAAA,OAAT;AAAkBF,IAAAA;AAAlB,MAA2BD,WAAjC;;AACA,MAAIQ,QAAQ,IAAIH,KAAK,CAACD,SAAtB,EAAiC;AAC/BkB,IAAAA,QAAQ,CACLC,cADH,CACkB,8BAA8BL,SADhD,EAEGwB,SAFH,CAEaC,MAFb,CAEoBxC,OAAO,CAACD,KAF5B;AAGAoB,IAAAA,QAAQ,CACLC,cADH,CACkB,8BAA8BL,SADhD,EAEGwB,SAFH,CAEaE,GAFb,CAEiBvC,KAAK,CAACH,KAFvB;AAGD,GAPD,MAOO,IAAIM,QAAQ,IAAIL,OAAO,CAACC,SAAxB,EAAmC;AACxCkB,IAAAA,QAAQ,CACLC,cADH,CACkB,8BAA8BL,SADhD,EAEGwB,SAFH,CAEaC,MAFb,CAEoB1C,IAAI,CAACC,KAFzB;AAGAoB,IAAAA,QAAQ,CACLC,cADH,CACkB,8BAA8BL,SADhD,EAEGwB,SAFH,CAEaE,GAFb,CAEiBzC,OAAO,CAACD,KAFzB;AAGD;AACF;;AAED,SAAS2C,qBAAT,GAAiC;AAC/B,QAAMC,eAAe,GAAGtC,QAAQ,GAAGF,UAAnC;AACA,SAAOwC,eAAe,GAAI,IAAIxC,UAAL,IAAoB,IAAIwC,eAAxB,CAAzB;AACD;;AAED,SAASb,kBAAT,CAA4Bf,SAA5B,EAAuC;AACrC,QAAM6B,eAAe,GAAI,GAAE,CACzBF,qBAAqB,KAAKlD,eADD,EAEzBqD,OAFyB,CAEjB,CAFiB,CAEd,MAFb;AAGA1B,EAAAA,QAAQ,CACLC,cADH,CACkB,8BAA8BL,SADhD,EAEG+B,YAFH,CAEgB,kBAFhB,EAEoCF,eAFpC;AAGD;;AAED,MAAMG,WAAN,SAA0B/D,KAAK,CAACE,SAAhC,CACA;AACI;AACA;AACJ8D,EAAAA,MAAM,GACF;AAEErC,IAAAA,mBAAmB,GAAG,KAAKsC,KAAL,CAAWtC,mBAAjC,CAFF,CAGE;;AAEA,QAAGD,oBAAoB,GAAGC,mBAA1B,EACA;AACE;AACA;AAEA,UAAG,KAAKsC,KAAL,CAAWlC,SAAX,IAAwB,KAAKkC,KAAL,CAAWC,uBAAtC,EAA8D;AAC5D;AACAlC,QAAAA,SAAS,CAAC,KAAKiC,KAAL,CAAWlC,SAAZ,CAAT,CAF4D,CAI7D;;AACC,YAAIoC,IAAI,GAAGxC,mBAAmB,GAAGD,oBAAjC;AACAN,QAAAA,UAAU,IAAK,KAAK+C,IAApB;AACAzC,QAAAA,oBAAoB,IAAIyC,IAAxB;AACAlC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BR,oBAAtC;AACAa,QAAAA,UAAU,CAAC,KAAK0B,KAAL,CAAWlC,SAAZ,CAAV;AACA,OAVF,MAYC,CACE;AACD;AACH;;AAED,QAAG,KAAKkC,KAAL,CAAWG,gBAAX,CAA4B,CAA5B,KAAkC,IAArC,EACA;AACE;AACA5B,MAAAA,UAAU,CAAC,OAAD,CAAV;AACD;;AAEDZ,IAAAA,mBAAmB,GAAG,KAAKqC,KAAL,CAAWI,WAAjC,CAjCF,CAkCI;AAEA;;AACA,QAAG,KAAKJ,KAAL,CAAWG,gBAAX,CAA4B,KAAKH,KAAL,CAAWlC,SAAX,GAAuB,CAAnD,KAAyDpB,wBAA5D,EACA;AACImB,MAAAA,IAAI,CAAC,KAAKmC,KAAL,CAAWlC,SAAZ,CAAJ,CADJ,CAEI;AACA;;AACA,WAAKkC,KAAL,CAAWG,gBAAX,CAA4B,KAAKH,KAAL,CAAWlC,SAAX,GAAuB,CAAnD,IAAwDnB,0BAAxD;AACH,KA3CL,CA6CI;;;AACA,QAAG,KAAKqD,KAAL,CAAWK,SAAd,EACA;AACItC,MAAAA,SAAS,CAAC,KAAKiC,KAAL,CAAWlC,SAAZ,CAAT;AACH;;AAED,wBACI;AAAK,MAAA,EAAE,EAAE,gBAAgB,KAAKkC,KAAL,CAAWlC,SAApC;AAA+C,MAAA,KAAK,EAAE,KAAKkC,KAAL,CAAWM,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH,GA1DL,CA2DI;;;AACAC,EAAAA,kBAAkB,GAClB,CACI;AACH;;AA/DL;;AAkEA,eAAeT,WAAf","sourcesContent":["// Credit: Mateusz Rybczonec\nimport React, {useState, Component} from 'react';\nimport './TimerCircle.css';\nimport UIfx from 'uifx';\nimport tickSfx from './sounds/tick.mp3'; \n\nconst tickSoundQuiet = new UIfx(tickSfx);\ntickSoundQuiet.setVolume(0.4);\nconst tickSoundUrgent = new UIfx(tickSfx);\ntickSoundUrgent.setVolume(0.9);\n\nconst FULL_DASH_ARRAY = 283;\nconst WARNING_THRESHOLD = 10;\nconst ALERT_THRESHOLD = 5;\nconst TIMER_NEEDS_INITIALIZING = 1;\nconst TIMER_HAS_BEEN_INITIALIZED = 2;\n\n\nconst COLOR_CODES = {\n  info: {\n    color: \"green\"\n  },\n  warning: {\n    color: \"orange\",\n    threshold: WARNING_THRESHOLD\n  },\n  alert: {\n    color: \"red\",\n    threshold: ALERT_THRESHOLD\n  }\n};\n\n//readme: these variables are shared by all TimerCircles (unlike State which they each have their own)\nconst TIME_LIMIT = 90;\nlet timePassed = 0;\nlet timeLeft = TIME_LIMIT;\nlet timerInterval =  Array(7).fill(null);\nlet remainingPathColor = COLOR_CODES.info.color;\nlet oxygenBottlesApplied = 0;\nlet oxygenBottlesBought = 0;\nlet timerRanOutCallback = null;\n// readme: not certain I need this next variable? Because this is global to all timers it saves me passing it back to here from the GameBoard state\n// but maybe having a copy here is undesirable and i should use the state one.\nlet roundTheyWereOnWhenTimerExpired = null;\n\nfunction Init(uniqueKey)\n{\n        // INIT;\n        timerInterval =  Array(7).fill(null);\n        \n        onTimesUp(uniqueKey);\n\n        /*\n        * readme: bring these two back in if you want the timer to NOT be shared across all rounds\n        timePassed = 0;\n        timeLeft = TIME_LIMIT;\n        */\n        timerInterval[uniqueKey] = null;\n        remainingPathColor = COLOR_CODES.info.color;\n    \n        console.log('Timer started' + uniqueKey);\n        document.getElementById(\"TimerCircle\" + uniqueKey).innerHTML = '<div class=\"base-timer\"><svg class=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">   <g class=\"base-timer__circle\">    <circle class=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>    <path      id=\"base-timer-path-remaining'+uniqueKey+'\"      stroke-dasharray=\"283\"       class=\"base-timer__path-remaining '+remainingPathColor+'\"      d=\"        M 50, 50        m -45, 0        a 45,45 0 1,0 90,0        a 45,45 0 1,0 -90,0      \"    ></path>  </g></svg><span id=\"base-timer-label'+uniqueKey+'\" class=\"base-timer__label\">'+formatTime(timeLeft)+'</span></div>';\n        startTimer(uniqueKey);\n}\n\nfunction ResetTimer(calledBy)\n{\n  console.log(\"ResetTimer \" + calledBy)\n  //readme: reset the shared static timer vars - be careful when calling this as don't want to reset in between rounds \n  timePassed = 0;\n  timeLeft = TIME_LIMIT;\n  oxygenBottlesApplied = 0;\n}\n\nfunction AddToTimer(sec)\n{\n    console.log('timePassed'+ timePassed);\n    timePassed -= sec;\n}\n\nfunction onTimesUp(uniqueKey) {\n  console.log(\"killing timer : \" + uniqueKey)\n  clearInterval(timerInterval[uniqueKey]);\n}\n\nfunction startTimer(uniqueKey) {\n    timerInterval[uniqueKey] = setInterval(() => {\n    if(document.getElementById(\"base-timer-label\" + uniqueKey))\n    {\n      // if(oxygenBottlesApplied < oxygenBottlesBought)\n      // {\n      //     let diff = oxygenBottlesBought - oxygenBottlesApplied;\n      //     //readme : they have paid for oxygen that's not yet been used - use it!\n      //     timePassed -= (11 * diff);\n      //     oxygenBottlesApplied += diff;\n      // }\n      timePassed = timePassed += 1;\n      timeLeft = TIME_LIMIT - timePassed;\n      // readme: only do stuff if html rendered\n\n        document.getElementById(\"base-timer-label\" + uniqueKey).innerHTML = formatTime(\n          timeLeft\n        );\n        setCircleDasharray(uniqueKey);\n        setRemainingPathColor(timeLeft,uniqueKey);\n\n        if (timeLeft === 0) {\n          onTimesUp(uniqueKey);\n          if(timerRanOutCallback != null && timerRanOutCallback != undefined \n            && uniqueKey != null && uniqueKey != undefined)\n          {\n            timerRanOutCallback(uniqueKey);\n            roundTheyWereOnWhenTimerExpired = uniqueKey;\n            // readme: so if the timer runs out, then here I reset the timers for the next time they might be used\n            ResetTimer(\"bcoz timer expired on \" + uniqueKey + \" oxygenApplied: \" + oxygenBottlesApplied + \" oxyBought: \" + oxygenBottlesBought);\n          }\n        }\n        if (timeLeft === 10) tickSoundQuiet.play();\n        if (timeLeft === 5) tickSoundUrgent.play();\n        \n    } else\n    {\n      // readme: hmm, I dont fully understand this - assume this else hit when doing a \"Replay\" and clears out stuff ahead of reusing timer class vars\n      ResetTimer(\"bcoz didn't find a timer for \" + uniqueKey);\n      onTimesUp(uniqueKey);\n    }\n  }, 1000);\n}\n\nfunction formatTime(time) {\n  const minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n\n  return `${minutes}:${seconds}`;\n}\n\nfunction setRemainingPathColor(timeLeft,uniqueKey) {\n  const { alert, warning, info } = COLOR_CODES;\n  if (timeLeft <= alert.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(warning.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(alert.color);\n  } else if (timeLeft <= warning.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(info.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(warning.color);\n  }\n}\n\nfunction calculateTimeFraction() {\n  const rawTimeFraction = timeLeft / TIME_LIMIT;\n  return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);\n}\n\nfunction setCircleDasharray(uniqueKey) {\n  const circleDasharray = `${(\n    calculateTimeFraction() * FULL_DASH_ARRAY\n  ).toFixed(0)} 283`;\n  document\n    .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n    .setAttribute(\"stroke-dasharray\", circleDasharray);\n}\n\nclass TimerCircle extends React.Component\n{ \n    // readme: dont appear to need each Tier to have their own state.\n    // am happy sharing the timer variables globally across all Timers (e.g. TimePassed and oxygenBottlesApplied are used by all 7)\nrender()\n    {\n      \n      oxygenBottlesBought = this.props.oxygenBottlesBought;\n      //console.log(\"uniqueKey:\" + this.props.uniqueKey + \" oxygenBottlesApplied:\" + oxygenBottlesApplied + \" oxygenBottlesBought:\" + oxygenBottlesBought + \" timePassed: \" + timePassed)\n\n      if(oxygenBottlesApplied < oxygenBottlesBought)\n      {\n        // readme: they appear to have bought oxygen - kill current timer thread,\n        // update the global timer numbers, and start a new thread. Designed to stop race conditions.\n         \n        if(this.props.uniqueKey == this.props.currentRoundBeingPlayed){\n          // readme: stop the exact timer in question.\n          onTimesUp(this.props.uniqueKey); \n         \n         // readme: these are global vars shared by all timers, update all.\n          let diff = oxygenBottlesBought - oxygenBottlesApplied;\n          timePassed -= (11 * diff);\n          oxygenBottlesApplied += diff;\n          console.log(\"oxygenBottlesApplied:\" + oxygenBottlesApplied);\n          startTimer(this.props.uniqueKey);\n         }\n         else\n         {\n           //console.log(\"not the timer we care about: \" +this.props.uniqueKey);\n         }\n      }\n\n      if(this.props.initializeTimers[0] == null)\n      {\n        // readme: bit of an assumption - if the first timer is null, the game has been started or replayed so reset timer.\n        ResetTimer(\"Init.\");\n      }\n\n      timerRanOutCallback = this.props.timerRanOut;\n        //console.log('Got here' + this.props.initializeTimers[this.props.uniqueKey - 1] + ' ' + this.props.uniqueKey);\n        \n        // readme: '1' means the timer's div is ready and the timer can be initialized. '2' means it's all setup, dont reinit it as that would reset it.\n        if(this.props.initializeTimers[this.props.uniqueKey - 1] == TIMER_NEEDS_INITIALIZING)\n        {\n            Init(this.props.uniqueKey);\n            //readme: to my surprise changing this array prop seems to change the STATE (possibly am breaking a pattern)\n            //readme: will leave for now, but could change later to a callback to the GameBoard and change the state in there instead.\n            this.props.initializeTimers[this.props.uniqueKey - 1] = TIMER_HAS_BEEN_INITIALIZED;\n        }\n\n        // readme: haltTimer will be true for any rounds that aren't the current round.\n        if(this.props.haltTimer)\n        {   \n            onTimesUp(this.props.uniqueKey);          \n        }\n\n        return(\n            <div id={\"TimerCircle\" + this.props.uniqueKey} style={this.props.style}></div>\n        );\n    }\n    //readme: putting this here solved a problem of a red warning the browser dev console when setting state inside Render()\n    componentDidUpdate()\n    {\n        //readme: have no longer got a reason to use this...\n    }\n}\n\nexport default TimerCircle;\n\n\n\n"]},"metadata":{},"sourceType":"module"}