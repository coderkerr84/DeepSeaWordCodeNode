{"ast":null,"code":"import _classCallCheck from\"/Users/JMKerr/CodeNode2/react-is-fun/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/JMKerr/CodeNode2/react-is-fun/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/JMKerr/CodeNode2/react-is-fun/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/JMKerr/CodeNode2/react-is-fun/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";// Credit: Mateusz Rybczonec\nimport React,{useState,Component}from'react';import'./TimerCircle.css';import UIfx from'uifx';import tickSfx from'./sounds/tick.mp3';var tickSoundQuiet=new UIfx(tickSfx);tickSoundQuiet.setVolume(0.4);var tickSoundUrgent=new UIfx(tickSfx);tickSoundUrgent.setVolume(0.9);var FULL_DASH_ARRAY=283;var WARNING_THRESHOLD=10;var ALERT_THRESHOLD=5;var TIMER_NEEDS_INITIALIZING=1;var TIMER_HAS_BEEN_INITIALIZED=2;var COLOR_CODES={info:{color:\"green\"},warning:{color:\"orange\",threshold:WARNING_THRESHOLD},alert:{color:\"red\",threshold:ALERT_THRESHOLD}};//readme: these variables are shared by all TimerCircles (unlike State which they each have their own)\nvar TIME_LIMIT=90;var timePassed=0;var timeLeft=TIME_LIMIT;var timerInterval=Array(7).fill(null);var remainingPathColor=COLOR_CODES.info.color;var oxygenBottlesApplied=0;var oxygenBottlesBought=0;var timerRanOutCallback=null;// readme: not certain I need this next variable? Because this is global to all timers it saves me passing it back to here from the GameBoard state\n// but maybe having a copy here is undesirable and i should use the state one.\nvar roundTheyWereOnWhenTimerExpired=null;function Init(uniqueKey){// INIT;\ntimerInterval=Array(7).fill(null);onTimesUp(uniqueKey);/*\n        * readme: bring these two back in if you want the timer to NOT be shared across all rounds\n        timePassed = 0;\n        timeLeft = TIME_LIMIT;\n        */timerInterval[uniqueKey]=null;remainingPathColor=COLOR_CODES.info.color;console.log('Timer started'+uniqueKey);document.getElementById(\"TimerCircle\"+uniqueKey).innerHTML='<div class=\"base-timer\"><svg class=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">   <g class=\"base-timer__circle\">    <circle class=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>    <path      id=\"base-timer-path-remaining'+uniqueKey+'\"      stroke-dasharray=\"283\"       class=\"base-timer__path-remaining '+remainingPathColor+'\"      d=\"        M 50, 50        m -45, 0        a 45,45 0 1,0 90,0        a 45,45 0 1,0 -90,0      \"    ></path>  </g></svg><span id=\"base-timer-label'+uniqueKey+'\" class=\"base-timer__label\">'+formatTime(timeLeft)+'</span></div>';startTimer(uniqueKey);}function ResetTimer(calledBy){console.log(\"ResetTimer \"+calledBy);//readme: reset the shared static timer vars - be careful when calling this as don't want to reset in between rounds \ntimePassed=0;timeLeft=TIME_LIMIT;}function AddToTimer(sec){console.log('timePassed'+timePassed);timePassed-=sec;}function onTimesUp(uniqueKey){clearInterval(timerInterval[uniqueKey]);}function startTimer(uniqueKey){timerInterval[uniqueKey]=setInterval(function(){if(document.getElementById(\"base-timer-label\"+uniqueKey)){if(oxygenBottlesApplied<oxygenBottlesBought){var diff=oxygenBottlesBought-oxygenBottlesApplied;//readme : they have paid for oxygen that's not yet been used - use it!\ntimePassed-=11*diff;oxygenBottlesApplied+=diff;}timePassed=timePassed+=1;timeLeft=TIME_LIMIT-timePassed;// readme: only do stuff if html rendered\ndocument.getElementById(\"base-timer-label\"+uniqueKey).innerHTML=formatTime(timeLeft);setCircleDasharray(uniqueKey);setRemainingPathColor(timeLeft,uniqueKey);if(timeLeft===0){onTimesUp(uniqueKey);if(timerRanOutCallback!=null&&timerRanOutCallback!=undefined&&uniqueKey!=null&&uniqueKey!=undefined){timerRanOutCallback(uniqueKey);roundTheyWereOnWhenTimerExpired=uniqueKey;// readme: so if the timer runs out, then here I reset the timers for the next time they might be used\nResetTimer(\"bcoz timer expired on \"+uniqueKey);}}if(timeLeft===10)tickSoundQuiet.play();if(timeLeft===5)tickSoundUrgent.play();}else{// readme: hmm, I dont fully understand this - assume this else hit when doing a \"Replay\" and clears out stuff ahead of reusing timer class vars\nResetTimer(\"bcoz didn't find a timer for \"+uniqueKey);onTimesUp(uniqueKey);}},1000);}function formatTime(time){var minutes=Math.floor(time/60);var seconds=time%60;if(seconds<10){seconds=\"0\".concat(seconds);}return\"\".concat(minutes,\":\").concat(seconds);}function setRemainingPathColor(timeLeft,uniqueKey){var alert=COLOR_CODES.alert,warning=COLOR_CODES.warning,info=COLOR_CODES.info;if(timeLeft<=alert.threshold){document.getElementById(\"base-timer-path-remaining\"+uniqueKey).classList.remove(warning.color);document.getElementById(\"base-timer-path-remaining\"+uniqueKey).classList.add(alert.color);}else if(timeLeft<=warning.threshold){document.getElementById(\"base-timer-path-remaining\"+uniqueKey).classList.remove(info.color);document.getElementById(\"base-timer-path-remaining\"+uniqueKey).classList.add(warning.color);}}function calculateTimeFraction(){var rawTimeFraction=timeLeft/TIME_LIMIT;return rawTimeFraction-1/TIME_LIMIT*(1-rawTimeFraction);}function setCircleDasharray(uniqueKey){var circleDasharray=\"\".concat((calculateTimeFraction()*FULL_DASH_ARRAY).toFixed(0),\" 283\");document.getElementById(\"base-timer-path-remaining\"+uniqueKey).setAttribute(\"stroke-dasharray\",circleDasharray);}var TimerCircle=/*#__PURE__*/function(_React$Component){_inherits(TimerCircle,_React$Component);var _super=_createSuper(TimerCircle);function TimerCircle(){_classCallCheck(this,TimerCircle);return _super.apply(this,arguments);}_createClass(TimerCircle,[{key:\"render\",// readme: dont appear to need each Tier to have their own state.\n// am happy sharing the timer variables globally across all Timers (e.g. TimePassed and oxygenBottlesApplied are used by all 7)\nvalue:function render(){if(this.props.initializeTimers[0]==null){// readme: bit of an assumption - if the first timer is null, the game has been started or replayed so reset timer.\nResetTimer(\"Init.\");}timerRanOutCallback=this.props.timerRanOut;//console.log('Got here' + this.props.initializeTimers[this.props.uniqueKey - 1] + ' ' + this.props.uniqueKey);\n// readme: '1' means the timer's div is ready and the timer can be initialized. '2' means it's all setup, dont reinit it as that would reset it.\nif(this.props.initializeTimers[this.props.uniqueKey-1]==TIMER_NEEDS_INITIALIZING){Init(this.props.uniqueKey);//readme: to my surprise changing this array prop seems to change the STATE (possibly am breaking a pattern)\n//readme: will leave for now, but could change later to a callback to the GameBoard and change the state in there instead.\nthis.props.initializeTimers[this.props.uniqueKey-1]=TIMER_HAS_BEEN_INITIALIZED;}// readme: haltTimer will be true for any rounds that aren't the current round.\nif(this.props.haltTimer){onTimesUp(this.props.uniqueKey);}oxygenBottlesBought=this.props.oxygenBottlesUsed;// if(oxygenBottlesApplied < this.props.oxygenBottlesUsed &&\n//     this.props.currentRoundBeingPlayed == this.props.uniqueKey)\n// {\n//     //readme: 11 because it takes about 1s for the 10 to be added!\n//     //readme: note the condition checking what round we are on, necessary or ALL 7 timers would think they needed to update the timer.\n//     AddToTimer(11);\n//     oxygenBottlesApplied++;\n// }\nreturn/*#__PURE__*/React.createElement(\"div\",{id:\"TimerCircle\"+this.props.uniqueKey,style:this.props.style});}//readme: putting this here solved a problem of a red warning the browser dev console when setting state inside Render()\n},{key:\"componentDidUpdate\",value:function componentDidUpdate(){//readme: have no longer got a reason to use this...\n}}]);return TimerCircle;}(React.Component);export default TimerCircle;","map":{"version":3,"sources":["/Users/JMKerr/CodeNode2/react-is-fun/src/TimerCircle.js"],"names":["React","useState","Component","UIfx","tickSfx","tickSoundQuiet","setVolume","tickSoundUrgent","FULL_DASH_ARRAY","WARNING_THRESHOLD","ALERT_THRESHOLD","TIMER_NEEDS_INITIALIZING","TIMER_HAS_BEEN_INITIALIZED","COLOR_CODES","info","color","warning","threshold","alert","TIME_LIMIT","timePassed","timeLeft","timerInterval","Array","fill","remainingPathColor","oxygenBottlesApplied","oxygenBottlesBought","timerRanOutCallback","roundTheyWereOnWhenTimerExpired","Init","uniqueKey","onTimesUp","console","log","document","getElementById","innerHTML","formatTime","startTimer","ResetTimer","calledBy","AddToTimer","sec","clearInterval","setInterval","diff","setCircleDasharray","setRemainingPathColor","undefined","play","time","minutes","Math","floor","seconds","classList","remove","add","calculateTimeFraction","rawTimeFraction","circleDasharray","toFixed","setAttribute","TimerCircle","props","initializeTimers","timerRanOut","haltTimer","oxygenBottlesUsed","style"],"mappings":"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","sourcesContent":["// Credit: Mateusz Rybczonec\nimport React, {useState, Component} from 'react';\nimport './TimerCircle.css';\nimport UIfx from 'uifx';\nimport tickSfx from './sounds/tick.mp3'; \n\nconst tickSoundQuiet = new UIfx(tickSfx);\ntickSoundQuiet.setVolume(0.4);\nconst tickSoundUrgent = new UIfx(tickSfx);\ntickSoundUrgent.setVolume(0.9);\n\nconst FULL_DASH_ARRAY = 283;\nconst WARNING_THRESHOLD = 10;\nconst ALERT_THRESHOLD = 5;\nconst TIMER_NEEDS_INITIALIZING = 1;\nconst TIMER_HAS_BEEN_INITIALIZED = 2;\n\n\nconst COLOR_CODES = {\n  info: {\n    color: \"green\"\n  },\n  warning: {\n    color: \"orange\",\n    threshold: WARNING_THRESHOLD\n  },\n  alert: {\n    color: \"red\",\n    threshold: ALERT_THRESHOLD\n  }\n};\n\n//readme: these variables are shared by all TimerCircles (unlike State which they each have their own)\nconst TIME_LIMIT = 90;\nlet timePassed = 0;\nlet timeLeft = TIME_LIMIT;\nlet timerInterval =  Array(7).fill(null);\nlet remainingPathColor = COLOR_CODES.info.color;\nlet oxygenBottlesApplied = 0;\nlet oxygenBottlesBought = 0;\nlet timerRanOutCallback = null;\n// readme: not certain I need this next variable? Because this is global to all timers it saves me passing it back to here from the GameBoard state\n// but maybe having a copy here is undesirable and i should use the state one.\nlet roundTheyWereOnWhenTimerExpired = null;\n\nfunction Init(uniqueKey)\n{\n        // INIT;\n        timerInterval =  Array(7).fill(null);\n\n        onTimesUp(uniqueKey);\n\n        /*\n        * readme: bring these two back in if you want the timer to NOT be shared across all rounds\n        timePassed = 0;\n        timeLeft = TIME_LIMIT;\n        */\n        timerInterval[uniqueKey] = null;\n        remainingPathColor = COLOR_CODES.info.color;\n    \n        console.log('Timer started' + uniqueKey);\n        document.getElementById(\"TimerCircle\" + uniqueKey).innerHTML = '<div class=\"base-timer\"><svg class=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">   <g class=\"base-timer__circle\">    <circle class=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>    <path      id=\"base-timer-path-remaining'+uniqueKey+'\"      stroke-dasharray=\"283\"       class=\"base-timer__path-remaining '+remainingPathColor+'\"      d=\"        M 50, 50        m -45, 0        a 45,45 0 1,0 90,0        a 45,45 0 1,0 -90,0      \"    ></path>  </g></svg><span id=\"base-timer-label'+uniqueKey+'\" class=\"base-timer__label\">'+formatTime(timeLeft)+'</span></div>';\n        startTimer(uniqueKey);\n}\n\nfunction ResetTimer(calledBy)\n{\n  console.log(\"ResetTimer \" + calledBy)\n  //readme: reset the shared static timer vars - be careful when calling this as don't want to reset in between rounds \n  timePassed = 0;\n  timeLeft = TIME_LIMIT;\n}\n\nfunction AddToTimer(sec)\n{\n    console.log('timePassed'+ timePassed);\n    timePassed -= sec;\n}\n\nfunction onTimesUp(uniqueKey) {\n  clearInterval(timerInterval[uniqueKey]);\n}\n\nfunction startTimer(uniqueKey) {\n    timerInterval[uniqueKey] = setInterval(() => {\n    if(document.getElementById(\"base-timer-label\" + uniqueKey))\n    {\n      if(oxygenBottlesApplied < oxygenBottlesBought)\n      {\n          let diff = oxygenBottlesBought - oxygenBottlesApplied;\n          //readme : they have paid for oxygen that's not yet been used - use it!\n          timePassed -= (11 * diff);\n          oxygenBottlesApplied += diff;\n      }\n      timePassed = timePassed += 1;\n      timeLeft = TIME_LIMIT - timePassed;\n      // readme: only do stuff if html rendered\n\n        document.getElementById(\"base-timer-label\" + uniqueKey).innerHTML = formatTime(\n          timeLeft\n        );\n        setCircleDasharray(uniqueKey);\n        setRemainingPathColor(timeLeft,uniqueKey);\n\n        if (timeLeft === 0) {\n          onTimesUp(uniqueKey);\n          if(timerRanOutCallback != null && timerRanOutCallback != undefined \n            && uniqueKey != null && uniqueKey != undefined)\n          {\n            timerRanOutCallback(uniqueKey);\n            roundTheyWereOnWhenTimerExpired = uniqueKey;\n            // readme: so if the timer runs out, then here I reset the timers for the next time they might be used\n            ResetTimer(\"bcoz timer expired on \" + uniqueKey);\n          }\n        }\n        if (timeLeft === 10) tickSoundQuiet.play();\n        if (timeLeft === 5) tickSoundUrgent.play();\n        \n    } else\n    {\n      // readme: hmm, I dont fully understand this - assume this else hit when doing a \"Replay\" and clears out stuff ahead of reusing timer class vars\n      ResetTimer(\"bcoz didn't find a timer for \" + uniqueKey);\n      onTimesUp(uniqueKey);\n    }\n  }, 1000);\n}\n\nfunction formatTime(time) {\n  const minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n\n  return `${minutes}:${seconds}`;\n}\n\nfunction setRemainingPathColor(timeLeft,uniqueKey) {\n  const { alert, warning, info } = COLOR_CODES;\n  if (timeLeft <= alert.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(warning.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(alert.color);\n  } else if (timeLeft <= warning.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(info.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(warning.color);\n  }\n}\n\nfunction calculateTimeFraction() {\n  const rawTimeFraction = timeLeft / TIME_LIMIT;\n  return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);\n}\n\nfunction setCircleDasharray(uniqueKey) {\n  const circleDasharray = `${(\n    calculateTimeFraction() * FULL_DASH_ARRAY\n  ).toFixed(0)} 283`;\n  document\n    .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n    .setAttribute(\"stroke-dasharray\", circleDasharray);\n}\n\nclass TimerCircle extends React.Component\n{ \n    // readme: dont appear to need each Tier to have their own state.\n    // am happy sharing the timer variables globally across all Timers (e.g. TimePassed and oxygenBottlesApplied are used by all 7)\nrender()\n    {\n      if(this.props.initializeTimers[0] == null)\n      {\n        // readme: bit of an assumption - if the first timer is null, the game has been started or replayed so reset timer.\n        ResetTimer(\"Init.\");\n      }\n\n      timerRanOutCallback = this.props.timerRanOut;\n        //console.log('Got here' + this.props.initializeTimers[this.props.uniqueKey - 1] + ' ' + this.props.uniqueKey);\n        \n        // readme: '1' means the timer's div is ready and the timer can be initialized. '2' means it's all setup, dont reinit it as that would reset it.\n        if(this.props.initializeTimers[this.props.uniqueKey - 1] == TIMER_NEEDS_INITIALIZING)\n        {\n            Init(this.props.uniqueKey);\n            //readme: to my surprise changing this array prop seems to change the STATE (possibly am breaking a pattern)\n            //readme: will leave for now, but could change later to a callback to the GameBoard and change the state in there instead.\n            this.props.initializeTimers[this.props.uniqueKey - 1] = TIMER_HAS_BEEN_INITIALIZED;\n        }\n\n        // readme: haltTimer will be true for any rounds that aren't the current round.\n        if(this.props.haltTimer)\n        {   \n            onTimesUp(this.props.uniqueKey);          \n        }\n \n        oxygenBottlesBought = this.props.oxygenBottlesUsed;\n        // if(oxygenBottlesApplied < this.props.oxygenBottlesUsed &&\n        //     this.props.currentRoundBeingPlayed == this.props.uniqueKey)\n        // {\n        //     //readme: 11 because it takes about 1s for the 10 to be added!\n        //     //readme: note the condition checking what round we are on, necessary or ALL 7 timers would think they needed to update the timer.\n        //     AddToTimer(11);\n        //     oxygenBottlesApplied++;\n        // }\n\n        return(\n            <div id={\"TimerCircle\" + this.props.uniqueKey} style={this.props.style}></div>\n        );\n    }\n    //readme: putting this here solved a problem of a red warning the browser dev console when setting state inside Render()\n    componentDidUpdate()\n    {\n        //readme: have no longer got a reason to use this...\n    }\n}\n\nexport default TimerCircle;\n\n\n\n"]},"metadata":{},"sourceType":"module"}