{"ast":null,"code":"var _jsxFileName = \"/Users/JMKerr/CodeNode2/react-is-fun/src/GameBoard.js\";\nimport React, { useState, Component } from 'react';\nimport { render } from 'react-dom';\nimport ClueOuterList from './ClueOuterList';\nimport './GameBoard.css';\nimport ClueOuter from './ClueOuter';\nimport Spinner from './Loader';\nimport UserName from './UserName';\nimport ResultsModal from './ResultsModal';\n\nclass GameBoard extends React.Component {\n  // const [currentRoundBeingPlayed, setCount] = useState(1);\n  constructor(props) {\n    super(props);\n\n    this.SendToScoringService = () => {\n      // gather up their state data\n      // do a fetch/Post of their data \n      // Simple POST request with a JSON body using fetch\n      // const requestOptions = {\n      //     method: 'POST',\n      //     headers: { 'Content-Type': 'application/json' },\n      //     body: JSON.stringify({ \n      //       userName: this.state.userName,\n      //       userGuesses: this.state.userGuesses,\n      //       clues: this.state.clues,\n      //       oxygenUsed: this.state.oxygenBottlesUsed,\n      //    })\n      // };\n      let clueInfo = Array(7).fill(null);\n      clueInfo = this.state.clues.clues.map(item => item.significantClueInfo);\n      const formData = new FormData();\n      formData.append('userName', this.state.userName);\n      formData.append('userGuesses', JSON.stringify(this.state.userGuesses));\n      formData.append('GUID', JSON.stringify(this.state.clues.guid));\n      formData.append('clueInfo', JSON.stringify(clueInfo));\n      formData.append('oxygenUsed', JSON.stringify(this.state.oxygenBottlesUsed));\n      fetch('http://deepseaworddotnetservice.azurewebsites.net/Entries/SubmitForScoring/', {\n        method: 'POST',\n        body: formData\n      }).then(response => response.json()).then(data => {\n        this.setState({\n          scoringData: data\n        });\n      }); // throw up a light box with a spinner while they wait\n      // display their results\n    };\n\n    this.handleReplay = () => {\n      this.componentDidMount(); //this.render();\n    };\n\n    this.handleSubmitAndDiveClick = thisRoundNumber => {\n      //readme: checking the word is good before advancing\n      if (this.state.initializeTimers[0] == null) {\n        alert(\"Please click the diver image to start the timer \\n  \");\n      } else {\n        this.checkWord(thisRoundNumber, this.state.userGuesses[thisRoundNumber - 1]);\n      }\n    };\n\n    this.handleDiverClick = thisRoundNumber => {\n      //alert('Clicked on diver' + thisRoundNumber);\n      const initializeTimersCopy = this.state.initializeTimers.slice(); // readme: timer has been initialized\n\n      initializeTimersCopy[thisRoundNumber - 1] = 1;\n      this.setState({\n        initializeTimers: initializeTimersCopy\n      });\n    };\n\n    this.handleOxygenClick = thisRoundNumber => {\n      //readme: not sure if I'll want to count which round the oxygen was used in, might leave param there til i decide\n      let oxygenBottlesUsedNew = this.state.oxygenBottlesUsed + 1;\n      this.setState({\n        oxygenBottlesUsed: oxygenBottlesUsedNew\n      });\n    };\n\n    this.handleChangeUserGuess = (userGuess, i) => {\n      const userGuessesCopy = this.state.userGuesses.slice();\n      userGuessesCopy[i - 1] = userGuess;\n      this.setState({\n        userGuesses: userGuessesCopy\n      });\n    };\n\n    this.handleEnterUserName = theirUserName => {\n      this.setState({\n        userName: theirUserName\n      });\n    };\n\n    this.handleTimerRanOut = i => {\n      this.setState({\n        roundTheyWereOnWhenTimerExpired: i\n      }); //todo: drown him!\n    };\n\n    this.state = {\n      userGuesses: Array(7).fill(null),\n      currentRound: 1,\n      oxygenBottlesUsed: 0,\n      initializeTimers: Array(7).fill(null),\n      clues: null,\n      roundTheyWereOnWhenTimerExpired: null,\n      isLoadingPage: true,\n      wordLookupFeedbackMessages: Array(7).fill(null),\n      userName: \"\",\n      showModal: false,\n      dictionaryCheckInProgress: false,\n      scoringData: null\n    };\n  }\n\n  updateWordFeedback(thisRoundNumber, message) {\n    const wordLookupFeedbackMessagesCopy = this.state.wordLookupFeedbackMessages.slice();\n    wordLookupFeedbackMessagesCopy[thisRoundNumber - 1] = message;\n    this.setState({\n      wordLookupFeedbackMessages: wordLookupFeedbackMessagesCopy\n    });\n  }\n\n  checkWord(thisRoundNumber, userGuess) {\n    console.log(thisRoundNumber + \" checkWord : \" + userGuess);\n    this.updateWordFeedback(thisRoundNumber, 'Checking dictionary...');\n\n    if (userGuess == \"\" || userGuess == null) {\n      this.updateWordFeedback(thisRoundNumber, 'Enter word then Submit and Dive');\n      return false;\n    }\n\n    if (this.state.dictionaryCheckInProgress) {\n      this.updateWordFeedback(thisRoundNumber, 'Double-clickers will be left behind!');\n      return false;\n    }\n\n    this.setState({\n      dictionaryCheckInProgress: true\n    }); //https://deepseaworddotnetservice.azurewebsites.net/Entries\n\n    fetch('http://deepseaworddotnetservice.azurewebsites.net/Entries/LookupWord?word=' + userGuess).then(res => res.json()).then(data => {\n      //this.setState({ clues: data })\n      if (data != null) {\n        //console.log('word def:' + data.definition);\n        // readme: word was a real word.\n        this.updateWordFeedback(thisRoundNumber, 'Found in dictionary.');\n        this.setState({\n          currentRound: thisRoundNumber + 1\n        });\n\n        if (thisRoundNumber < 7) {\n          this.handleDiverClick(thisRoundNumber + 1);\n        } else {\n          //readme: kick-off the completion code.\n          //perform scoring and open lightbox to display response to that?\n          this.setState({\n            showModal: true\n          });\n          this.SendToScoringService();\n        }\n      } else {\n        this.updateWordFeedback(thisRoundNumber, 'NOT found - try another!');\n      }\n\n      this.setState({\n        dictionaryCheckInProgress: false\n      });\n    }).catch(() => {\n      this.updateWordFeedback(thisRoundNumber, 'Apparatus failure. Try again');\n    });\n  }\n\n  componentDidMount() {\n    // readme: resets all state except username and then fetch a new word\n    this.setState({\n      userGuesses: Array(7).fill(null),\n      currentRound: 1,\n      oxygenBottlesUsed: 0,\n      initializeTimers: Array(7).fill(null),\n      clues: null,\n      roundTheyWereOnWhenTimerExpired: null,\n      isLoadingPage: true,\n      wordLookupFeedbackMessages: Array(7).fill(null),\n      showModal: false,\n      dictionaryCheckInProgress: false,\n      scoringData: null //userName: \"\"\n\n    });\n    fetch('http://deepseaworddotnetservice.azurewebsites.net/Entries/GetWordWithClues').then(res => res.json()).then(data => {\n      this.setState({\n        clues: data,\n        isLoadingPage: false\n      });\n    }).catch(console.log);\n  }\n\n  render() {\n    // let clues = GetJson();\n    // let parsedClues = JSON.parse(clues);\n    let parsedClues2 = this.state.clues; // console.log(parsedClues);\n    // console.log(\" and \")\n    // console.log(parsedClues2);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"background center-screen\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TitleBar\",\n      style: titleStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }\n    }, \"DeepSeaWord\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: creditStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    }, \"by Chris Kerr\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"GameBoard\",\n      style: instructionsStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, \"In every round submit a word that meets that clue and all previous clues. \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 95\n      }\n    }), \"Dont run out of oxygen! If the timer expires so do you! \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 77\n      }\n    }), \"High scores require: speed, valid words, limited oxygen refills and finding that treasure!\", this.state.isLoadingPage || this.state.userName == \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 78\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 83\n      }\n    }), /*#__PURE__*/React.createElement(UserName, {\n      changeUserName: this.handleEnterUserName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 93\n      }\n    })) : this.renderClues(parsedClues2)), this.state.clues != null ? /*#__PURE__*/React.createElement(ResultsModal, {\n      temporaryWord: this.state.clues.temporaryWord,\n      oxygenBottlesUsed: this.state.oxygenBottlesUsed,\n      showModal: this.state.showModal,\n      handleReplay: this.handleReplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 45\n      }\n    }) : /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 225\n      }\n    }));\n  }\n\n  renderClues(parsedClues) {\n    let rows = [];\n    var x = parsedClues;\n\n    if (x != null) {\n      //console.log(x.clues[0]);\n      for (var i = 1; i < parsedClues.clues.length + 1; i++) {\n        rows.push(this.renderClue(i, parsedClues.clues[i - 1]));\n      }\n    }\n\n    return rows;\n  }\n\n  renderClue(i, clue) {\n    return (\n      /*#__PURE__*/\n      //readme: wonder at what point its an antipattern to pass so much down.\n      React.createElement(ClueOuter, {\n        style: style,\n        clue: clue,\n        key: i,\n        userGuess: this.state.userGuesses[i - 1],\n        onClick: this.handleSubmitAndDiveClick,\n        onClickOxygen: this.handleOxygenClick,\n        changeUserGuess: this.handleChangeUserGuess,\n        currentRoundBeingPlayed: this.state.currentRound,\n        initializeTimers: this.state.initializeTimers,\n        onDiverClick: this.handleDiverClick,\n        oxygenBottlesUsed: this.state.oxygenBottlesUsed,\n        timerRanOut: this.handleTimerRanOut,\n        roundTheyWereOnWhenTimerExpired: this.state.roundTheyWereOnWhenTimerExpired,\n        wordLookupFeedbackMessages: this.state.wordLookupFeedbackMessages,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }\n      })\n    );\n  }\n\n}\n\nfunction GetJson2() {\n  fetch('https://deepseaworddotnetcore.azurewebsites.net/Entries/GetWordWithClues').then(function (response) {\n    if (response.status !== 200) {\n      console.log('Looks like there was a problem. Status Code: ' + response.status);\n      return;\n    } // Examine the text in the response\n\n\n    response.json().then(function (data) {\n      console.log(data);\n      return data;\n    });\n  }).catch(function (err) {\n    console.log('Fetch Error :-S', err);\n  });\n}\n\nfunction GetJson() {\n  var obj = {\n    table: []\n  }; // PIPE\n\n  obj.table.push({\n    id: 1,\n    clue: \"Contains letter 'i'.\"\n  });\n  obj.table.push({\n    id: 2,\n    clue: \"Has fewer than 5 letters.\"\n  });\n  obj.table.push({\n    id: 3,\n    clue: \"Ends with 'e'\"\n  });\n  obj.table.push({\n    id: 4,\n    clue: \"Syallable count : 1\"\n  });\n  obj.table.push({\n    id: 5,\n    clue: \"Vowel count : 2\"\n  });\n  obj.table.push({\n    id: 6,\n    clue: \"First letter 'P'\"\n  });\n  obj.table.push({\n    id: 7,\n    clue: \"A cask usually containing two hogsheads or 126 gallons\"\n  });\n  var json = JSON.stringify(obj);\n  return json;\n}\n\nvar instructionsStyle = {\n  //backgroundColor: 'lightblue',\n  color: 'white',\n  // readme: hehe 'Arial', get it?\n  fontFamily: 'Arial',\n  fontSize: '12px',\n  // margin: '20px 200px 40px 200px',\n  padding: '20px',\n  textAlign: 'center' // readme: better on mobile if no % here\n  // width: '60%'\n\n};\nvar style = {\n  backgroundColor: 'lightblue',\n  color: 'darkblue',\n  // readme: hehe 'Arial', get it?\n  fontFamily: 'Arial',\n  fontSize: '12px',\n  // margin: '20px 200px 40px 200px',\n  padding: '20px',\n  textAlign: 'left'\n};\nvar creditStyle = {\n  //backgroundColor: 'lightblue',\n  color: 'gold',\n  fontFamily: 'Cochin',\n  fontSize: '11px',\n  textAlign: 'Center',\n  top: '0px'\n};\nvar titleStyle = {\n  //backgroundColor: 'lightblue',\n  color: 'yellow',\n  fontFamily: 'Phosphate,Futura,Rockwell',\n  fontSize: '45px',\n  textAlign: 'Center',\n  top: '0px'\n};\nexport default GameBoard;","map":{"version":3,"sources":["/Users/JMKerr/CodeNode2/react-is-fun/src/GameBoard.js"],"names":["React","useState","Component","render","ClueOuterList","ClueOuter","Spinner","UserName","ResultsModal","GameBoard","constructor","props","SendToScoringService","clueInfo","Array","fill","state","clues","map","item","significantClueInfo","formData","FormData","append","userName","JSON","stringify","userGuesses","guid","oxygenBottlesUsed","fetch","method","body","then","response","json","data","setState","scoringData","handleReplay","componentDidMount","handleSubmitAndDiveClick","thisRoundNumber","initializeTimers","alert","checkWord","handleDiverClick","initializeTimersCopy","slice","handleOxygenClick","oxygenBottlesUsedNew","handleChangeUserGuess","userGuess","i","userGuessesCopy","handleEnterUserName","theirUserName","handleTimerRanOut","roundTheyWereOnWhenTimerExpired","currentRound","isLoadingPage","wordLookupFeedbackMessages","showModal","dictionaryCheckInProgress","updateWordFeedback","message","wordLookupFeedbackMessagesCopy","console","log","res","catch","parsedClues2","titleStyle","creditStyle","instructionsStyle","renderClues","temporaryWord","parsedClues","rows","x","length","push","renderClue","clue","style","GetJson2","status","err","GetJson","obj","table","id","color","fontFamily","fontSize","padding","textAlign","backgroundColor","top"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,iBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,SAAN,SAAwBT,KAAK,CAACE,SAA9B,CACA;AACI;AACAQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA6EnBC,oBA7EmB,GA6EI,MAAM;AACnB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UAAIC,QAAQ,GAAGC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAf;AACAF,MAAAA,QAAQ,GAAG,KAAKG,KAAL,CAAWC,KAAX,CAAiBA,KAAjB,CAAuBC,GAAvB,CAA2BC,IAAI,IAAIA,IAAI,CAACC,mBAAxC,CAAX;AAEA,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4B,KAAKP,KAAL,CAAWQ,QAAvC;AACAH,MAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+BE,IAAI,CAACC,SAAL,CAAe,KAAKV,KAAL,CAAWW,WAA1B,CAA/B;AACAN,MAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBE,IAAI,CAACC,SAAL,CAAe,KAAKV,KAAL,CAAWC,KAAX,CAAiBW,IAAhC,CAAxB;AACAP,MAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BE,IAAI,CAACC,SAAL,CAAeb,QAAf,CAA5B;AACAQ,MAAAA,QAAQ,CAACE,MAAT,CAAgB,YAAhB,EAA8BE,IAAI,CAACC,SAAL,CAAe,KAAKV,KAAL,CAAWa,iBAA1B,CAA9B;AAGAC,MAAAA,KAAK,CAAC,6EAAD,EAAgF;AAC/EC,QAAAA,MAAM,EAAE,MADuE;AAE/EC,QAAAA,IAAI,EAAEX;AAFyE,OAAhF,CAAL,CAIKY,IAJL,CAIUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJtB,EAKKF,IALL,CAKUG,IAAI,IAAI;AACZ,aAAKC,QAAL,CAAc;AAACC,UAAAA,WAAW,EAAEF;AAAd,SAAd;AACD,OAPL,EA3BmB,CAoCnB;AACA;AACT,KAnHkB;;AAAA,SAqHnBG,YArHmB,GAqHJ,MAAM;AACnB,WAAKC,iBAAL,GADmB,CAEnB;AACD,KAxHkB;;AAAA,SA0HjBC,wBA1HiB,GA0HWC,eAAD,IAAqB;AAC9C;AAEE,UAAG,KAAK1B,KAAL,CAAW2B,gBAAX,CAA4B,CAA5B,KAAkC,IAArC,EACA;AACEC,QAAAA,KAAK,CAAC,sDAAD,CAAL;AACD,OAHD,MAKA;AACE,aAAKC,SAAL,CAAeH,eAAf,EAAgC,KAAK1B,KAAL,CAAWW,WAAX,CAAuBe,eAAe,GAAC,CAAvC,CAAhC;AACD;AAEN,KAtIkB;;AAAA,SAwIjBI,gBAxIiB,GAwIGJ,eAAD,IAAoB;AACnC;AACA,YAAMK,oBAAoB,GAAG,KAAK/B,KAAL,CAAW2B,gBAAX,CAA4BK,KAA5B,EAA7B,CAFmC,CAGnC;;AACAD,MAAAA,oBAAoB,CAACL,eAAe,GAAC,CAAjB,CAApB,GAA0C,CAA1C;AACA,WAAKL,QAAL,CAAc;AAACM,QAAAA,gBAAgB,EAAGI;AAApB,OAAd;AACH,KA9IgB;;AAAA,SAgJjBE,iBAhJiB,GAgJIP,eAAD,IAAqB;AACvC;AACA,UAAIQ,oBAAoB,GAAG,KAAKlC,KAAL,CAAWa,iBAAX,GAA+B,CAA1D;AACA,WAAKQ,QAAL,CAAc;AAACR,QAAAA,iBAAiB,EAAEqB;AAApB,OAAd;AACD,KApJgB;;AAAA,SAuJjBC,qBAvJiB,GAuJO,CAACC,SAAD,EAAWC,CAAX,KAAiB;AACvC,YAAMC,eAAe,GAAG,KAAKtC,KAAL,CAAWW,WAAX,CAAuBqB,KAAvB,EAAxB;AACAM,MAAAA,eAAe,CAACD,CAAC,GAAC,CAAH,CAAf,GAAuBD,SAAvB;AACA,WAAKf,QAAL,CAAc;AAACV,QAAAA,WAAW,EAAE2B;AAAd,OAAd;AACF,KA3JiB;;AAAA,SA6JlBC,mBA7JkB,GA6JKC,aAAD,IAAmB;AACvC,WAAKnB,QAAL,CAAc;AAACb,QAAAA,QAAQ,EAAEgC;AAAX,OAAd;AACD,KA/JiB;;AAAA,SAiKlBC,iBAjKkB,GAiKGJ,CAAD,IAAO;AACxB,WAAKhB,QAAL,CAAc;AAACqB,QAAAA,+BAA+B,EAAEL;AAAlC,OAAd,EADwB,CAExB;AACF,KApKiB;;AAEf,SAAKrC,KAAL,GAAa;AACXW,MAAAA,WAAW,EAAEb,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CADF;AAEX4C,MAAAA,YAAY,EAAE,CAFH;AAGX9B,MAAAA,iBAAiB,EAAE,CAHR;AAIXc,MAAAA,gBAAgB,EAAE7B,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAJP;AAKXE,MAAAA,KAAK,EAAE,IALI;AAMXyC,MAAAA,+BAA+B,EAAE,IANtB;AAOXE,MAAAA,aAAa,EAAE,IAPJ;AAQXC,MAAAA,0BAA0B,EAAE/C,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CARjB;AASXS,MAAAA,QAAQ,EAAE,EATC;AAUXsC,MAAAA,SAAS,EAAE,KAVA;AAWXC,MAAAA,yBAAyB,EAAE,KAXhB;AAYXzB,MAAAA,WAAW,EAAE;AAZF,KAAb;AAcD;;AAEF0B,EAAAA,kBAAkB,CAACtB,eAAD,EAAkBuB,OAAlB,EAA0B;AAC3C,UAAMC,8BAA8B,GAAG,KAAKlD,KAAL,CAAW6C,0BAAX,CAAsCb,KAAtC,EAAvC;AACAkB,IAAAA,8BAA8B,CAACxB,eAAe,GAAC,CAAjB,CAA9B,GAAoDuB,OAApD;AACA,SAAK5B,QAAL,CAAc;AAACwB,MAAAA,0BAA0B,EAAGK;AAA9B,KAAd;AACA;;AAEDrB,EAAAA,SAAS,CAACH,eAAD,EAAiBU,SAAjB,EAA2B;AACnCe,IAAAA,OAAO,CAACC,GAAR,CAAY1B,eAAe,GAAG,eAAlB,GAAmCU,SAA/C;AACA,SAAKY,kBAAL,CAAwBtB,eAAxB,EAAwC,wBAAxC;;AAEA,QAAGU,SAAS,IAAI,EAAb,IAAmBA,SAAS,IAAI,IAAnC,EACA;AACE,WAAKY,kBAAL,CAAwBtB,eAAxB,EAAwC,iCAAxC;AACA,aAAO,KAAP;AACD;;AACD,QAAG,KAAK1B,KAAL,CAAW+C,yBAAd,EACA;AACE,WAAKC,kBAAL,CAAwBtB,eAAxB,EAAwC,sCAAxC;AACA,aAAO,KAAP;AACD;;AAED,SAAKL,QAAL,CAAc;AAAC0B,MAAAA,yBAAyB,EAAE;AAA5B,KAAd,EAfmC,CAiBnC;;AACAjC,IAAAA,KAAK,CAAC,+EAA+EsB,SAAhF,CAAL,CACGnB,IADH,CACQoC,GAAG,IAAIA,GAAG,CAAClC,IAAJ,EADf,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd;AACA,UAAGA,IAAI,IAAI,IAAX,EACA;AACE;AACA;AACA,aAAK4B,kBAAL,CAAwBtB,eAAxB,EAAwC,sBAAxC;AACA,aAAKL,QAAL,CAAc;AAACsB,UAAAA,YAAY,EAAEjB,eAAe,GAAC;AAA/B,SAAd;;AACA,YAAGA,eAAe,GAAG,CAArB,EACA;AACE,eAAKI,gBAAL,CAAsBJ,eAAe,GAAC,CAAtC;AACD,SAHD,MAKA;AACE;AACA;AACA,eAAKL,QAAL,CAAc;AAACyB,YAAAA,SAAS,EAAE;AAAZ,WAAd;AACA,eAAKlD,oBAAL;AACD;AACF,OAjBD,MAmBA;AACE,aAAKoD,kBAAL,CAAwBtB,eAAxB,EAAwC,0BAAxC;AACD;;AACD,WAAKL,QAAL,CAAc;AAAC0B,QAAAA,yBAAyB,EAAE;AAA5B,OAAd;AAEH,KA5BD,EA6BCO,KA7BD,CA6BQ,MACR;AACE,WAAKN,kBAAL,CAAwBtB,eAAxB,EAAwC,8BAAxC;AACD,KAhCD;AAiCD;;AA2FAF,EAAAA,iBAAiB,GAAG;AAClB;AACD,SAAKH,QAAL,CAAc;AACZV,MAAAA,WAAW,EAAEb,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CADD;AAEZ4C,MAAAA,YAAY,EAAE,CAFF;AAGZ9B,MAAAA,iBAAiB,EAAE,CAHP;AAIZc,MAAAA,gBAAgB,EAAE7B,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAJN;AAKZE,MAAAA,KAAK,EAAE,IALK;AAMZyC,MAAAA,+BAA+B,EAAE,IANrB;AAOZE,MAAAA,aAAa,EAAE,IAPH;AAQZC,MAAAA,0BAA0B,EAAE/C,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CARhB;AASZ+C,MAAAA,SAAS,EAAE,KATC;AAUZC,MAAAA,yBAAyB,EAAE,KAVf;AAWZzB,MAAAA,WAAW,EAAE,IAXD,CAYZ;;AAZY,KAAd;AAeAR,IAAAA,KAAK,CAAC,4EAAD,CAAL,CACKG,IADL,CACUoC,GAAG,IAAIA,GAAG,CAAClC,IAAJ,EADjB,EAEKF,IAFL,CAEWG,IAAD,IAAU;AACd,WAAKC,QAAL,CAAc;AAAEpB,QAAAA,KAAK,EAAEmB,IAAT;AAAewB,QAAAA,aAAa,EAAE;AAA9B,OAAd;AACH,KAJH,EAKGU,KALH,CAKSH,OAAO,CAACC,GALjB;AAMC;;AAEDjE,EAAAA,MAAM,GACN;AACE;AACA;AACA,QAAIoE,YAAY,GAAG,KAAKvD,KAAL,CAAWC,KAA9B,CAHF,CAKE;AACA;AACA;;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAEuD,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAII;AAAK,MAAA,KAAK,EAAEC,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJJ,eAOI;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,KAAK,EAAEC,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kGAC8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD9E,2EAE4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF5D,gGAMK,KAAK1D,KAAL,CAAW4C,aAAX,IAA4B,KAAK5C,KAAL,CAAWQ,QAAX,IAAuB,EAAnD,gBAAwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAK,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,eAAe,oBAAC,QAAD;AAAU,MAAA,cAAc,EAAE,KAAK+B,mBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAf,CAAxD,GAAsI,KAAKoB,WAAL,CAAiBJ,YAAjB,CAN3I,CAPJ,EAgBK,KAAKvD,KAAL,CAAWC,KAAX,IAAoB,IAApB,gBAA2B,oBAAC,YAAD;AAAc,MAAA,aAAa,EAAE,KAAKD,KAAL,CAAWC,KAAX,CAAiB2D,aAA9C;AAA6D,MAAA,iBAAiB,EAAE,KAAK5D,KAAL,CAAWa,iBAA3F;AAA8G,MAAA,SAAS,EAAE,KAAKb,KAAL,CAAW8C,SAApI;AAA+I,MAAA,YAAY,EAAE,KAAKvB,YAAlK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA3B,gBAA+M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBpN,CADJ;AAqBC;;AAEDoC,EAAAA,WAAW,CAACE,WAAD,EACX;AACI,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,CAAC,GAAGF,WAAR;;AACA,QAAGE,CAAC,IAAI,IAAR,EACA;AACE;AAEA,WAAI,IAAI1B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGwB,WAAW,CAAC5D,KAAZ,CAAkB+D,MAAlB,GAA2B,CAA9C,EAAiD3B,CAAC,EAAlD,EAAqD;AACjDyB,QAAAA,IAAI,CAACG,IAAL,CAAU,KAAKC,UAAL,CAAgB7B,CAAhB,EAAmBwB,WAAW,CAAC5D,KAAZ,CAAkBoC,CAAC,GAAC,CAApB,CAAnB,CAAV;AACH;AACF;;AAED,WAAOyB,IAAP;AACH;;AAEDI,EAAAA,UAAU,CAAC7B,CAAD,EAAI8B,IAAJ,EACV;AACI;AAAA;AACI;AACA,0BAAC,SAAD;AACI,QAAA,KAAK,EAAEC,KADX;AAEI,QAAA,IAAI,EAAED,IAFV;AAGI,QAAA,GAAG,EAAE9B,CAHT;AAII,QAAA,SAAS,EAAE,KAAKrC,KAAL,CAAWW,WAAX,CAAuB0B,CAAC,GAAC,CAAzB,CAJf;AAKI,QAAA,OAAO,EAAE,KAAKZ,wBALlB;AAMI,QAAA,aAAa,EAAE,KAAKQ,iBANxB;AAOI,QAAA,eAAe,EAAE,KAAKE,qBAP1B;AAQI,QAAA,uBAAuB,EAAE,KAAKnC,KAAL,CAAW2C,YARxC;AASI,QAAA,gBAAgB,EAAE,KAAK3C,KAAL,CAAW2B,gBATjC;AAUI,QAAA,YAAY,EAAE,KAAKG,gBAVvB;AAWI,QAAA,iBAAiB,EAAE,KAAK9B,KAAL,CAAWa,iBAXlC;AAYI,QAAA,WAAW,EAAE,KAAK4B,iBAZtB;AAaI,QAAA,+BAA+B,EAAE,KAAKzC,KAAL,CAAW0C,+BAbhD;AAcI,QAAA,0BAA0B,EAAE,KAAK1C,KAAL,CAAW6C,0BAd3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAmBH;;AAtQT;;AAyQA,SAASwB,QAAT,GACA;AACEvD,EAAAA,KAAK,CAAC,0EAAD,CAAL,CACCG,IADD,CAEE,UAASC,QAAT,EAAmB;AACjB,QAAIA,QAAQ,CAACoD,MAAT,KAAoB,GAAxB,EAA6B;AAC3BnB,MAAAA,OAAO,CAACC,GAAR,CAAY,kDACVlC,QAAQ,CAACoD,MADX;AAEA;AACD,KALgB,CAOjB;;;AACApD,IAAAA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,UAASG,IAAT,EAAe;AAClC+B,MAAAA,OAAO,CAACC,GAAR,CAAYhC,IAAZ;AACA,aAAOA,IAAP;AACD,KAHD;AAID,GAdH,EAgBCkC,KAhBD,CAgBO,UAASiB,GAAT,EAAc;AACnBpB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BmB,GAA/B;AACD,GAlBD;AAmBD;;AAED,SAASC,OAAT,GACA;AAEI,MAAIC,GAAG,GAAG;AACNC,IAAAA,KAAK,EAAE;AADD,GAAV,CAFJ,CAKI;;AACAD,EAAAA,GAAG,CAACC,KAAJ,CAAUT,IAAV,CAAe;AAACU,IAAAA,EAAE,EAAE,CAAL;AAAQR,IAAAA,IAAI,EAAE;AAAd,GAAf;AACAM,EAAAA,GAAG,CAACC,KAAJ,CAAUT,IAAV,CAAe;AAACU,IAAAA,EAAE,EAAE,CAAL;AAAQR,IAAAA,IAAI,EAAE;AAAd,GAAf;AACAM,EAAAA,GAAG,CAACC,KAAJ,CAAUT,IAAV,CAAe;AAACU,IAAAA,EAAE,EAAE,CAAL;AAAQR,IAAAA,IAAI,EAAE;AAAd,GAAf;AACAM,EAAAA,GAAG,CAACC,KAAJ,CAAUT,IAAV,CAAe;AAACU,IAAAA,EAAE,EAAE,CAAL;AAAQR,IAAAA,IAAI,EAAE;AAAd,GAAf;AACAM,EAAAA,GAAG,CAACC,KAAJ,CAAUT,IAAV,CAAe;AAACU,IAAAA,EAAE,EAAE,CAAL;AAAQR,IAAAA,IAAI,EAAE;AAAd,GAAf;AACAM,EAAAA,GAAG,CAACC,KAAJ,CAAUT,IAAV,CAAe;AAACU,IAAAA,EAAE,EAAE,CAAL;AAAQR,IAAAA,IAAI,EAAE;AAAd,GAAf;AACAM,EAAAA,GAAG,CAACC,KAAJ,CAAUT,IAAV,CAAe;AAACU,IAAAA,EAAE,EAAE,CAAL;AAAQR,IAAAA,IAAI,EAAE;AAAd,GAAf;AAEA,MAAIhD,IAAI,GAAGV,IAAI,CAACC,SAAL,CAAe+D,GAAf,CAAX;AAEA,SAAOtD,IAAP;AACH;;AAED,IAAIuC,iBAAiB,GAAG;AACpB;AACAkB,EAAAA,KAAK,EAAE,OAFa;AAGpB;AACAC,EAAAA,UAAU,EAAE,OAJQ;AAKpBC,EAAAA,QAAQ,EAAE,MALU;AAMpB;AACAC,EAAAA,OAAO,EAAE,MAPW;AASpBC,EAAAA,SAAS,EAAE,QATS,CAUpB;AACA;;AAXoB,CAAxB;AAcA,IAAIZ,KAAK,GAAG;AACRa,EAAAA,eAAe,EAAE,WADT;AAERL,EAAAA,KAAK,EAAE,UAFC;AAGR;AACAC,EAAAA,UAAU,EAAE,OAJJ;AAKRC,EAAAA,QAAQ,EAAE,MALF;AAMR;AACAC,EAAAA,OAAO,EAAE,MAPD;AAQRC,EAAAA,SAAS,EAAE;AARH,CAAZ;AAWE,IAAIvB,WAAW,GAAG;AAChB;AACAmB,EAAAA,KAAK,EAAE,MAFS;AAGhBC,EAAAA,UAAU,EAAE,QAHI;AAIhBC,EAAAA,QAAQ,EAAE,MAJM;AAKhBE,EAAAA,SAAS,EAAE,QALK;AAMhBE,EAAAA,GAAG,EAAE;AANW,CAAlB;AAUF,IAAI1B,UAAU,GAAG;AACb;AACAoB,EAAAA,KAAK,EAAE,QAFM;AAGbC,EAAAA,UAAU,EAAE,2BAHC;AAIbC,EAAAA,QAAQ,EAAE,MAJG;AAKbE,EAAAA,SAAS,EAAE,QALE;AAMbE,EAAAA,GAAG,EAAE;AANQ,CAAjB;AAUA,eAAezF,SAAf","sourcesContent":["import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\nimport ClueOuterList from './ClueOuterList';\nimport './GameBoard.css';\nimport ClueOuter from './ClueOuter';\nimport Spinner from './Loader';\nimport UserName from './UserName';\nimport ResultsModal from './ResultsModal';\n\nclass GameBoard extends React.Component\n{ \n    // const [currentRoundBeingPlayed, setCount] = useState(1);\n    constructor(props) {\n        super(props);\n        this.state = {\n          userGuesses: Array(7).fill(null),\n          currentRound: 1,\n          oxygenBottlesUsed: 0,\n          initializeTimers: Array(7).fill(null),\n          clues: null,\n          roundTheyWereOnWhenTimerExpired: null,\n          isLoadingPage: true,\n          wordLookupFeedbackMessages: Array(7).fill(null),\n          userName: \"\",\n          showModal: false,\n          dictionaryCheckInProgress: false,\n          scoringData: null\n        };\n      }\n\n     updateWordFeedback(thisRoundNumber, message){\n      const wordLookupFeedbackMessagesCopy = this.state.wordLookupFeedbackMessages.slice();\n      wordLookupFeedbackMessagesCopy[thisRoundNumber-1] = message;\n      this.setState({wordLookupFeedbackMessages : wordLookupFeedbackMessagesCopy})\n     }\n\n     checkWord(thisRoundNumber,userGuess){\n      console.log(thisRoundNumber + \" checkWord : \" +userGuess )\n      this.updateWordFeedback(thisRoundNumber,'Checking dictionary...');\n\n      if(userGuess == \"\" || userGuess == null)\n      {\n        this.updateWordFeedback(thisRoundNumber,'Enter word then Submit and Dive');\n        return false;\n      }\n      if(this.state.dictionaryCheckInProgress)\n      {\n        this.updateWordFeedback(thisRoundNumber,'Double-clickers will be left behind!');\n        return false;\n      }\n\n      this.setState({dictionaryCheckInProgress: true}); \n      \n      //https://deepseaworddotnetservice.azurewebsites.net/Entries\n      fetch('http://deepseaworddotnetservice.azurewebsites.net/Entries/LookupWord?word=' + userGuess)\n        .then(res => res.json())\n        .then((data) => {\n          //this.setState({ clues: data })\n          if(data != null)\n          {\n            //console.log('word def:' + data.definition);\n            // readme: word was a real word.\n            this.updateWordFeedback(thisRoundNumber,'Found in dictionary.');\n            this.setState({currentRound: thisRoundNumber+1});\n            if(thisRoundNumber < 7)\n            {\n              this.handleDiverClick(thisRoundNumber+1);\n            }\n            else\n            {\n              //readme: kick-off the completion code.\n              //perform scoring and open lightbox to display response to that?\n              this.setState({showModal: true});\n              this.SendToScoringService();  \n            }\n          }\n          else\n          {\n            this.updateWordFeedback(thisRoundNumber,'NOT found - try another!');\n          }\n          this.setState({dictionaryCheckInProgress: false}); \n\n      })\n      .catch( ()=>\n      {\n        this.updateWordFeedback(thisRoundNumber,'Apparatus failure. Try again')\n      });\n    }\n\n    SendToScoringService = () => {\n              // gather up their state data\n              // do a fetch/Post of their data \n              // Simple POST request with a JSON body using fetch\n\n              // const requestOptions = {\n              //     method: 'POST',\n              //     headers: { 'Content-Type': 'application/json' },\n              //     body: JSON.stringify({ \n              //       userName: this.state.userName,\n              //       userGuesses: this.state.userGuesses,\n              //       clues: this.state.clues,\n              //       oxygenUsed: this.state.oxygenBottlesUsed,\n              //    })\n              // };\n\n              let clueInfo = Array(7).fill(null);\n              clueInfo = this.state.clues.clues.map(item => item.significantClueInfo)\n\n              const formData = new FormData();\n              formData.append('userName', this.state.userName);\n              formData.append('userGuesses', JSON.stringify(this.state.userGuesses));\n              formData.append('GUID', JSON.stringify(this.state.clues.guid));\n              formData.append('clueInfo', JSON.stringify(clueInfo));\n              formData.append('oxygenUsed', JSON.stringify(this.state.oxygenBottlesUsed));\n\n              \n              fetch('http://deepseaworddotnetservice.azurewebsites.net/Entries/SubmitForScoring/', {\n                    method: 'POST',\n                    body: formData\n                  })\n                  .then(response => response.json())\n                  .then(data => {\n                    this.setState({scoringData: data});\n                  });\n\n              // throw up a light box with a spinner while they wait\n              // display their results\n    }\n\n    handleReplay = () => {\n      this.componentDidMount()\n      //this.render();\n    }\n\n      handleSubmitAndDiveClick = (thisRoundNumber) => {\n        //readme: checking the word is good before advancing\n\n          if(this.state.initializeTimers[0] == null)\n          {\n            alert(\"Please click the diver image to start the timer \\n  \");\n          }\n          else\n          {\n            this.checkWord(thisRoundNumber, this.state.userGuesses[thisRoundNumber-1]);\n          }\n\n    };\n\n      handleDiverClick = (thisRoundNumber) =>{\n          //alert('Clicked on diver' + thisRoundNumber);\n          const initializeTimersCopy = this.state.initializeTimers.slice();\n          // readme: timer has been initialized\n          initializeTimersCopy[thisRoundNumber-1] = 1;\n          this.setState({initializeTimers : initializeTimersCopy})\n      }\n\n      handleOxygenClick = (thisRoundNumber) => {\n        //readme: not sure if I'll want to count which round the oxygen was used in, might leave param there til i decide\n        let oxygenBottlesUsedNew = this.state.oxygenBottlesUsed + 1;\n        this.setState({oxygenBottlesUsed: oxygenBottlesUsedNew});\n      };\n      \n    //   readme: this is an example of 2 pieces of info being returned to the parent from a child so we can update the state\n      handleChangeUserGuess = (userGuess,i) => {\n        const userGuessesCopy = this.state.userGuesses.slice();\n        userGuessesCopy[i-1] = userGuess;\n        this.setState({userGuesses: userGuessesCopy});\n     }\n\n     handleEnterUserName = (theirUserName) => {\n       this.setState({userName: theirUserName});\n     }\n\n     handleTimerRanOut = (i) => {\n        this.setState({roundTheyWereOnWhenTimerExpired: i})\n        //todo: drown him!\n     }\n\n     componentDidMount() {\n       // readme: resets all state except username and then fetch a new word\n      this.setState({\n        userGuesses: Array(7).fill(null),\n        currentRound: 1,\n        oxygenBottlesUsed: 0,\n        initializeTimers: Array(7).fill(null),\n        clues: null,\n        roundTheyWereOnWhenTimerExpired: null,\n        isLoadingPage: true,\n        wordLookupFeedbackMessages: Array(7).fill(null),\n        showModal: false,\n        dictionaryCheckInProgress: false,\n        scoringData: null\n        //userName: \"\"\n      });\n        \n      fetch('http://deepseaworddotnetservice.azurewebsites.net/Entries/GetWordWithClues')\n          .then(res => res.json())\n          .then((data) => {\n            this.setState({ clues: data, isLoadingPage: false })\n        })\n        .catch(console.log)\n      }\n\n      render()\n      {\n        // let clues = GetJson();\n        // let parsedClues = JSON.parse(clues);\n        let parsedClues2 = this.state.clues; \n\n        // console.log(parsedClues);\n        // console.log(\" and \")\n        // console.log(parsedClues2);\n        return (\n            <div className=\"background center-screen\">\n                <div className='TitleBar' style={titleStyle}>\n                    DeepSeaWord                    \n                </div>\n                <div style={creditStyle}>\n                    by Chris Kerr                     \n                </div>\n                <div className='GameBoard' style={instructionsStyle}>\n                    In every round submit a word that meets that clue and all previous clues. <br/> \n                    Dont run out of oxygen! If the timer expires so do you! <br/> \n                    High scores require: speed, valid words, limited oxygen refills \n                    and finding that treasure!\n                    \n                    {this.state.isLoadingPage || this.state.userName == \"\" ? <div><Spinner/><UserName changeUserName={this.handleEnterUserName}/></div>  : this.renderClues(parsedClues2)}\n                </div>\n                \n                {this.state.clues != null ? <ResultsModal temporaryWord={this.state.clues.temporaryWord} oxygenBottlesUsed={this.state.oxygenBottlesUsed} showModal={this.state.showModal} handleReplay={this.handleReplay}/> : <br/>}\n   \n            </div>\n            )\n        }\n\n        renderClues(parsedClues)\n        {\n            let rows = [];\n            var x = parsedClues;\n            if(x != null)\n            {\n              //console.log(x.clues[0]);\n            \n              for(var i = 1; i < parsedClues.clues.length + 1; i++){\n                  rows.push(this.renderClue(i, parsedClues.clues[i-1]));  \n              }\n            }\n\n            return rows;\n        }\n\n        renderClue(i, clue)\n        {\n            return (\n                //readme: wonder at what point its an antipattern to pass so much down.\n                <ClueOuter \n                    style={style} \n                    clue={clue} \n                    key={i} \n                    userGuess={this.state.userGuesses[i-1]} \n                    onClick={this.handleSubmitAndDiveClick} \n                    onClickOxygen={this.handleOxygenClick} \n                    changeUserGuess={this.handleChangeUserGuess} \n                    currentRoundBeingPlayed={this.state.currentRound}\n                    initializeTimers={this.state.initializeTimers}\n                    onDiverClick={this.handleDiverClick}\n                    oxygenBottlesUsed={this.state.oxygenBottlesUsed}  \n                    timerRanOut={this.handleTimerRanOut}\n                    roundTheyWereOnWhenTimerExpired={this.state.roundTheyWereOnWhenTimerExpired}\n                    wordLookupFeedbackMessages={this.state.wordLookupFeedbackMessages}                  \n                    />   \n            );\n        }\n}\n\nfunction GetJson2()\n{\n  fetch('https://deepseaworddotnetcore.azurewebsites.net/Entries/GetWordWithClues')\n  .then(\n    function(response) {\n      if (response.status !== 200) {\n        console.log('Looks like there was a problem. Status Code: ' +\n          response.status);\n        return;\n      }\n\n      // Examine the text in the response\n      response.json().then(function(data) {\n        console.log(data);\n        return data;\n      });\n    }\n  )\n  .catch(function(err) {\n    console.log('Fetch Error :-S', err);\n  });\n}\n\nfunction GetJson()\n{\n\n    var obj = {\n        table: []\n    }\n    // PIPE\n    obj.table.push({id: 1, clue: \"Contains letter 'i'.\"});\n    obj.table.push({id: 2, clue: \"Has fewer than 5 letters.\"});\n    obj.table.push({id: 3, clue: \"Ends with 'e'\"});\n    obj.table.push({id: 4, clue: \"Syallable count : 1\"});\n    obj.table.push({id: 5, clue: \"Vowel count : 2\"});\n    obj.table.push({id: 6, clue: \"First letter 'P'\"});\n    obj.table.push({id: 7, clue: \"A cask usually containing two hogsheads or 126 gallons\"});\n\n    var json = JSON.stringify(obj);\n    \n    return json;\n}\n\nvar instructionsStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'white',\n    // readme: hehe 'Arial', get it?\n    fontFamily: 'Arial',\n    fontSize: '12px',\n    // margin: '20px 200px 40px 200px',\n    padding: '20px',\n\n    textAlign: 'center',\n    // readme: better on mobile if no % here\n    // width: '60%'\n}\n\nvar style = {\n    backgroundColor: 'lightblue',\n    color: 'darkblue',\n    // readme: hehe 'Arial', get it?\n    fontFamily: 'Arial',\n    fontSize: '12px',\n    // margin: '20px 200px 40px 200px',\n    padding: '20px',\n    textAlign: 'left'\n  }\n\n  var creditStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'gold',\n    fontFamily: 'Cochin',\n    fontSize: '11px',\n    textAlign: 'Center',\n    top: '0px'\n  }\n\n\nvar titleStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'yellow',\n    fontFamily: 'Phosphate,Futura,Rockwell',\n    fontSize: '45px',\n    textAlign: 'Center',\n    top: '0px'\n  }\n\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}