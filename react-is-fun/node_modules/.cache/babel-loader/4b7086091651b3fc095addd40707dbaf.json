{"ast":null,"code":"var _jsxFileName = \"/Users/JMKerr/CodeNode2/react-is-fun/src/GameBoard.js\";\nimport React, { useState, Component } from 'react';\nimport { render } from 'react-dom';\nimport './GameBoard.css';\nimport ClueOuter from './ClueOuter';\nimport Spinner from './Loader';\nimport UserName from './UserName';\nimport ResultsModal from './ResultsModal';\nimport okaySfx from './sounds/okay.mp3';\nimport waterSfx from './sounds/water.mp3';\nimport treasureSfx from './sounds/treasure.mp3';\nimport gaspSfx from './sounds/gasp.mp3';\nimport rejectedSfx from './sounds/rejected.mp3';\nimport bombSfx from './sounds/bomb.mp3';\nimport UIfx from 'uifx';\nconst okaySound = new UIfx(okaySfx);\nokaySound.setVolume(0.4);\nconst waterSound = new UIfx(waterSfx);\nwaterSound.setVolume(0.7);\nconst treasureSound = new UIfx(treasureSfx);\ntreasureSound.setVolume(1.0);\nconst gaspSound = new UIfx(gaspSfx);\ngaspSound.setVolume(0.6);\nconst rejectedSound = new UIfx(rejectedSfx);\nrejectedSound.setVolume(0.7);\nconst bombSound = new UIfx(bombSfx);\nbombSound.setVolume(0.5);\n\nfunction getRandomInt(min, max) {\n  var num = Math.floor(Math.random() * Math.floor(max));\n  console.log(\"getRandomInt: \" + min + \" and \" + max);\n  console.log(\"num :\" + num);\n\n  if (num >= min && num <= max) {\n    return num;\n  }\n\n  return 0;\n}\n\nclass GameBoard extends React.Component {\n  // localhost:5000\n  // const [currentRoundBeingPlayed, setCount] = useState(1);\n  constructor(props) {\n    super(props);\n    this.addressOfService = \"deepseaword.com\";\n\n    this.SendToScoringService = () => {\n      this.setState({\n        scoreLoading: true\n      });\n      let clueInfo = Array(7).fill(null);\n      clueInfo = this.state.clues.clues.map(item => item.significantClueInfo);\n      const formData = new FormData();\n      formData.append('GUID', this.state.clues.guid);\n      formData.append('userName', this.state.userName); //readme: replace 14 lines these with LOOPS!\n\n      formData.append('userGuesses[0]', this.state.userGuesses[0] != null ? this.state.userGuesses[0] : 'realnull');\n      formData.append('userGuesses[1]', this.state.userGuesses[1] != null ? this.state.userGuesses[1] : 'realnull');\n      formData.append('userGuesses[2]', this.state.userGuesses[2] != null ? this.state.userGuesses[2] : 'realnull');\n      formData.append('userGuesses[3]', this.state.userGuesses[3] != null ? this.state.userGuesses[3] : 'realnull');\n      formData.append('userGuesses[4]', this.state.userGuesses[4] != null ? this.state.userGuesses[4] : 'realnull');\n      formData.append('userGuesses[5]', this.state.userGuesses[5] != null ? this.state.userGuesses[5] : 'realnull');\n      formData.append('userGuesses[6]', this.state.userGuesses[6] != null ? this.state.userGuesses[6] : 'realnull');\n      formData.append('clueInfo[0]', clueInfo[0]);\n      formData.append('clueInfo[1]', clueInfo[1]);\n      formData.append('clueInfo[2]', clueInfo[2]);\n      formData.append('clueInfo[3]', clueInfo[3]);\n      formData.append('clueInfo[4]', clueInfo[4]);\n      formData.append('clueInfo[5]', clueInfo[5]);\n      formData.append('clueInfo[6]', clueInfo[6]);\n      formData.append('oxygenUsed', this.state.oxygenBottlesUsed);\n      formData.append('isDead', this.state.roundTheyWereOnWhenTimerExpired != null); //http://deepseaworddotnetservice.azurewebsites.net\n\n      fetch('http://' + this.addressOfService + '/Entries/SubmitForScoring/', {\n        method: 'POST',\n        body: formData\n      }).then(response => response.json()).then(data => {\n        this.setState({\n          scoreLoading: false,\n          scoreData: data\n        });\n      });\n    };\n\n    this.handleReplay = () => {\n      this.componentDidMount(); //this.render();\n    };\n\n    this.handleSoundOkay = () => {\n      okaySound.play();\n    };\n\n    this.handleResurfaceClick = thisRoundNumber => {\n      this.setState({\n        resurfaceClicked: true\n      });\n      this.setState({\n        showModal: true\n      });\n      this.SendToScoringService();\n    };\n\n    this.handleSubmitAndDiveClick = thisRoundNumber => {\n      //readme: checking the word is good before advancing\n      if (this.state.initializeTimers[0] == null) {\n        alert(\"Please click the diver image to start the timer \\n  \");\n      } else if (this.state.roundTheyWereOnWhenTimerExpired != null) {\n        this.setState({\n          showModal: true\n        });\n        this.SendToScoringService();\n      } else {\n        this.checkWord(thisRoundNumber, this.state.userGuesses[thisRoundNumber - 1]);\n      }\n    };\n\n    this.handleDiverClick = thisRoundNumber => {\n      if (thisRoundNumber === 1) waterSound.play(); //alert('Clicked on diver' + thisRoundNumber);\n\n      const initializeTimersCopy = this.state.initializeTimers.slice(); // readme: timer has been initialized\n\n      initializeTimersCopy[thisRoundNumber - 1] = 1;\n      this.setState({\n        initializeTimers: initializeTimersCopy\n      });\n    };\n\n    this.handleOxygenClick = thisRoundNumber => {\n      gaspSound.play(); //readme: not sure if I'll want to count which round the oxygen was used in, might leave param there til i decide\n\n      let oxygenBottlesUsedNew = this.state.oxygenBottlesUsed + 1;\n      this.setState({\n        oxygenBottlesUsed: oxygenBottlesUsedNew\n      });\n    };\n\n    this.handleChangeUserGuess = (userGuess, i, key) => {\n      console.log(\"key was :\" + key);\n      const userGuessesCopy = this.state.userGuesses.slice();\n      userGuessesCopy[i - 1] = userGuess.trim().toUpperCase();\n      this.setState({\n        userGuesses: userGuessesCopy\n      });\n\n      if (key == \"Enter\") {\n        // readme: they pressed enter, assume they want to trigger a SubmitAndDive\n        this.handleSubmitAndDiveClick(i);\n      }\n    };\n\n    this.handleEnterUserName = (theirUserName, key) => {\n      //console.log(\"key was :\" + key);\n      if (key == \"Enter\" && theirUserName.trim().length > 0) {\n        this.setState({\n          userName: theirUserName\n        });\n      }\n    };\n\n    this.handleHighScoreDisplay = () => {\n      this.setState({\n        showModal: true\n      });\n      fetch('http://' + this.addressOfService + '/Entries/GetHighScores').then(res => res.json()).then(data => {\n        this.setState({\n          highScoreData: data\n        });\n      }).catch(console.log);\n    };\n\n    this.handleHighScoreHide = () => {\n      this.setState({\n        showModal: false,\n        highScoreMode: 0\n      });\n    };\n\n    this.handleTimerRanOut = i => {\n      this.setState({\n        roundTheyWereOnWhenTimerExpired: i\n      }); //todo: drown him!\n    };\n\n    this.state = {\n      userGuesses: Array(7).fill(null),\n      currentRound: 1,\n      oxygenBottlesUsed: 0,\n      initializeTimers: Array(7).fill(null),\n      clues: null,\n      roundTheyWereOnWhenTimerExpired: null,\n      isLoadingPage: true,\n      wordLookupFeedbackMessages: Array(7).fill(null),\n      userName: \"\",\n      showModal: false,\n      dictionaryCheckInProgress: false,\n      scoreData: null,\n      scoreLoading: false,\n      resurfaceClicked: false,\n      highScoreData: null,\n      foundTreasureInRound: null,\n      sharkAppearsInRound: getRandomInt(1, 4),\n      mineAppearsInRound: getRandomInt(5, 7)\n    };\n  }\n\n  updateWordFeedback(thisRoundNumber, message) {\n    const wordLookupFeedbackMessagesCopy = this.state.wordLookupFeedbackMessages.slice();\n    wordLookupFeedbackMessagesCopy[thisRoundNumber - 1] = message;\n    this.setState({\n      wordLookupFeedbackMessages: wordLookupFeedbackMessagesCopy\n    });\n  } // readme: very important function!\n\n\n  checkWord(thisRoundNumber, userGuess) {\n    console.log(thisRoundNumber + \" checkWord : \" + userGuess);\n    this.updateWordFeedback(thisRoundNumber, 'Checking dictionary...');\n    userGuess = userGuess.trim().toUpperCase();\n\n    if (userGuess == \"\" || userGuess == null) {\n      this.updateWordFeedback(thisRoundNumber, 'Enter word then Submit and Dive');\n      rejectedSound.play();\n      return false;\n    } // readme : they have already used this word on prev round\n    // and the +1 because the array is indexed at 0.\n\n\n    if (this.state.userGuesses.indexOf(userGuess) > -1 && parseInt(this.state.userGuesses.indexOf(userGuess) + 1) < thisRoundNumber) {\n      this.updateWordFeedback(thisRoundNumber, 'Can\\'t use that word again!');\n      rejectedSound.play();\n      return false;\n    }\n\n    if (this.state.dictionaryCheckInProgress) {\n      this.updateWordFeedback(thisRoundNumber, 'Double-clickers will be left behind!');\n      rejectedSound.play();\n      return false;\n    }\n\n    this.setState({\n      dictionaryCheckInProgress: true\n    }); //https://deepseaworddotnetservice.azurewebsites.net/Entries\n\n    fetch('http://' + this.addressOfService + '/Entries/LookupWord?word=' + userGuess).then(res => res.json()).then(data => {\n      //this.setState({ clues: data })\n      if (data != null) {\n        console.log('word def:' + data.definition); // readme: word was a real word.\n\n        this.updateWordFeedback(thisRoundNumber, 'Found in dictionary.'); //console.log(userGuess.trim().toUpperCase() + \" ? \" + this.state.clues.temporaryWord.trim().toUpperCase());\n\n        if (userGuess.trim().toUpperCase() == this.state.clues.temporaryWord.trim().toUpperCase()) {\n          treasureSound.play();\n          this.setState({\n            foundTreasureInRound: thisRoundNumber\n          });\n          this.updateWordFeedback(thisRoundNumber, 'Great! Keep going - valid words earn $$');\n        } else {\n          okaySound.play(); //this.handleSoundOkay();\n        }\n\n        this.setState({\n          currentRound: thisRoundNumber + 1\n        });\n\n        if (thisRoundNumber < 7) {\n          this.handleDiverClick(thisRoundNumber + 1);\n        } else {\n          //readme: kick-off the completion code.\n          //perform scoring and open lightbox to display response to that?\n          this.setState({\n            showModal: true\n          });\n          this.SendToScoringService();\n        }\n      } else {\n        this.updateWordFeedback(thisRoundNumber, 'NOT found - try another!');\n\n        if (this.state.mineAppearsInRound == thisRoundNumber) {\n          bombSound.play();\n        } else {\n          rejectedSound.play();\n        }\n      }\n\n      this.setState({\n        dictionaryCheckInProgress: false\n      });\n    }).catch(error => {\n      console.log(error);\n      this.updateWordFeedback(thisRoundNumber, 'Apparatus failure. Try again');\n    });\n  }\n\n  componentDidMount() {\n    // readme: resets all state except username and then fetch a new word\n    this.setState({\n      userGuesses: Array(7).fill(null),\n      currentRound: 1,\n      oxygenBottlesUsed: 0,\n      initializeTimers: Array(7).fill(null),\n      clues: null,\n      roundTheyWereOnWhenTimerExpired: null,\n      isLoadingPage: true,\n      wordLookupFeedbackMessages: Array(7).fill(null),\n      showModal: false,\n      dictionaryCheckInProgress: false,\n      scoreData: null,\n      scoreLoading: false,\n      resurfaceClicked: false,\n      highScoreData: null,\n      foundTreasureInRound: null,\n      sharkAppearsInRound: getRandomInt(1, 4),\n      mineAppearsInRound: getRandomInt(5, 7) //userName: \"\"\n\n    });\n    fetch('http://' + this.addressOfService + '/Entries/GetWordWithClues?userName=' + this.state.userName).then(res => res.json()).then(data => {\n      this.setState({\n        clues: data,\n        isLoadingPage: false\n      });\n    }).catch(console.log);\n  }\n\n  render() {\n    // let clues = GetJson();\n    // let parsedClues = JSON.parse(clues);\n    let parsedClues = this.state.clues; // console.log(parsedClues);\n    // console.log(\" and \")\n    // console.log(parsedClues2);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"background center-screen\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TitleBar\",\n      style: titleStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 17\n      }\n    }, \"DeepSeaWord\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: creditStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }\n    }, \"by Chris Kerr\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"GameBoard\",\n      style: instructionsStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }\n    }, \"In every round submit a word that meets that clue and all previous clues. \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 95\n      }\n    }), \"Don't run out of oxygen - if the timer expires \", /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontStyle: \"italic\",\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 68\n      }\n    }, \"so do you!\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 141\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#\",\n      style: {\n        color: \"gold\",\n        fontWeight: \"bold\"\n      },\n      onClick: this.handleHighScoreDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 21\n      }\n    }, \"High scores\"), \" require: speed, valid words, limited oxygen refills and finding that treasure!\", this.state.isLoadingPage || this.state.userName == \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 78\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 83\n      }\n    }), /*#__PURE__*/React.createElement(UserName, {\n      userName: this.state.userName,\n      changeUserName: this.handleEnterUserName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 93\n      }\n    })) : this.renderClues(parsedClues), this.renderScore()));\n  }\n\n  renderScore() {\n    console.log(\"renderScore(scoreData)\");\n\n    if (this.state.clues == null) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(ResultsModal, {\n      highScoreData: this.state.highScoreData,\n      isDead: this.state.roundTheyWereOnWhenTimerExpired != null,\n      clues: this.state.clues.clues,\n      scoreData: this.state.scoreData,\n      userGuesses: this.state.userGuesses,\n      oxygenBottlesUsed: this.state.oxygenBottlesUsed,\n      showModal: this.state.showModal,\n      handleReplay: this.handleReplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 19\n      }\n    });\n  }\n\n  renderClues(parsedClues) {\n    let rows = [];\n    var x = parsedClues;\n\n    if (x != null) {\n      //console.log(x.clues[0]);\n      for (var i = 1; i < parsedClues.clues.length + 1; i++) {\n        rows.push(this.renderClue(i, parsedClues.clues[i - 1]));\n      }\n    }\n\n    return rows;\n  }\n\n  renderClue(i, clue) {\n    return (\n      /*#__PURE__*/\n      //readme: wonder at what point its an antipattern to pass so much down.\n      React.createElement(ClueOuter, {\n        style: style,\n        clue: clue,\n        key: i,\n        userGuess: this.state.userGuesses[i - 1],\n        onClick: this.handleSubmitAndDiveClick,\n        onClickResurface: this.handleResurfaceClick,\n        onClickOxygen: this.handleOxygenClick,\n        changeUserGuess: this.handleChangeUserGuess,\n        currentRoundBeingPlayed: this.state.currentRound,\n        initializeTimers: this.state.initializeTimers,\n        onDiverClick: this.handleDiverClick,\n        oxygenBottlesUsed: this.state.oxygenBottlesUsed,\n        timerRanOut: this.handleTimerRanOut,\n        roundTheyWereOnWhenTimerExpired: this.state.roundTheyWereOnWhenTimerExpired,\n        wordLookupFeedbackMessages: this.state.wordLookupFeedbackMessages,\n        resurfaceClicked: this.state.resurfaceClicked,\n        foundTreasureInRound: this.state.foundTreasureInRound,\n        sharkAppearsInRound: this.state.sharkAppearsInRound,\n        mineAppearsInRound: this.state.mineAppearsInRound,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 17\n        }\n      })\n    );\n  }\n\n}\n\nvar instructionsStyle = {\n  //backgroundColor: 'lightblue',\n  color: 'white',\n  // readme: hehe 'Arial', get it?\n  fontFamily: 'Arial',\n  fontSize: '13px',\n  // margin: '20px 200px 40px 200px',\n  padding: '20px',\n  textAlign: 'center' // readme: better on mobile if no % here\n  // width: '60%'\n\n};\nvar style = {\n  backgroundColor: 'lightblue',\n  color: 'darkblue',\n  // readme: hehe 'Arial', get it?\n  fontFamily: 'Arial',\n  fontSize: '12px',\n  // margin: '20px 200px 40px 200px',\n  padding: '20px',\n  textAlign: 'left'\n};\nvar creditStyle = {\n  //backgroundColor: 'lightblue',\n  color: 'gold',\n  fontFamily: 'Cochin',\n  fontSize: '11px',\n  textAlign: 'Center',\n  top: '0px'\n};\nvar titleStyle = {\n  //backgroundColor: 'lightblue',\n  color: 'yellow',\n  fontFamily: 'Phosphate,Futura,Rockwell,Impact',\n  fontSize: '45px',\n  textAlign: 'Center',\n  top: '0px'\n};\nexport default GameBoard;","map":{"version":3,"sources":["/Users/JMKerr/CodeNode2/react-is-fun/src/GameBoard.js"],"names":["React","useState","Component","render","ClueOuter","Spinner","UserName","ResultsModal","okaySfx","waterSfx","treasureSfx","gaspSfx","rejectedSfx","bombSfx","UIfx","okaySound","setVolume","waterSound","treasureSound","gaspSound","rejectedSound","bombSound","getRandomInt","min","max","num","Math","floor","random","console","log","GameBoard","constructor","props","addressOfService","SendToScoringService","setState","scoreLoading","clueInfo","Array","fill","state","clues","map","item","significantClueInfo","formData","FormData","append","guid","userName","userGuesses","oxygenBottlesUsed","roundTheyWereOnWhenTimerExpired","fetch","method","body","then","response","json","data","scoreData","handleReplay","componentDidMount","handleSoundOkay","play","handleResurfaceClick","thisRoundNumber","resurfaceClicked","showModal","handleSubmitAndDiveClick","initializeTimers","alert","checkWord","handleDiverClick","initializeTimersCopy","slice","handleOxygenClick","oxygenBottlesUsedNew","handleChangeUserGuess","userGuess","i","key","userGuessesCopy","trim","toUpperCase","handleEnterUserName","theirUserName","length","handleHighScoreDisplay","res","highScoreData","catch","handleHighScoreHide","highScoreMode","handleTimerRanOut","currentRound","isLoadingPage","wordLookupFeedbackMessages","dictionaryCheckInProgress","foundTreasureInRound","sharkAppearsInRound","mineAppearsInRound","updateWordFeedback","message","wordLookupFeedbackMessagesCopy","indexOf","parseInt","definition","temporaryWord","error","parsedClues","titleStyle","creditStyle","instructionsStyle","fontStyle","fontWeight","color","renderClues","renderScore","rows","x","push","renderClue","clue","style","fontFamily","fontSize","padding","textAlign","backgroundColor","top"],"mappings":"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","sourcesContent":["import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\nimport './GameBoard.css';\nimport ClueOuter from './ClueOuter';\nimport Spinner from './Loader';\nimport UserName from './UserName';\nimport ResultsModal from './ResultsModal';\nimport okaySfx from './sounds/okay.mp3'; \nimport waterSfx from './sounds/water.mp3'; \nimport treasureSfx from './sounds/treasure.mp3'; \nimport gaspSfx from './sounds/gasp.mp3'; \nimport rejectedSfx from './sounds/rejected.mp3';\nimport bombSfx from './sounds/bomb.mp3';\nimport UIfx from 'uifx';\n\nconst okaySound = new UIfx(okaySfx);\nokaySound.setVolume(0.4);\nconst waterSound = new UIfx(waterSfx);\nwaterSound.setVolume(0.7);\nconst treasureSound = new UIfx(treasureSfx);\ntreasureSound.setVolume(1.0);\nconst gaspSound = new UIfx(gaspSfx);\ngaspSound.setVolume(0.6);\nconst rejectedSound = new UIfx(rejectedSfx);\nrejectedSound.setVolume(0.7);\nconst bombSound = new UIfx(bombSfx);\nbombSound.setVolume(0.5);\n\nfunction getRandomInt(min, max) {\n  var num = Math.floor(Math.random() * Math.floor(max));\n  console.log(\"getRandomInt: \" + min + \" and \" + max);\n  console.log(\"num :\" + num);\n  if(num >= min && num <= max)\n  {\n    return num;\n  }\n  return 0;\n}\n\nclass GameBoard extends React.Component\n{\n    addressOfService = \"deepseaword.com\"; // localhost:5000\n    // const [currentRoundBeingPlayed, setCount] = useState(1);\n    constructor(props) {\n        super(props);\n        this.state = {\n          userGuesses: Array(7).fill(null),\n          currentRound: 1,\n          oxygenBottlesUsed: 0,\n          initializeTimers: Array(7).fill(null),\n          clues: null,\n          roundTheyWereOnWhenTimerExpired: null,\n          isLoadingPage: true,\n          wordLookupFeedbackMessages: Array(7).fill(null),\n          userName: \"\",\n          showModal: false,\n          dictionaryCheckInProgress: false,\n          scoreData: null,\n          scoreLoading: false,\n          resurfaceClicked: false,\n          highScoreData: null,\n          foundTreasureInRound: null,\n          sharkAppearsInRound: getRandomInt(1,4),\n          mineAppearsInRound: getRandomInt(5,7)\n        };\n      }\n\n     updateWordFeedback(thisRoundNumber, message){\n      const wordLookupFeedbackMessagesCopy = this.state.wordLookupFeedbackMessages.slice();\n      wordLookupFeedbackMessagesCopy[thisRoundNumber-1] = message;\n      this.setState({wordLookupFeedbackMessages : wordLookupFeedbackMessagesCopy})\n     }\n    \n     // readme: very important function!\n     checkWord(thisRoundNumber,userGuess){\n      console.log(thisRoundNumber + \" checkWord : \" +userGuess )\n      this.updateWordFeedback(thisRoundNumber,'Checking dictionary...');\n      userGuess = userGuess.trim().toUpperCase();\n\n      if(userGuess == \"\" || userGuess == null)\n      {\n        this.updateWordFeedback(thisRoundNumber,'Enter word then Submit and Dive');\n        rejectedSound.play();\n        return false;\n      }\n\n      // readme : they have already used this word on prev round\n      // and the +1 because the array is indexed at 0.\n      if(this.state.userGuesses.indexOf(userGuess) > -1 && parseInt(this.state.userGuesses.indexOf(userGuess) + 1) < thisRoundNumber)\n      {\n        this.updateWordFeedback(thisRoundNumber,'Can\\'t use that word again!');\n        rejectedSound.play();\n        return false;\n      }\n\n      if(this.state.dictionaryCheckInProgress)\n      {\n        this.updateWordFeedback(thisRoundNumber,'Double-clickers will be left behind!');\n        rejectedSound.play();\n        return false;\n      }\n\n      this.setState({dictionaryCheckInProgress: true}); \n      //https://deepseaworddotnetservice.azurewebsites.net/Entries\n      fetch('http://' + this.addressOfService + '/Entries/LookupWord?word=' + userGuess)\n        .then(res => res.json())\n        .then((data) => {\n          //this.setState({ clues: data })\n          if(data != null)\n          {\n            console.log('word def:' + data.definition);\n            // readme: word was a real word.\n            this.updateWordFeedback(thisRoundNumber,'Found in dictionary.');\n            //console.log(userGuess.trim().toUpperCase() + \" ? \" + this.state.clues.temporaryWord.trim().toUpperCase());\n            if(userGuess.trim().toUpperCase() == this.state.clues.temporaryWord.trim().toUpperCase())\n            {\n              treasureSound.play();\n              this.setState({foundTreasureInRound:thisRoundNumber })\n              this.updateWordFeedback(thisRoundNumber,'Great! Keep going - valid words earn $$');\n            }\n            else\n            {\n              okaySound.play();\n              //this.handleSoundOkay();\n            }\n            this.setState({currentRound: thisRoundNumber+1});\n            if(thisRoundNumber < 7)\n            {\n              this.handleDiverClick(thisRoundNumber+1);\n            }\n            else\n            {\n              //readme: kick-off the completion code.\n              //perform scoring and open lightbox to display response to that?\n              this.setState({showModal: true});\n              this.SendToScoringService();  \n            }\n          }\n          else\n          {\n            this.updateWordFeedback(thisRoundNumber,'NOT found - try another!');\n            if(this.state.mineAppearsInRound == thisRoundNumber){\n              bombSound.play();\n            }\n            else{\n              rejectedSound.play();\n            }     \n          }\n          this.setState({dictionaryCheckInProgress: false}); \n\n      })\n      .catch( (error)=>\n      {\n        console.log(error);\n        this.updateWordFeedback(thisRoundNumber,'Apparatus failure. Try again')\n      });\n    }\n\n    SendToScoringService = () => {\n\n              this.setState({scoreLoading: true});\n              let clueInfo = Array(7).fill(null);\n              clueInfo = this.state.clues.clues.map(item => item.significantClueInfo)\n\n              const formData = new FormData();\n\n              formData.append('GUID', this.state.clues.guid);\n              formData.append('userName', this.state.userName);\n              //readme: replace 14 lines these with LOOPS!\n              formData.append('userGuesses[0]', (this.state.userGuesses[0] != null ? this.state.userGuesses[0] : 'realnull' ));\n              formData.append('userGuesses[1]', (this.state.userGuesses[1] != null ? this.state.userGuesses[1] : 'realnull' ));\n              formData.append('userGuesses[2]', (this.state.userGuesses[2] != null ? this.state.userGuesses[2] : 'realnull' ));\n              formData.append('userGuesses[3]', (this.state.userGuesses[3] != null ? this.state.userGuesses[3] : 'realnull' ));\n              formData.append('userGuesses[4]', (this.state.userGuesses[4] != null ? this.state.userGuesses[4] : 'realnull' ));\n              formData.append('userGuesses[5]', (this.state.userGuesses[5] != null ? this.state.userGuesses[5] : 'realnull' ));\n              formData.append('userGuesses[6]', (this.state.userGuesses[6] != null ? this.state.userGuesses[6] : 'realnull' ));\n              formData.append('clueInfo[0]', clueInfo[0]);\n              formData.append('clueInfo[1]', clueInfo[1]);\n              formData.append('clueInfo[2]', clueInfo[2]);\n              formData.append('clueInfo[3]', clueInfo[3]);\n              formData.append('clueInfo[4]', clueInfo[4]);\n              formData.append('clueInfo[5]', clueInfo[5]);\n              formData.append('clueInfo[6]', clueInfo[6]);\n              formData.append('oxygenUsed', this.state.oxygenBottlesUsed);\n              formData.append('isDead', this.state.roundTheyWereOnWhenTimerExpired != null)\n\n              //http://deepseaworddotnetservice.azurewebsites.net\n              fetch('http://' + this.addressOfService + '/Entries/SubmitForScoring/', {\n                    method: 'POST',\n                    body: formData\n                  })\n                  .then(response => response.json())\n                  .then(data => {\n\n                    this.setState({scoreLoading: false, scoreData: data});\n\n                  });\n\n    }\n\n    handleReplay = () => {\n      this.componentDidMount()\n      //this.render();\n    }\n\n    handleSoundOkay = () => {\n      okaySound.play()\n    }\n\n    handleResurfaceClick = (thisRoundNumber) =>{\n      this.setState({resurfaceClicked: true});\n      this.setState({showModal: true});\n      this.SendToScoringService();  \n    }\n\n    handleSubmitAndDiveClick = (thisRoundNumber) => {\n      //readme: checking the word is good before advancing\n\n        if(this.state.initializeTimers[0] == null)\n        {\n          alert(\"Please click the diver image to start the timer \\n  \");\n        }\n        else if(this.state.roundTheyWereOnWhenTimerExpired != null)\n        {\n          this.setState({showModal: true});\n          this.SendToScoringService();  \n        }\n        else\n        {\n          this.checkWord(thisRoundNumber, this.state.userGuesses[thisRoundNumber-1]);\n        }\n    };\n\n      handleDiverClick = (thisRoundNumber) =>{\n        if(thisRoundNumber===1) waterSound.play();\n          //alert('Clicked on diver' + thisRoundNumber);\n          const initializeTimersCopy = this.state.initializeTimers.slice();\n          // readme: timer has been initialized\n          initializeTimersCopy[thisRoundNumber-1] = 1;\n          this.setState({initializeTimers : initializeTimersCopy})\n      }\n\n      handleOxygenClick = (thisRoundNumber) => {\n        gaspSound.play();\n        //readme: not sure if I'll want to count which round the oxygen was used in, might leave param there til i decide\n        let oxygenBottlesUsedNew = this.state.oxygenBottlesUsed + 1;\n        this.setState({oxygenBottlesUsed: oxygenBottlesUsedNew});\n      };\n      \n    //readme: this is an example of 2 pieces of info being returned to the parent from a child so we can update the state\n      handleChangeUserGuess = (userGuess,i, key) => {\n        console.log(\"key was :\" + key);\n\n        const userGuessesCopy = this.state.userGuesses.slice();\n        userGuessesCopy[i-1] = userGuess.trim().toUpperCase();\n        this.setState({userGuesses: userGuessesCopy});\n          \n        if(key == \"Enter\")\n        {\n          // readme: they pressed enter, assume they want to trigger a SubmitAndDive\n          this.handleSubmitAndDiveClick(i);\n        }\n     }\n\n     handleEnterUserName = (theirUserName, key) => {\n       //console.log(\"key was :\" + key);\n       if(key == \"Enter\" && theirUserName.trim().length > 0)\n       {\n        this.setState({userName: theirUserName});\n       }\n     }\n\n     handleHighScoreDisplay = () =>{\n      this.setState({showModal: true});\n\n          fetch('http://' + this.addressOfService + '/Entries/GetHighScores')\n          .then(res => res.json())\n          .then((data) => {\n            this.setState({ highScoreData: data})\n        })\n        .catch(console.log)\n     }\n\n     handleHighScoreHide = () =>{\n      this.setState({showModal: false, highScoreMode: 0});\n     }\n\n     handleTimerRanOut = (i) => {\n        this.setState({roundTheyWereOnWhenTimerExpired: i})\n        //todo: drown him!\n     }\n\n     componentDidMount() {\n       // readme: resets all state except username and then fetch a new word\n      this.setState({\n        userGuesses: Array(7).fill(null),\n        currentRound: 1,\n        oxygenBottlesUsed: 0,\n        initializeTimers: Array(7).fill(null),\n        clues: null,\n        roundTheyWereOnWhenTimerExpired: null,\n        isLoadingPage: true,\n        wordLookupFeedbackMessages: Array(7).fill(null),\n        showModal: false,\n        dictionaryCheckInProgress: false,\n        scoreData: null,\n        scoreLoading: false,\n        resurfaceClicked: false,\n        highScoreData: null,\n        foundTreasureInRound : null,\n        sharkAppearsInRound: getRandomInt(1,4),\n        mineAppearsInRound: getRandomInt(5,7)\n        //userName: \"\"\n      });\n      \n      fetch('http://' + this.addressOfService + '/Entries/GetWordWithClues?userName=' + this.state.userName)\n          .then(res => res.json())\n          .then((data) => {\n            this.setState({ clues: data, isLoadingPage: false })\n        })\n        .catch(console.log)\n      }\n\n      render()\n      {\n        // let clues = GetJson();\n        // let parsedClues = JSON.parse(clues);\n        let parsedClues = this.state.clues; \n        // console.log(parsedClues);\n        // console.log(\" and \")\n        // console.log(parsedClues2);\n        return (\n            <div className=\"background center-screen\">\n                <div className='TitleBar' style={titleStyle}>\n                    DeepSeaWord                  \n                </div>\n                <div style={creditStyle}>\n                    by Chris Kerr               \n                </div>\n                <div className='GameBoard' style={instructionsStyle}>\n                    In every round submit a word that meets that clue and all previous clues. <br/> \n                    Don't run out of oxygen - if the timer expires <span style={{fontStyle: \"italic\", fontWeight: \"bold\"}}>so do you!</span><br/> \n                    <a href=\"#\" style={{color:\"gold\", fontWeight: \"bold\"}} onClick={this.handleHighScoreDisplay} >High scores</a> require: speed, valid words, limited oxygen refills \n                    and finding that treasure!  \n                    {this.state.isLoadingPage || this.state.userName == \"\" ? <div><Spinner/><UserName userName={this.state.userName} changeUserName={this.handleEnterUserName}/></div>  : this.renderClues(parsedClues)}\n                    {this.renderScore()}\n                </div>\n   \n            </div>\n            )\n        }\n        renderScore()\n        {\n          console.log(\"renderScore(scoreData)\");\n          \n          if (this.state.clues == null)\n          {\n            return null;\n          }\n\n          return(\n              \n                  <ResultsModal highScoreData={this.state.highScoreData} isDead={this.state.roundTheyWereOnWhenTimerExpired != null} clues={this.state.clues.clues} scoreData={this.state.scoreData} userGuesses={this.state.userGuesses} oxygenBottlesUsed={this.state.oxygenBottlesUsed} showModal={this.state.showModal} handleReplay={this.handleReplay}/>\n              \n          );\n        }\n\n        renderClues(parsedClues)\n        {\n            let rows = [];\n            var x = parsedClues;\n            if(x != null)\n            {\n              //console.log(x.clues[0]);\n            \n              for(var i = 1; i < parsedClues.clues.length + 1; i++){\n                  rows.push(this.renderClue(i, parsedClues.clues[i-1]));  \n              }\n            }\n\n            return rows;\n        }\n\n        renderClue(i, clue)\n        {\n            return (\n                //readme: wonder at what point its an antipattern to pass so much down.\n                <ClueOuter \n                    style={style} \n                    clue={clue} \n                    key={i} \n                    userGuess={this.state.userGuesses[i-1]} \n                    onClick={this.handleSubmitAndDiveClick} \n                    onClickResurface={this.handleResurfaceClick} \n                    onClickOxygen={this.handleOxygenClick} \n                    changeUserGuess={this.handleChangeUserGuess} \n                    currentRoundBeingPlayed={this.state.currentRound}\n                    initializeTimers={this.state.initializeTimers}\n                    onDiverClick={this.handleDiverClick}\n                    oxygenBottlesUsed={this.state.oxygenBottlesUsed}  \n                    timerRanOut={this.handleTimerRanOut}\n                    roundTheyWereOnWhenTimerExpired={this.state.roundTheyWereOnWhenTimerExpired}\n                    wordLookupFeedbackMessages={this.state.wordLookupFeedbackMessages}    \n                    resurfaceClicked={this.state.resurfaceClicked}       \n                    foundTreasureInRound={this.state.foundTreasureInRound}   \n                    sharkAppearsInRound={this.state.sharkAppearsInRound}\n                    mineAppearsInRound={this.state.mineAppearsInRound}   \n                    />   \n            );\n        }\n}\n\nvar instructionsStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'white',\n    // readme: hehe 'Arial', get it?\n    fontFamily: 'Arial',\n    fontSize: '13px',\n    // margin: '20px 200px 40px 200px',\n    padding: '20px',\n\n    textAlign: 'center',\n    // readme: better on mobile if no % here\n    // width: '60%'\n}\n\nvar style = {\n    backgroundColor: 'lightblue',\n    color: 'darkblue',\n    // readme: hehe 'Arial', get it?\n    fontFamily: 'Arial',\n    fontSize: '12px',\n    // margin: '20px 200px 40px 200px',\n    padding: '20px',\n    textAlign: 'left'\n  }\n\n  var creditStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'gold',\n    fontFamily: 'Cochin',\n    fontSize: '11px',\n    textAlign: 'Center',\n    top: '0px'\n  }\n\n\nvar titleStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'yellow',\n    fontFamily: 'Phosphate,Futura,Rockwell,Impact',\n    fontSize: '45px',\n    textAlign: 'Center',\n    top: '0px'\n  }\n\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}