{"version":3,"sources":["sounds/tick.mp3","logo.svg","sounds/perfect.mp3","sounds/sad.mp3","sounds/okay.mp3","sounds/water.mp3","sounds/treasure.mp3","sounds/gasp.mp3","sounds/rejected.mp3","sounds/bomb.mp3","sounds/jaws.mp3","sounds/squirt.mp3","serviceWorker.js","Chris.js","Timer.js","UserGuess.js","ClueScore.js","TimerCircle.js","ClueOuter.js","Loader.js","UserName.js","ResultsModal.js","GameBoard.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Chris","Timer","UserGuess","className","style","disabled","this","props","isThisTheCurrentRound","width","height","fontSize","padding","type","maxLength","tabIndex","clueId","onKeyUp","event","changeUserGuess","target","value","key","onBlur","onFocus","startTimer","wordLookupFeedbackMessage","React","Component","fontFamily","margin","tickSoundQuiet","UIfx","tickSfx","setVolume","tickSoundUrgent","COLOR_CODES","info","color","warning","threshold","alert","timePassed","timeLeft","timerInterval","Array","fill","remainingPathColor","oxygenBottlesApplied","oxygenBottlesBought","isDemoMode","timerRanOutCallback","ResetTimer","calledBy","console","log","onTimesUp","uniqueKey","clearInterval","setInterval","document","getElementById","innerHTML","formatTime","circleDasharray","rawTimeFraction","calculateTimeFraction","toFixed","setAttribute","setCircleDasharray","classList","remove","add","setRemainingPathColor","undefined","play","time","minutes","Math","floor","seconds","TimerCircle","currentRoundBeingPlayed","diff","initializeTimers","timerRanOut","haltTimer","id","ClueOuter","clue","thisRoundId","roundId","foundTreasureInThisRound","userGuess","foundTreasureInRound","sharkAppearsInThisRound","sharkAppearsInRound","mineAppearsInThisRound","mineAppearsInRound","squidAppearsInThisRound","squidAppearsInRound","treasureFoundClassName","diverClassName","isDiverDead","roundTheyWereOnWhenTimerExpired","diverDisplay","initializedTimer","DiverDisplayFunction","combinedClassNames","clueOuterClassName","roundStyle","thisRoundNumber","playerName","Alert","variant","HelpAlert","inlineBlock","name","floatLeft","onChange","clueText","ClueInner","wordLookupFeedbackMessages","displayNone","resurfaceClicked","position","diverSpanStyle","display","backgroundColor","fontWeight","top","src","diverStyleDead","diverStyleAlive","paddingBottom","onClick","onDiverClick","floatRight","buttonPadding","onClickResurface","onClickOxygen","displayBlock","transform","filter","left","right","bottom","textAlignLast","textAlign","float","Spinner","timeout","UserName","userName","userStyle","changeUserName","placeholder","href","perfectSound","perfectSfx","sadSound","sadSfx","ResultsModal","state","showModal","highScoreData","highScoringRows","index","length","element","push","timesPlayed","perfectDives","foundTreasure","oxygenTanksUsed","averagePointsPerDive","longestStreak","currentStreak","totalPoints","isOpen","contentLabel","appElement","data-tip","boldFont","red","blue","handleReplay","scoreData","spinnerStyle","isDead","content","backgroundImage","backgroundSize","backgroundPosition","overflow","resultStyle","wordBeingSought","DisplayTopThree","topThreeScores","playerHighScore","clueScoringRows","clueScores","userGuesses","scorePerClue","SuccessImage","FailImage","isPerfectDive","biggerFont","orange","violet","green","oxygenBottlesUsed","totalScore","smallerFont","clues","alt","answerIndex","clueIndex","parseInt","topThree","okaySound","okaySfx","waterSound","waterSfx","treasureSound","treasureSfx","gaspSound","gaspSfx","rejectedSound","rejectedSfx","bombSound","bombSfx","sharkSound","sharkSfx","squirtSound","squirtSfx","getRandomInt","min","max","num","random","GameBoard","addressOfService","SendToScoringService","setState","scoreLoading","clueInfo","map","item","significantClueInfo","formData","FormData","append","guid","fetch","method","body","then","response","json","data","scrollTop","documentElement","componentDidMount","fetchNewWord","handleSoundOkay","handleResurfaceClick","handleSubmitAndDiveClick","checkWord","handleDiverClick","progressToNextRound","gameStarted","handleOxygenClick","oxygenBottlesBoughtNew","handleChangeUserGuess","i","userGuessesCopy","slice","trim","toUpperCase","handleEnterUserName","theirUserName","handleHighScoreDisplay","res","catch","handleHighScoreHide","highScoreMode","handleTimerRanOut","currentRound","isLoadingPage","dictionaryCheckInProgress","message","wordLookupFeedbackMessagesCopy","updateWordFeedback","indexOf","definition","temporaryWord","error","initializeTimersCopy","isFirstTime","setupDemoMode","parsedClues","titleStyle","creditStyle","instructionsStyle","paddingRight","paddingLeft","renderClues","renderScore","rows","renderClue","minWidth","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,kC,qBCA3CD,EAAOC,QAAU,IAA0B,kC,iBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,+PCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCFSC,I,iDCwCEC,ICrDXC,E,uKAIL,IAAD,OACI,OAEI,yBAAKC,UAAU,YAAYC,MAAOA,GAC9B,2BACIC,UAAWC,KAAKC,MAAMC,sBACtBJ,MAAO,CAACK,MAAM,OAAOC,OAAO,OAAQC,SAAS,SAAUC,QAAQ,WAC/DC,KAAK,OACLC,UAAU,KACVC,SAAUT,KAAKC,MAAMS,OAAS,IAC9BC,QAAS,SAACC,GAAD,OAAW,EAAKX,MAAMY,gBAAgBD,EAAME,OAAOC,MAAO,EAAKd,MAAMS,OAAQE,EAAMI,MAC5FC,OAAQ,SAACL,GAAD,OAAW,EAAKX,MAAMY,gBAAgBD,EAAME,OAAOC,MAAO,EAAKd,MAAMS,OAAQ,MACrFQ,QAAS,SAACN,GAAD,OAAW,EAAKX,MAAMkB,WAAW,EAAKlB,MAAMS,WAGzD,6BAAMV,KAAKC,MAAMmB,gC,GAnBLC,IAAMC,WAwB1BxB,EAAQ,CACRyB,WAAY,QACZC,OAAQ,kBACRlB,QAAS,OAEEV,I,MCrBf,I,iCCLM6B,EAAiB,IAAIC,IAAKC,KAChCF,EAAeG,UAAU,IACzB,IAAMC,EAAkB,IAAIH,IAAKC,KACjCE,EAAgBD,UAAU,IAE1B,IAOME,EAAc,CAClBC,KAAM,CACJC,MAAO,SAETC,QAAS,CACPD,MAAO,SACPE,UAZsB,IAcxBC,MAAO,CACLH,MAAO,MACPE,UAfoB,IAqBpBE,EAAa,EACbC,EAFe,GAGfC,EAAiBC,MAAM,GAAGC,KAAK,MAC/BC,EAAqBX,EAAYC,KAAKC,MACtCU,EAAuB,EACvBC,EAAsB,EACtBC,EAAa,EACbC,EAAsB,KAyB1B,SAASC,EAAWC,GAElBC,QAAQC,IAAI,cAAgBF,GAE5BX,EAAa,EACbC,EAtCiB,GAuCjBK,EAAuB,EASzB,SAASQ,EAAUC,GACjBH,QAAQC,IAAI,mBAAqBE,GACjCC,cAAcd,EAAca,IAG9B,SAAShC,EAAWgC,GAChBb,EAAca,GAAaE,aAAY,WACpCC,SAASC,eAAe,mBAAqBJ,IAS3Cd,EAAW,IAEZD,EAAaA,GAAc,EAC3BC,EAnEW,GAmEaD,GAIrBC,GAAY,IACbiB,SAASC,eAAe,mBAAqBJ,GAAWK,UAAYC,EAClEpB,IAuEZ,SAA4Bc,GAC1B,IAAMO,EAAe,WAvKC,IAiKxB,WACE,IAAMC,EAAkBtB,EA5IP,GA6IjB,OAAOsB,EAAmB,EA7IT,IA6I4B,EAAIA,GAK/CC,IACAC,QAAQ,GAFW,QAGrBP,SACGC,eAAe,4BAA8BJ,GAC7CW,aAAa,mBAAoBJ,GA1E9BK,CAAmBZ,GA4C3B,SAA+Bd,EAASc,GAAY,IAC1ChB,EAAyBL,EAAzBK,MAAOF,EAAkBH,EAAlBG,QAASF,EAASD,EAATC,KACpBM,GAAYF,EAAMD,WACpBoB,SACGC,eAAe,4BAA8BJ,GAC7Ca,UAAUC,OAAOhC,EAAQD,OAC5BsB,SACGC,eAAe,4BAA8BJ,GAC7Ca,UAAUE,IAAI/B,EAAMH,QACdK,GAAYJ,EAAQC,YAC7BoB,SACGC,eAAe,4BAA8BJ,GAC7Ca,UAAUC,OAAOlC,EAAKC,OACzBsB,SACGC,eAAe,4BAA8BJ,GAC7Ca,UAAUE,IAAIjC,EAAQD,QA1DrBmC,CAAsB9B,EAASc,GAEf,IAAbd,GAAiC,IAAfO,IAEnBT,MAAM,wHACNE,GAAY,EACZa,EAAUC,IAGK,IAAbd,GAAiC,IAAfO,IACpBM,EAAUC,GACgB,MAAvBN,QAAsDuB,GAAvBvB,GAChB,MAAbM,QAAkCiB,GAAbjB,IAExBN,EAAoBM,GACcA,EAElCL,EAAW,yBAA2BK,EAAY,mBAAqBT,EAAuB,eAAiBC,KAGlG,KAAbN,GAAiBZ,EAAe4C,OACnB,IAAbhC,GAAgBR,EAAgBwC,SAKtCvB,EAAW,gCAAkCK,GAC7CD,EAAUC,MAEX,KAGL,SAASM,EAAWa,GAClB,IAAMC,EAAUC,KAAKC,MAAMH,EAAO,IAC9BI,EAAUJ,EAAO,GAMrB,OAJII,EAAU,KACZA,EAAO,WAAOA,IAGV,GAAN,OAAUH,EAAV,YAAqBG,G,IAuGRC,E,uKAzDT,GAJA/B,EAAa5C,KAAKC,MAAM2C,WACxBD,EAAsB3C,KAAKC,MAAM0C,oBAG9BD,EAAuBC,GAKrB3C,KAAKC,MAAMkD,WAAanD,KAAKC,MAAM2E,wBAAwB,CAE5D1B,EAAUlD,KAAKC,MAAMkD,WAGrB,IAAI0B,EAAOlC,EAAsBD,EACjCN,GAAe,GAAKyC,EACpBnC,GAAwBmC,EACxB7B,QAAQC,IAAI,wBAA0BP,GACtCvB,EAAWnB,KAAKC,MAAMkD,WApKhC,IAAcA,EAoMN,OAxBmC,MAAlCnD,KAAKC,MAAM6E,iBAAiB,IAG7BhC,EAAW,SAGbD,EAAsB7C,KAAKC,MAAM8E,YAlNN,GAsNtB/E,KAAKC,MAAM6E,iBAAiB9E,KAAKC,MAAMkD,UAAY,KAtLhDA,EAwLGnD,KAAKC,MAAMkD,UArLpBb,EAAiBC,MAAM,GAAGC,KAAK,MAE/BU,EAAUC,GAOVb,EAAca,GAAa,KAC3BV,EAAqBX,EAAYC,KAAKC,MAEtCgB,QAAQC,IAAI,gBAAkBE,GAC9BG,SAASC,eAAe,cAAgBJ,GAAWK,UAAY,2QAA2QL,EAAU,yEAAyEV,EAAmB,2JAA2JU,EAAU,+BAA+BM,EAAWpB,GAAU,gBACzoBlB,EAAWgC,GA0KPnD,KAAKC,MAAM6E,iBAAiB9E,KAAKC,MAAMkD,UAAY,GA1N5B,GA8NxBnD,KAAKC,MAAM+E,WAEV9B,EAAUlD,KAAKC,MAAMkD,WAIrB,yBAAK8B,GAAI,cAAgBjF,KAAKC,MAAMkD,UAAWrD,MAAOE,KAAKC,MAAMH,U,mDAzDnDuB,IAAMC,W,QCjL1B4D,E,uKAGO,IAAD,OACAC,EAAOnF,KAAKC,MAAMkF,KAClBC,EAAcD,EAAKE,QAEnBC,GADYtF,KAAKC,MAAMsF,UACIvF,KAAKC,MAAMuF,sBAAwBJ,GAC9DK,EAA0BzF,KAAKC,MAAMyF,qBAAuBN,EAC5DO,EAAyB3F,KAAKC,MAAM2F,oBAAsBR,EAC1DS,EAA0B7F,KAAKC,MAAM6F,qBAAuBV,EAG5DW,EAAyBT,EAA2B,iBAAmB,GAGvEpF,EAAwBF,KAAKC,MAAM2E,yBAA2BQ,EAC9DY,EAAiB9F,EAAwB,YAAc,YACvD+F,EAA4D,MAA9CjG,KAAKC,MAAMiG,gCACzBC,EASJ,SAA8BC,EAAkBF,EAAiCb,GAE7E,GAAuB,MAApBe,EAGC,OAAsC,MAAnCF,GAA2Cb,GAAWa,EAC9C,GAEH,OAEZ,MAAO,GAnBQG,CAAqBrG,KAAKC,MAAM6E,iBAAiBK,EAAKE,QAAU,GAAGrF,KAAKC,MAAMiG,gCAAiCf,EAAKE,SAKnIiB,EAAqBP,GAHKN,IAA4BH,EAA2B,kBAAoB,MAC5EK,GAA2BL,GAA6BG,EAA6C,GAAnB,oBACjFI,GAA4BP,GAA6BG,GAA4BE,EAA8C,GAArB,oBAGxIY,EAAqBvG,KAAKC,MAAM2E,yBAA2BQ,EAAc,4BAA8BkB,EAAqB,+BAAiCA,EAgBjK,OAEA,yBAAKzG,UAAW0G,GACZ,yBAAKzG,MAAO0G,GACPrB,EAAKE,SAEiB,IAA1BrF,KAAKC,MAAM2C,WA+CxB,SAAmB6D,EAAiBC,GAEpC,GAAuB,IAApBD,EACH,OACI,kBAACE,EAAA,EAAD,CAAOC,QAAQ,WAAf,OAA8BF,EAA9B,4UAGQ,6BAHR,gBAIqB,sCAJrB,KAOJ,GAAuB,IAApBD,EACH,OACI,kBAACE,EAAA,EAAD,CAAOC,QAAQ,WAAf,mLAEA,6BAFA,gBAGa,uCAHb,KAMJ,GAAuB,IAApBH,EACH,OACI,kBAACE,EAAA,EAAD,CAAOC,QAAQ,WAAf,mHACoD,+CAC5C,6BAFR,gBAGqB,uCAHrB,KAMJ,GAAuB,IAApBH,EACH,OACI,kBAACE,EAAA,EAAD,CAAOC,QAAQ,WAAf,0KAGA,6BAHA,gBAIa,wCAJb,KAOJ,GAAuB,IAApBH,EACH,OACI,kBAACE,EAAA,EAAD,CAAOC,QAAQ,WAAf,0HAEA,6BAFA,gBAGa,wCAHb,KAMJ,GAAuB,IAApBH,EACH,OACI,kBAACE,EAAA,EAAD,CAAOC,QAAQ,WAAf,sGAEA,6BAFA,gBAGa,wCAHb,KAMJ,GAAuB,IAApBH,EACH,OACI,kBAACE,EAAA,EAAD,CAAOC,QAAQ,WAAf,oKAEA,6BAFA,gBAGa,yCAHb,KAGqC,6BAHrC,8FArGuCC,CAAU1B,EAAKE,QAASrF,KAAKC,MAAMyG,YAAc,GAEhF,yBAAK5G,MAAOgH,EAAaC,KAAM,eAAiB5B,EAAKE,SACjD,yBAAKvF,MAAOkH,GA4G5B,SAAmB7B,EAAM8B,EAAU7F,EAA2BlB,EAAuBiB,EAAY2E,EAAqBlB,GAIlH,GAFsCA,GAA2BkB,GAE3BA,EAAsB,GAAKX,EAAKE,QAAUS,EAE5E,OACI,yBAAKjG,UAAU,YAAYC,MAAOA,GAC9B,kCAAO,2BAAOD,UAAU,aAAasF,EAAK+B,UAA1C,KAEA,kBAAC,EAAD,CACIhH,sBAAuBA,EACvBW,gBAAiBoG,EACjBvG,OAAQyE,EAAKE,QACbjE,0BAA2BA,EAC3BD,WAAYA,KAO5B,OACI,yBAAKtB,UAAU,YAAYC,MAAOA,GAC9B,2BAAOD,UAAU,kBAAkBsF,EAAK+B,UAExC,kBAAC,EAAD,CACIhH,sBAAuBA,EACvBW,gBAAiBoG,EACjBvG,OAAQyE,EAAKE,QACbjE,0BAA2BA,EAC3BD,WAAYA,KA1IPgG,CAAUhC,EAAMnF,KAAKC,MAAMY,gBAAiBb,KAAKC,MAAMmH,2BAA2BjC,EAAKE,QAAQ,GAAInF,EAAuBF,KAAKC,MAAMkB,WAAYnB,KAAKC,MAAM6F,oBAAqB9F,KAAKC,MAAM2E,0BAEjM,kBAAC,EAAD,CACIE,iBAAkB9E,KAAKC,MAAM6E,iBAC7BhF,MAAOE,KAAKC,MAAMiG,iCAAmCf,EAAKE,QAAUgC,EAAcL,EAClF7D,UAAWgC,EAAKE,QAChBL,UAAWG,EAAKE,QAAUrF,KAAKC,MAAM2E,yBAA2B5E,KAAKC,MAAMqH,kBAAoBtH,KAAKC,MAAMiG,iCAAmCf,EAAKE,QAClJ1C,oBAAqB3C,KAAKC,MAAM0C,oBAChCiC,wBAAyB5E,KAAKC,MAAM2E,wBACpCG,YAAa/E,KAAKC,MAAM8E,YACxBrC,qBAAsB1C,KAAKC,MAAMyC,qBACjCE,WAAY5C,KAAKC,MAAM2C,aAE3B,yBAAK9C,MAAK,2BAAMkH,GAAa,CAACO,SAAS,aAAc1H,UAAWmG,GAC5D,0BAAMlG,MAAK,2BAAM0H,GAAkB,CAACC,QAAQtB,KAAiC,GAAhBhB,EAAKE,SAAiBY,EAA+B,GAAjB,gBACjG,0BAAMnG,MAAK,2BAAM0H,GAAkB,CAACC,QAAQtB,EAAcuB,gBAAgB,wBAAyB1F,MAAO,MAAO2F,WAAY,OAAQC,IAAM,OAAQ3B,EAAc,kCAAoC,IACrM,yBAAK4B,IAAI,oBAAoBzH,OAAO,OAAON,MAAK,2BAAMmG,EAAc6B,EAAiBC,GAAmB,CAACN,QAAQtB,EAAa6B,cAAc,SAAUC,QAAS,SAACrH,GAAD,OAAW,EAAKX,MAAMiI,aAAa/C,EAAKE,aAG3M,yBAAKvF,MAAOqI,GACR,yBAAKrI,MAAOsI,GACR,4BAAQrI,UAAWG,EAAuBL,UAAU,SAASC,MAAO,CAAC4H,gBAAgB,SAAUjH,SAAU0E,EAAKE,QAAU,IAAM4C,QAAS,SAACrH,GAAD,OAAW,EAAKX,MAAMgI,QAAQ9C,EAAKE,WACrJ,GAAhBF,EAAKE,QAAe,YAAc,oBAG3C,yBAAKvF,MAAOsI,GACR,4BAAQrI,UAAWG,EAAwBL,UAAU,SAASC,MAAO,CAAC4H,gBAAgB,gBAAiBO,QAAS,SAACrH,GAAD,OAAY,EAAKX,MAAMoI,iBAAiBlD,EAAKE,WAA7J,cAIJ,yBAAKvF,MAAOsI,GACR,4BAAQrI,UAAWG,GA3CF,EA2CuDF,KAAKC,MAAM0C,oBAAuB,GAAK8C,EAAyB5F,UAAU,SAASoI,QAAS,SAACrH,GAAD,OAAW,EAAKX,MAAMqI,cAAcnD,EAAKE,WAA7M,WACgB,kCADhB,WAGA,0BAAMvF,MAAOyI,GAAb,IAA4B,kCAA5B,cA9CiB,EA8C+DvI,KAAKC,MAAM0C,6B,GAtF3FtB,IAAMC,WAoM9B,IAOIyG,EAAiB,CACjBN,QAAS,QACTjG,OAAQ,OACRgH,UAAW,gBAEXV,EAAgB,CAChBL,QAAS,QACTjG,OAAQ,OACRgH,UAAW,iBACXC,OAAQ,gBAERjB,EAAe,CACfD,SAAU,WACVmB,KAAM,IACNC,MAAO,IACPC,OAAQ,MAER9I,EAAQ,CACRyB,WAAY,gBAEZjB,QAAS,OACTuI,cAAe,SACfnB,gBAAiB,yBAEjBlB,EAAa,CACbkB,gBAAiB,YACjB1F,MAAO,QACPT,WAAY,gBACZmH,KAAM,OACNvI,MAAO,OACP2I,UAAW,UAYThC,EAAc,CAChBW,QAAS,eACTtH,MAAO,QAGPiI,EAAgB,CAChB9H,QAAS,OAGP6H,EAAa,CACfY,MAAO,QACP5I,MAAO,MACP2I,UAAW,UAQT9B,EAAY,CACd+B,MAAO,OACP5I,MAAO,OAGLoI,EAAa,CACfd,QAAS,SAGPJ,EAAa,CACbI,QAAS,QAGAvC,I,iBC5RM8D,E,uKAGjB,OACC,kBAAC,IAAD,CACGzI,KAAK,YACLyB,MAAM,UACN5B,OAAQ,IACRD,MAAO,IACP8I,QAAS,Q,GAToB5H,IAAMC,WCArC4H,E,uKAIL,IAAD,OAEI,OAA0B,MAAvBlJ,KAAKC,MAAMkJ,UAA2C,IAAvBnJ,KAAKC,MAAMkJ,SAGrC,yBAAKtJ,UAAU,YACX,2BAAOC,MAAOA,GAAd,qBAAuC,0BAAMA,MAAOsJ,GAAYpJ,KAAKC,MAAMkJ,UAA3E,8BAMR,yBAAKtJ,UAAU,YACX,2BAAQC,MAAOA,GAAf,6BACA,2BAAOU,UAAU,KAAKD,KAAK,OAAOE,SAAU,IAAKE,QAAS,SAACC,GAAD,OAAW,EAAKX,MAAMoJ,eAAezI,EAAME,OAAOC,MAAOH,EAAMI,MAAMC,OAAQ,SAACL,GAAD,OAAW,EAAKX,MAAMoJ,eAAezI,EAAME,OAAOC,MAAO,UAAUuI,YAAY,wBACtN,2BAAQxJ,MAAOA,GAAf,+CACA,6BACA,6BACA,uBAAGyJ,KAAK,IAAIzJ,MAAO,CAACkC,MAAM,cAA1B,wC,GAtBWX,IAAMC,WA2BzBxB,EAAQ,CACRyB,WAAY,mCACZC,OAAQ,kBACRlB,QAAS,MACTD,SAAU,UAER+I,EAAY,CACdpH,MAAO,SACP3B,SAAU,WAEC6I,K,6EC/BTM,GAAe,IAAI9H,IAAK+H,MAC9BD,GAAa5H,UAAU,IACvB,IAAM8H,GAAW,IAAIhI,IAAKiI,MAC1BD,GAAS9H,UAAU,I,IA0BbgI,G,kDACF,aAAgB,IAAD,8BACb,gBACKC,MAAQ,GAFA,E,qDAWb,GAA2B,GAAxB7J,KAAKC,MAAM6J,UAEZ,MAAO,GAGT,GAA+B,MAA5B9J,KAAKC,MAAM8J,cACd,CAEE,IADA,IAAMC,EAAkB,GACfC,EAAQ,EAAGA,EAAQjK,KAAKC,MAAM8J,cAAcG,OAAQD,IAAS,CACpE,IAAME,EAAUnK,KAAKC,MAAM8J,cAAcE,GACzCD,EAAgBI,KAChB,wBAAIpJ,IAAKmJ,EAAQzD,YACf,4BAAKyD,EAAQzD,YACb,4BAAKyD,EAAQE,aACb,4BAAKF,EAAQG,cACb,4BAAgE,KAA1DH,EAAQI,cAAgBJ,EAAQE,aAAaxG,QAAQ,GAA3D,KACA,6BAAMsG,EAAQK,gBAAkBL,EAAQE,aAAaxG,QAAQ,IAC7D,gCAAMsG,EAAQM,qBAAd,KACA,4BAAKN,EAAQO,eACb,4BAAKP,EAAQQ,eACb,gCAAMR,EAAQS,YAAd,OAIJ,OACE,kBAAC,KAAD,CACAC,OAAQ7K,KAAKC,MAAM6J,UACnBgB,aAAa,wBACbC,WAAYzH,SAASC,eAAe,SAElC,6BACE,0BAAM0B,GAAG,kBAAkBpF,UAAU,cAAa,uBAAG0J,KAAK,IAAItB,QAAS,kBAjErE3E,SAASC,eAAe,kBAC9BzD,MAAM2H,QAAU,QAETnE,SAASC,eAAe,YAC9BzD,MAAM2H,QAAU,OAEzBnE,SAASC,eAAe,aAAa1D,UAAY,mBACjDyD,SAASC,eAAe,mBAAmB1D,UAAY,gBA0DO,gBAClD,qCACA,0BAAMoF,GAAG,YAAYpF,UAAU,eAAc,uBAAG0J,KAAK,IAAItB,QAAS,kBAvDhE3E,SAASC,eAAe,kBAC9BzD,MAAM2H,QAAU,OAETnE,SAASC,eAAe,YAC9BzD,MAAM2H,QAAU,QAEzBnE,SAASC,eAAe,aAAa1D,UAAY,kBACjDyD,SAASC,eAAe,mBAAmB1D,UAAY,iBAgDE,WAE/C,yBAAKoF,GAAG,kBACN,+BACI,+BACE,4BACE,wBAAI+F,WAAU,OAAd,eACA,wBAAIA,WAAU,0BAAd,iBACA,wBAAIA,WAAU,4BAAd,mBACA,wBAAIA,WAAU,mCAAd,oBACA,wBAAIA,WAAU,iCAAd,mBACA,wBAAIA,WAAU,2BAAd,uBACA,wBAAIA,WAAU,oCAAd,kBACA,wBAAIA,WAAU,oCAAd,kBACA,wBAAIA,WAAU,gBAAd,kBAGN,+BACGhB,KAIP,yBAAK/E,GAAG,WAAWnF,MAAO,CAAC2H,QAAQ,SACjC,mDADF,kJAGE,6BAHF,oFAKE,6BAAK,6BALP,6HAOE,6BAAK,6BAPP,oIAQmI,6BARnI,mDAUE,6BAAK,6BAVP,6EAW4E,0BAAM3H,MAAOmL,IAAb,QAX5E,qCAWgJ,6BAXhJ,8IAaE,6BAAK,6BACL,0BAAMnL,MAAgBoL,IAAtB,WAdF,+EAeE,6BAAK,6BACL,0BAAMpL,MAAgBqL,IAAtB,UAhBF,4IAiBE,6BAAK,6BACL,0BAAMrL,MAAOmL,IAAb,UAlBF,oGAmBE,6BAAK,6BAnBP,8FAsBE,4BACE,qHACA,iEACA,qEACA,0DACA,8EA3BJ,2DA8BE,6BAAK,8BAEP,4BAAQhD,QAASjI,KAAKC,MAAMmL,aAAcvL,UAAU,SAASkB,MAAM,UAAnE,eACA,kBAAC,KAAD,OAKN,GAA2B,MAAxBf,KAAKC,MAAMoL,WAAiD,MAA5BrL,KAAKC,MAAM8J,cAE5C,OACM,kBAAC,KAAD,CACAc,OAAQ7K,KAAKC,MAAM6J,UACnBgB,aAAa,wBACbC,WAAYzH,SAASC,eAAe,SAEpC,yBAAKzD,MAAOwL,IAAc,kBAAC,EAAD,QAKlC,GAAGtL,KAAKC,MAAMsL,OAGZ,OADA7B,GAASrF,OAEH,kBAAC,KAAD,CACAwG,OAAQ7K,KAAKC,MAAM6J,UACnBgB,aAAa,wBACbC,WAAYzH,SAASC,eAAe,QACpCzD,MAAO,CACL0L,QAAS,CACPxJ,MAAO,MACNyJ,gBAAiB,2BACjBC,eAAgB,QAChBC,mBAAoB,SACrBjE,gBAAiB,QACjBkE,SAAU,SACVnD,OAAQ,uCAOZ,0BAAM5I,UAAU,YAAhB,gDAC+C,0BAAMC,MAAO+L,IAAc7L,KAAKC,MAAMoL,UAAUS,iBAC7F,6BAFF,wBAGwB,IAAK9L,KAAKC,MAAMoL,UAAUS,gBAAkB,IAHpE,KAIGC,EAAgB/L,KAAKC,MAAMoL,UAAUW,gBACtC,4BAAQ/D,QAASjI,KAAKC,MAAMmL,aAAcvL,UAAU,SAASkB,MAAM,UAAnE,iBAQV,IAFA,IA4HgCkL,EA5H1BC,EAAkB,GAEfjC,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CACtC,IAAME,EAAUnK,KAAKC,MAAMoL,UAAUc,WAAWlC,GAChDiC,EAAgB9B,KAChB,4BACE,4BAAKpK,KAAKC,MAAMmM,YAAYnC,IAC5B,4BAAKE,EAAQkC,aAAa,GAAK,EAAIC,IAAiBC,EAAUtC,EAAO,IACrE,4BAAKE,EAAQkC,aAAa,GAAK,EAAIC,IAAiBC,EAAUtC,EAAO,IACrE,4BAAKE,EAAQkC,aAAa,GAAK,EAAIC,IAAiBC,EAAUtC,EAAO,IACrE,4BAAKE,EAAQkC,aAAa,GAAK,EAAIC,IAAiBC,EAAUtC,EAAO,IACrE,4BAAKE,EAAQkC,aAAa,GAAK,EAAIC,IAAiBC,EAAUtC,EAAO,IACrE,4BAAKE,EAAQkC,aAAa,GAAK,EAAIC,IAAiBC,EAAUtC,EAAO,IACrE,4BAAK,SAIT,OACE,6BAEE,kBAAC,KAAD,CACGY,OAAQ7K,KAAKC,MAAM6J,UACnBgB,aAAa,wBACbC,WAAYzH,SAASC,eAAe,QACpCzD,MAAO,CACN0L,QAAS,CACPxJ,MAAO,WACP0F,gBAAiB,YACjBkE,SAAU,SACVnD,OAAQ,uCAK2B,MAAtCzI,KAAKC,MAAMoL,UAAUmB,eAA+D,GAAtCxM,KAAKC,MAAMoL,UAAUmB,eA2CxEhD,GAAanF,OAEX,yBAAKvE,MAAO2M,IACV,0BAAM3M,MAAOqL,IAAb,OAA6B,0BAAMrL,MAAO4M,IAAb,QAAgC,0BAAM5M,MAAO6M,IAAb,QAAgC,0BAAM7M,MAAOoL,IAAb,UAC7F,0BAAMpL,MAAO8M,IAAb,SACA,0BAAM9M,MAAO4M,IAAb,MACA,0BAAM5M,MAAO6M,IAAb,cACA,0BAAM7M,MAAOoL,IAAb,YAlDyG,GACzG,6BAfF,OAgB6C,MAAtClL,KAAKC,MAAMoL,UAAUd,eAA+D,GAAtCvK,KAAKC,MAAMoL,UAAUd,cAAqB,sBAAwB,sBAhBvH,wBAgBmK,0BAAMzK,MAAO+L,IAAc7L,KAAKC,MAAMoL,UAAUS,iBACjN,6BAjBF,iCAkBgC,0BAAMhM,MAAO+L,IAAc7L,KAAKC,MAAM4M,mBACpE,6BAnBF,qBAwG4BZ,EApFejM,KAAKC,MAAMoL,UAAUY,gBAuFhE,0BAAMnM,MAAO+L,IAAcI,EAAgB,GAAGtB,cAA9C,8BAtFE,6BArBF,gBAsBe,0BAAM7K,MAAO+L,IAAb,IAA4B7L,KAAKC,MAAMoL,UAAUyB,WAAjD,KACb,6BAvBF,kBAwBkB9M,KAAKC,MAAMoL,UAAUS,gBAxBvC,KAyBGC,EAAgB/L,KAAKC,MAAMoL,UAAUW,gBACtC,6BA1BF,oCA4BE,6BACA,0BAAMlM,MAAOiN,IAAb,0DACA,+BACI,+BACE,4BACE,6BACA,wBAAI/B,WAAU,IAAMhL,KAAKC,MAAM+M,MAAM,GAAG9F,SAAW,KAAnD,UACA,wBAAI8D,WAAU,IAAMhL,KAAKC,MAAM+M,MAAM,GAAG9F,SAAW,KAAnD,UACA,wBAAI8D,WAAU,IAAMhL,KAAKC,MAAM+M,MAAM,GAAG9F,SAAW,KAAnD,UACA,wBAAI8D,WAAU,IAAMhL,KAAKC,MAAM+M,MAAM,GAAG9F,SAAW,KAAnD,UACA,wBAAI8D,WAAU,IAAMhL,KAAKC,MAAM+M,MAAM,GAAG9F,SAAW,KAAnD,UACA,wBAAI8D,WAAU,IAAMhL,KAAKC,MAAM+M,MAAM,GAAG9F,SAAW,KAAnD,UACA,wBAAI8D,WAAU,IAAMhL,KAAKC,MAAM+M,MAAM,GAAG9F,SAAW,KAAnD,YAGN,+BACGgF,IAGL,6BAEA,4BAAQjE,QAASjI,KAAKC,MAAMmL,aAAcvL,UAAU,SAASkB,MAAM,UAAnE,eACA,kBAAC,KAAD,QAmBN,SAASuL,IAEP,OACI,yBAAKzE,IAAI,mBAAmB1H,MAAM,OAAOC,OAAO,OAAO6M,IAAI,iBAIjE,SAASV,EAAUW,EAAYC,GAI7B,OADsBC,SAASD,IAAcC,SAASF,GASlD,yBAAKrF,IAAI,oBAAoB1H,MAAM,OAAOC,OAAO,OAAO6M,IAAI,oBALvD,MAUX,SAASlB,EAAgBsB,GAGvB,OACE,4BACA,4BAAoB,MAAfA,EAAS,SAA6BjJ,GAAfiJ,EAAS,GAAkBA,EAAS,GAAG3G,WAAa,gBAAgB,0BAAM5G,MAAO+L,IAA6B,MAAfwB,EAAS,SAA6BjJ,GAAfiJ,EAAS,GAAkB,OAASA,EAAS,GAAGzC,YAAc,IAAM,KACtN,4BAAoB,MAAfyC,EAAS,SAA6BjJ,GAAfiJ,EAAS,GAAkBA,EAAS,GAAG3G,WAAa,gBAAgB,0BAAM5G,MAAO+L,IAA6B,MAAfwB,EAAS,SAA6BjJ,GAAfiJ,EAAS,GAAmB,OAASA,EAAS,GAAGzC,YAAc,IAAM,KACvN,4BAAoB,MAAfyC,EAAS,SAA6BjJ,GAAfiJ,EAAS,GAAkBA,EAAS,GAAG3G,WAAa,gBAAgB,0BAAM5G,MAAO+L,IAA6B,MAAfwB,EAAS,SAA6BjJ,GAAfiJ,EAAS,GAAkB,OAASA,EAAS,GAAGzC,YAAc,IAAM,W,GAhRrMvJ,IAAMC,WA8R7ByL,GAAc,CAChB1M,SAAU,WAGR4K,GAAW,CACbtD,WAAY,QAGV8E,GAAa,CACfpM,SAAU,UAGNwL,GAAc,CAChB7J,MAAO,QACPT,WAAY,QACZlB,SAAU,SACVyI,UAAW,QAGToC,GAAM,CACRlJ,MAAO,OAEL2K,GAAS,CACX3K,MAAO,UAEL4K,GAAQ,CACV5K,MAAO,SAEL0K,GAAS,CACX1K,MAAO,UAELmJ,GAAO,CACTnJ,MAAO,QAGLsJ,GAAe,CACjB9J,OAAQ,UAGKoI,M,gKC1VX0D,GAAY,IAAI5L,IAAK6L,MAC3BD,GAAU1L,UAAU,IACpB,IAAM4L,GAAa,IAAI9L,IAAK+L,MAC5BD,GAAW5L,UAAU,IACrB,IAAM8L,GAAgB,IAAIhM,IAAKiM,MAC/BD,GAAc9L,UAAU,GACxB,IAAMgM,GAAY,IAAIlM,IAAKmM,MAC3BD,GAAUhM,UAAU,IACpB,IAAMkM,GAAgB,IAAIpM,IAAKqM,MAC/BD,GAAclM,UAAU,IACxB,IAAMoM,GAAY,IAAItM,IAAKuM,MAC3BD,GAAUpM,UAAU,IACpB,IAAMsM,GAAa,IAAIxM,IAAKyM,MAC5BD,GAAWtM,UAAU,IACrB,IAAMwM,GAAc,IAAI1M,IAAK2M,MAG7B,SAASC,GAAaC,EAAKC,GACzB,IAAIC,EAAMjK,KAAKC,MAAMD,KAAKkK,SAAWlK,KAAKC,MAAM+J,IAGhD,OAFAxL,QAAQC,IAAI,iBAAmBsL,EAAM,QAAUC,GAC/CxL,QAAQC,IAAI,QAAUwL,GACnBA,GAAOF,GAAOE,GAAOD,EAEfC,EAEF,EAVTL,GAAYxM,UAAU,I,IAahB+M,G,kDAIF,WAAY1O,GAAQ,IAAD,8BACf,cAAMA,IAHV2O,iBAAmB,kBAEA,EA2HnBC,qBAAuB,WAEb,EAAKC,SAAS,CAACC,cAAc,IAC7B,IAAIC,EAAWzM,MAAM,GAAGC,KAAK,MAC7BwM,EAAW,EAAKnF,MAAMmD,MAAMA,MAAMiC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,uBAEnD,IAAMC,EAAW,IAAIC,SAErBD,EAASE,OAAO,OAAQ,EAAKzF,MAAMmD,MAAMuC,MACzCH,EAASE,OAAO,WAAY,EAAKzF,MAAMV,UAEvCiG,EAASE,OAAO,iBAAgD,MAA7B,EAAKzF,MAAMuC,YAAY,GAAa,EAAKvC,MAAMuC,YAAY,GAAK,YACnGgD,EAASE,OAAO,iBAAgD,MAA7B,EAAKzF,MAAMuC,YAAY,GAAa,EAAKvC,MAAMuC,YAAY,GAAK,YACnGgD,EAASE,OAAO,iBAAgD,MAA7B,EAAKzF,MAAMuC,YAAY,GAAa,EAAKvC,MAAMuC,YAAY,GAAK,YACnGgD,EAASE,OAAO,iBAAgD,MAA7B,EAAKzF,MAAMuC,YAAY,GAAa,EAAKvC,MAAMuC,YAAY,GAAK,YACnGgD,EAASE,OAAO,iBAAgD,MAA7B,EAAKzF,MAAMuC,YAAY,GAAa,EAAKvC,MAAMuC,YAAY,GAAK,YACnGgD,EAASE,OAAO,iBAAgD,MAA7B,EAAKzF,MAAMuC,YAAY,GAAa,EAAKvC,MAAMuC,YAAY,GAAK,YACnGgD,EAASE,OAAO,iBAAgD,MAA7B,EAAKzF,MAAMuC,YAAY,GAAa,EAAKvC,MAAMuC,YAAY,GAAK,YACnGgD,EAASE,OAAO,cAAeN,EAAS,IACxCI,EAASE,OAAO,cAAeN,EAAS,IACxCI,EAASE,OAAO,cAAeN,EAAS,IACxCI,EAASE,OAAO,cAAeN,EAAS,IACxCI,EAASE,OAAO,cAAeN,EAAS,IACxCI,EAASE,OAAO,cAAeN,EAAS,IACxCI,EAASE,OAAO,cAAeN,EAAS,IACxCI,EAASE,OAAO,aAAc,EAAKzF,MAAMlH,qBACzCyM,EAASE,OAAO,SAAwD,MAA9C,EAAKzF,MAAM3D,iCAGrCsJ,MAAM,UAAY,EAAKZ,iBAAmB,6BAA8B,CAClEa,OAAQ,OACRC,KAAMN,IAEPO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEJ,EAAKhB,SAAS,CAACC,cAAc,EAAO1D,UAAWyE,QA/J5C,EAqKnB1E,aAAe,WACb9H,SAASoM,KAAKK,UAAY,EAC1BzM,SAAS0M,gBAAgBD,UAAY,EACrC,EAAKE,oBACL,EAAKC,gBAzKY,EA6KnBC,gBAAkB,WAChB7C,GAAUjJ,QA9KO,EAiLnB+L,qBAAuB,SAAC3J,GACtB,EAAKqI,SAAS,CAACxH,kBAAkB,IACjC,EAAKwH,SAAS,CAAChF,WAAW,IAC1B,EAAK+E,wBApLY,EAuLnBwB,yBAA2B,SAAC5J,GAExBzD,QAAQC,IAAI,EAAK4G,MAAMjE,oBACc,MAAlC,EAAKiE,MAAM/E,iBAAiB,GAE7B3C,MAAM,wDAE8C,MAA9C,EAAK0H,MAAM3D,iCAEjB,EAAK4I,SAAS,CAAChF,WAAW,IAC1B,EAAK+E,wBAIL,EAAKyB,UAAU7J,EAAiB,EAAKoD,MAAMuC,YAAY3F,EAAgB,KArM1D,EA2MjB8J,iBAAmB,SAAC9J,GAClB,EAAK+J,oBAAoB/J,IA5MV,EAiNjBtF,WAAa,SAACsF,GACS,IAAlBA,GAAiD,GAA1B,EAAKoD,MAAM4G,aACnC,EAAKD,oBAAoB/J,IAnNZ,EAsOjBiK,kBAAoB,SAACjK,GACnBmH,GAAUvJ,OAEV,IAAIsM,EAAyB,EAAK9G,MAAMlH,oBAAsB,EAC9D,EAAKmM,SAAS,CAACnM,oBAAqBgO,KA1OrB,EA8OjBC,sBAAwB,SAACrL,EAAUsL,EAAG7P,GACpCgC,QAAQC,IAAI,YAAcjC,GAE1B,IAAM8P,EAAkB,EAAKjH,MAAMuC,YAAY2E,QAC/CD,EAAgBD,EAAE,GAAKtL,EAAUyL,OAAOC,cACxC,EAAKnC,SAAS,CAAC1C,YAAa0E,IAElB,SAAP9P,GAGD,EAAKqP,yBAAyBQ,IAxPjB,EA4PlBK,oBAAsB,SAACC,EAAenQ,GAE1B,SAAPA,GAAkBmQ,EAAcH,OAAO9G,OAAS,IAElD,EAAK4E,SAAS,CAAC3F,SAAUgI,IACzB,EAAKjB,aAAaiB,EAAcH,UAjQjB,EA2RlBI,uBAAyB,WACxB,EAAKtC,SAAS,CAAChF,WAAW,IAEtB0F,MAAM,UAAY,EAAKZ,iBAAmB,0BACzCe,MAAK,SAAA0B,GAAG,OAAIA,EAAIxB,UAChBF,MAAK,SAACG,GACL,EAAKhB,SAAS,CAAE/E,cAAe+F,OAElCwB,MAAMtO,QAAQC,MAnSA,EAsSlBsO,oBAAsB,WACrB,EAAKzC,SAAS,CAAChF,WAAW,EAAO0H,cAAe,KAvS/B,EA0SlBC,kBAAoB,SAACZ,GAClB,EAAK/B,SAAS,CAAC5I,gCAAiC2K,KAzShD,EAAKhH,MAAQ,CACXuC,YAAa7J,MAAM,GAAGC,KAAK,MAC3BkP,aAAc,EACd/O,oBAAqB,EACrBD,qBAAsB,EACtBoC,iBAAkBvC,MAAM,GAAGC,KAAK,MAChCwK,MAAO,KACP9G,gCAAiC,KACjCyL,eAAe,EACfvK,2BAA4B7E,MAAM,GAAGC,KAAK,MAC1C2G,SAAU,GACVW,WAAW,EACX8H,2BAA2B,EAC3BvG,UAAW,KACX0D,cAAc,EACdzH,kBAAkB,EAClByC,cAAe,KACfvE,qBAAsB,KACtBE,oBAAqB4I,GAAa,EAAE,GACpCxI,oBAAqBwI,GAAa,EAAE,GACpC1I,mBAAoB0I,GAAa,EAAE,GACnCmC,YAAa,EACb7N,WAAY,GAxBC,E,+DA4BC6D,EAAiBoL,GACnC,IAAMC,EAAiC9R,KAAK6J,MAAMzC,2BAA2B2J,QAC7Ee,EAA+BrL,EAAgB,GAAKoL,EACpD7R,KAAK8O,SAAS,CAAC1H,2BAA6B0K,M,gCAInCrL,EAAgBlB,GAAW,IAAD,OAKnC,OAHAvF,KAAK+R,mBAAmBtL,EAAgB,0BAGxB,KAFhBlB,EAAYA,EAAUyL,OAAOC,gBAEM,MAAb1L,GAEpBvF,KAAK+R,mBAAmBtL,EAAgB,mCACxCqH,GAAczJ,QACP,GAKNrE,KAAK6J,MAAMuC,YAAY4F,QAAQzM,IAAc,GAAK6H,SAASpN,KAAK6J,MAAMuC,YAAY4F,QAAQzM,GAAa,GAAKkB,GAE7GzG,KAAK+R,mBAAmBtL,EAAgB,8BACxCqH,GAAczJ,QACP,GAGNrE,KAAK6J,MAAM+H,2BAEZ5R,KAAK+R,mBAAmBtL,EAAgB,wCACxCqH,GAAczJ,QACP,IAGTrE,KAAK8O,SAAS,CAAC8C,2BAA2B,SAE1CpC,MAAM,UAAYxP,KAAK4O,iBAAmB,4BAA8BrJ,EAAY,eAAiBvF,KAAK6J,MAAMV,UAC7GwG,MAAK,SAAA0B,GAAG,OAAIA,EAAIxB,UAChBF,MAAK,SAACG,GAEM,MAARA,GAED9M,QAAQC,IAAI,YAAc6M,EAAKmC,YAE/B,EAAKF,mBAAmBtL,EAAgB,wBAErClB,EAAUyL,OAAOC,eAAiB,EAAKpH,MAAMmD,MAAMkF,cAAclB,OAAOC,eAEzEvD,GAAcrJ,OACd,EAAKyK,SAAS,CAACtJ,qBAAqBiB,IACpC,EAAKsL,mBAAmBtL,EAAgB,4CAIxC6G,GAAUjJ,OAGZ,EAAKyK,SAAS,CAAC4C,aAAcjL,EAAgB,IAE1CA,EAAkB,EAEnB,EAAK8J,iBAAiB9J,EAAgB,IAMtC,EAAKqI,SAAS,CAAChF,WAAW,IAC1B,EAAK+E,yBAKJ,EAAKhF,MAAMjE,oBAAsBa,GAClCuH,GAAU3J,OACV,EAAK0N,mBAAmBtL,EAAgB,8BACxC,EAAKqI,SAAS,CAAC5I,gCAAiCO,MAGhD,EAAKsL,mBAAmBtL,EAAgB,4BACxCqH,GAAczJ,QAIlB,EAAKyK,SAAS,CAAC8C,2BAA2B,OAG7CN,OAAO,SAACa,GAEPnP,QAAQC,IAAIkP,GACZ,EAAKJ,mBAAmBtL,EAAgB,sC,0CAgGtBA,GAElBzG,KAAK8O,SAAS,CAAC2B,YAAc,IACR,IAAlBhK,GAAqB+G,GAAWnJ,OAEhCoC,IAAoBzG,KAAK6J,MAAMnE,qBAAqBwI,GAAW7J,OAC/DoC,IAAoBzG,KAAK6J,MAAM/D,qBAAqBsI,GAAY/J,OAEjE,IAAM+N,EAAuBpS,KAAK6J,MAAM/E,iBAAiBiM,QAEzDqB,EAAqB3L,EAAgB,GAAK,EAC1CzG,KAAK8O,SAAS,CAAChK,iBAAmBsN,M,mCAmCzBjB,GAAe,IAAD,OACrBhI,EAAWnJ,KAAK6J,MAAMV,SACJ,GAAnBA,EAASe,SAAaf,EAAWgI,GAEpC3B,MAAM,UAAYxP,KAAK4O,iBAAmB,sCAAwCzF,GACjFwG,MAAK,SAAA0B,GAAG,OAAIA,EAAIxB,UAChBF,MAAK,SAACG,GACL,EAAKhB,SAAS,CAAE9B,MAAO8C,EAAM6B,eAAe,IACzC7B,EAAKuC,aAEN,EAAKC,mBAGRhB,MAAMtO,QAAQC,O,sCAMXjD,KAAK8O,SAAS,CAACpJ,oBAAqB,EAAGE,mBAAmB,EAAGE,oBAAoB,EAAGlD,WAAW,M,0CAyBrG5C,KAAK8O,SAAS,CACZ1C,YAAa7J,MAAM,GAAGC,KAAK,MAC3BkP,aAAc,EACd/O,oBAAqB,EACrBD,qBAAsB,EACtBoC,iBAAkBvC,MAAM,GAAGC,KAAK,MAChCwK,MAAO,KACP9G,gCAAiC,KACjCyL,eAAe,EACfvK,2BAA4B7E,MAAM,GAAGC,KAAK,MAC1CsH,WAAW,EACX8H,2BAA2B,EAC3BvG,UAAW,KACX0D,cAAc,EACdzH,kBAAkB,EAClByC,cAAe,KACfvE,qBAAuB,KACvBE,oBAAqB4I,GAAa,EAAE,GACpCxI,oBAAqBwI,GAAa,EAAE,GACpC1I,mBAAoB0I,GAAa,EAAE,GACnCmC,YAAa,EACb7N,WAAY,M,+BAUZ,IAAI2P,EAAcvS,KAAK6J,MAAMmD,MAI7B,OACI,yBAAKnN,UAAU,4BACX,yBAAKA,UAAU,WAAWC,MAAO0S,IAAjC,eAGA,yBAAK1S,MAAO2S,IAAZ,iBAGA,yBAAK5S,UAAU,YAAYC,MAAO4S,IAC9B,uBAAGnJ,KAAK,IAAIzJ,MAAO,CAACkC,MAAM,OAAQ2F,WAAY,OAAQmB,UAAU,OAAQ6J,aAAa,QAAS1K,QAASjI,KAAKoR,wBAA5G,eADJ,OAGI,uBAAG7H,KAAK,IAAIzJ,MAAO,CAACkC,MAAM,QAAS2F,WAAY,OAAQmB,UAAU,QAAS8J,YAAY,QAAS3K,QAASjI,KAAKoR,wBAA7G,eACCpR,KAAK6J,MAAM8H,eAAwC,IAAvB3R,KAAK6J,MAAMV,SAAiB,6BAAK,kBAAC,EAAD,MAAU,kBAAC,GAAD,CAAUA,SAAUnJ,KAAK6J,MAAMV,SAAUE,eAAgBrJ,KAAKkR,uBAAgClR,KAAK6S,YAAYN,GACtLvS,KAAK8S,kB,oCAUhB,OAFA9P,QAAQC,IAAI,0BAEY,MAApBjD,KAAK6J,MAAMmD,MAIX,kBAAC,GAAD,CAAcjD,cAAe/J,KAAK6J,MAAME,cAAewB,OAAsD,MAA9CvL,KAAK6J,MAAM3D,gCAAyCmF,UAAWrL,KAAK6J,MAAMwB,UAAWe,YAAapM,KAAK6J,MAAMuC,YAAaS,kBAAmB7M,KAAK6J,MAAMlH,oBAAqBmH,UAAW9J,KAAK6J,MAAMC,UAAWsB,aAAcpL,KAAKoL,eAO5R,kBAAC,GAAD,CAAcrB,cAAe/J,KAAK6J,MAAME,cAAewB,OAAsD,MAA9CvL,KAAK6J,MAAM3D,gCAAyC8G,MAAOhN,KAAK6J,MAAMmD,MAAMA,MAAO3B,UAAWrL,KAAK6J,MAAMwB,UAAWe,YAAapM,KAAK6J,MAAMuC,YAAaS,kBAAmB7M,KAAK6J,MAAMlH,oBAAqBmH,UAAW9J,KAAK6J,MAAMC,UAAWsB,aAAcpL,KAAKoL,iB,kCAK7TmH,GAER,IAAIQ,EAAO,GAEX,GAAQ,MADAR,EAKN,IAAI,IAAI1B,EAAI,EAAGA,EAAI0B,EAAYvF,MAAM9C,OAAS,EAAG2G,IAC7CkC,EAAK3I,KAAKpK,KAAKgT,WAAWnC,EAAG0B,EAAYvF,MAAM6D,EAAE,KAIvD,OAAOkC,I,iCAGAlC,EAAG1L,GAEV,OAEI,kBAAC,EAAD,CACIrF,MAAOA,GACPqF,KAAMA,EACNnE,IAAK6P,EACLtL,UAAWvF,KAAK6J,MAAMuC,YAAYyE,EAAE,GACpC5I,QAASjI,KAAKqQ,yBACdhI,iBAAkBrI,KAAKoQ,qBACvB9H,cAAetI,KAAK0Q,kBACpB7P,gBAAiBb,KAAK4Q,sBACtBhM,wBAAyB5E,KAAK6J,MAAM6H,aACpC5M,iBAAkB9E,KAAK6J,MAAM/E,iBAC7BoD,aAAclI,KAAKuQ,iBACnB5N,oBAAqB3C,KAAK6J,MAAMlH,oBAChCD,qBAAsB1C,KAAK6J,MAAMnH,qBACjCqC,YAAa/E,KAAKyR,kBAClBvL,gCAAiClG,KAAK6J,MAAM3D,gCAC5CkB,2BAA4BpH,KAAK6J,MAAMzC,2BACvCE,iBAAkBtH,KAAK6J,MAAMvC,iBAC7B9B,qBAAsBxF,KAAK6J,MAAMrE,qBACjCE,oBAAqB1F,KAAK6J,MAAMnE,oBAChCE,mBAAoB5F,KAAK6J,MAAMjE,mBAC/BE,oBAAqB9F,KAAK6J,MAAM/D,oBAChC3E,WAAYnB,KAAKmB,WACjByB,WAAY5C,KAAK6J,MAAMjH,WACvB8D,WAAY1G,KAAK6J,MAAMV,e,GA3anB9H,IAAMC,WAib1BoR,GAAoB,CAEpB1Q,MAAO,QAEPT,WAAY,0BACZlB,SAAU,OAEVC,QAAS,MACT2S,SAAU,MACVnK,UAAW,UAKXhJ,GAAQ,CACR4H,gBAAiB,YACjB1F,MAAO,WAEPT,WAAY,0BACZlB,SAAU,OAEVC,QAAS,OACTwI,UAAW,QAGT2J,GAAc,CAEhBzQ,MAAO,OACPT,WAAY,SACZlB,SAAU,OACVyI,UAAW,SACXlB,IAAK,OAIL4K,GAAa,CAEbxQ,MAAO,SACPT,WAAY,mCACZlB,SAAU,OACVyI,UAAW,SACXlB,IAAK,OAIM+G,MCngBfuE,iBACE,kBAAC,GAAD,MACA5P,SAASC,eAAe,SXyHpB,kBAAmB4P,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdjC,OAAM,SAAAa,GACLnP,QAAQmP,MAAMA,EAAMN,c","file":"static/js/main.102c5dd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tick.8acb8195.mp3\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/perfect.aa13a8ca.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sad.bac71be6.mp3\";","module.exports = __webpack_public_path__ + \"static/media/okay.2d790169.mp3\";","module.exports = __webpack_public_path__ + \"static/media/water.d1d7caa2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/treasure.80d37618.mp3\";","module.exports = __webpack_public_path__ + \"static/media/gasp.1a98fb59.mp3\";","module.exports = __webpack_public_path__ + \"static/media/rejected.d30f89cd.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bomb.4c796ed3.mp3\";","module.exports = __webpack_public_path__ + \"static/media/jaws.1ec83725.mp3\";","module.exports = __webpack_public_path__ + \"static/media/squirt.3b9c0c59.mp3\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nfunction Chris(){\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>You clicked {count} times</p>\n            <button onClick={() => setCount(count + 1)}>\n            Click me\n            </button>\n        </div>\n    )\n}\n\nexport default Chris;\n","import React, { Component } from 'react';\nimport { View,Text,Button,StyleSheet } from 'react';\nimport  { useEffect, useState } from \"react\";\n\n/*\n borrowed from here:\n https://www.digitalocean.com/community/tutorials/react-countdown-timer-react-hooks\n and consider wapping to this more beautiful one:\n https://css-tricks.com/how-to-create-an-animated-countdown-timer-with-html-css-and-javascript/\n \n*/\nfunction Timer() {\n    const calculateTimeLeft = () => {\n      let year = new Date().getFullYear();\n      const difference = +new Date(`${year}-10-1`) - +new Date();\n      let timeLeft = {};\n      const countdownFromSeconds = 60;\n      if (difference > 0) {\n        timeLeft = {\n          seconds: Math.floor((difference / 1000) % countdownFromSeconds),\n        };\n      }\n  \n      return timeLeft;\n    };\n    //readme: hooks?\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n    // readme: this next line appears to be not needed\n    const [year] = useState(new Date().getFullYear());\n  \n    useEffect(() => {\n      setTimeout(() => {\n        setTimeLeft(calculateTimeLeft());\n      }, 1000);\n    });\n  \n    const timerComponents = [];\n  \n    Object.keys(timeLeft).forEach((interval) => {\n      if (!timeLeft[interval]) {\n        return;\n      }\n  \n      timerComponents.push(\n        <span>\n          {timeLeft[interval]} {\"s \"}\n        </span>\n      );\n    });\n    return (\n      <span>\n        {timerComponents.length ? timerComponents : <span>Time's up!</span>}\n      </span>\n    );\n  }\n  \n  export default Timer;","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nclass UserGuess extends React.Component\n{\n    //const [count, setCount] = useState(0);\nrender()\n{\n    return (\n        \n        <div className='UserGuess' style={style}>\n            <input \n                disabled={!this.props.isThisTheCurrentRound} \n                style={{width:'85px',height:'30px', fontSize:'larger', padding:'initial'}} \n                type='text' \n                maxLength='20' \n                tabIndex={this.props.clueId + \"0\"} \n                onKeyUp={(event) => this.props.changeUserGuess(event.target.value, this.props.clueId, event.key)} \n                onBlur={(event) => this.props.changeUserGuess(event.target.value, this.props.clueId, '1')}\n                onFocus={(event) => this.props.startTimer(this.props.clueId)}\n            >\n            </input>\n            <div>{this.props.wordLookupFeedbackMessage}</div>\n        </div>  \n    )\n    }\n}\nvar style = {\n    fontFamily: 'Arial',\n    margin: '5px 5px 0px 0px',\n    padding: '1px'\n  }\nexport default UserGuess;\n","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nfunction ClueScore(){\n\n    return (\n        \n            <input type='Radio' color='lime' style={scoreStyle}/>\n        \n    )\n}\nvar scoreStyle = {\n    fontFamily: 'Arial',\n    margin: '5px 5px 0px 0px',\n    padding: '1px'\n  }\nexport default ClueScore;\n","// Credit: Mateusz Rybczonec\nimport React, {useState, Component} from 'react';\nimport './TimerCircle.css';\nimport UIfx from 'uifx';\nimport tickSfx from './sounds/tick.mp3'; \n\nconst tickSoundQuiet = new UIfx(tickSfx);\ntickSoundQuiet.setVolume(0.4);\nconst tickSoundUrgent = new UIfx(tickSfx);\ntickSoundUrgent.setVolume(0.9);\n\nconst FULL_DASH_ARRAY = 283;\nconst WARNING_THRESHOLD = 20;\nconst ALERT_THRESHOLD = 7;\nconst TIMER_NEEDS_INITIALIZING = 1;\nconst TIMER_HAS_BEEN_INITIALIZED = 2;\n\n\nconst COLOR_CODES = {\n  info: {\n    color: \"green\"\n  },\n  warning: {\n    color: \"orange\",\n    threshold: WARNING_THRESHOLD\n  },\n  alert: {\n    color: \"red\",\n    threshold: ALERT_THRESHOLD\n  }\n};\n\n//readme: these variables are shared by all TimerCircles (unlike State which they each have their own)\nconst TIME_LIMIT = 90;\nlet timePassed = 0;\nlet timeLeft = TIME_LIMIT;\nlet timerInterval =  Array(7).fill(null);\nlet remainingPathColor = COLOR_CODES.info.color;\nlet oxygenBottlesApplied = 0;\nlet oxygenBottlesBought = 0;\nlet isDemoMode = 0;\nlet timerRanOutCallback = null;\n// readme: not certain I need this next variable? Because this is global to all timers it saves me passing it back to here from the GameBoard state\n// but maybe having a copy here is undesirable and i should use the state one.\nlet roundTheyWereOnWhenTimerExpired = null;\n\nfunction Init(uniqueKey)\n{\n        // INIT;\n        timerInterval =  Array(7).fill(null);\n        \n        onTimesUp(uniqueKey);\n\n        /*\n        * readme: bring these two back in if you want the timer to NOT be shared across all rounds\n        timePassed = 0;\n        timeLeft = TIME_LIMIT;\n        */\n        timerInterval[uniqueKey] = null;\n        remainingPathColor = COLOR_CODES.info.color;\n    \n        console.log('Timer started' + uniqueKey);\n        document.getElementById(\"TimerCircle\" + uniqueKey).innerHTML = '<div class=\"base-timer\"><svg class=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">   <g class=\"base-timer__circle\">    <circle class=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>    <path      id=\"base-timer-path-remaining'+uniqueKey+'\"      stroke-dasharray=\"283\"       class=\"base-timer__path-remaining '+remainingPathColor+'\"      d=\"        M 50, 50        m -45, 0        a 45,45 0 1,0 90,0        a 45,45 0 1,0 -90,0      \"    ></path>  </g></svg><span id=\"base-timer-label'+uniqueKey+'\" class=\"base-timer__label\">'+formatTime(timeLeft)+'</span></div>';\n        startTimer(uniqueKey);\n}\n\nfunction ResetTimer(calledBy)\n{\n  console.log(\"ResetTimer \" + calledBy)\n  //readme: reset the shared static timer vars - be careful when calling this as don't want to reset in between rounds \n  timePassed = 0;\n  timeLeft = TIME_LIMIT;\n  oxygenBottlesApplied = 0;\n}\n\nfunction AddToTimer(sec)\n{\n    console.log('timePassed'+ timePassed);\n    timePassed -= sec;\n}\n\nfunction onTimesUp(uniqueKey) {\n  console.log(\"killing timer : \" + uniqueKey)\n  clearInterval(timerInterval[uniqueKey]);\n}\n\nfunction startTimer(uniqueKey) {\n    timerInterval[uniqueKey] = setInterval(() => {\n    if(document.getElementById(\"base-timer-label\" + uniqueKey))\n    {\n      // if(oxygenBottlesApplied < oxygenBottlesBought)\n      // {\n      //     let diff = oxygenBottlesBought - oxygenBottlesApplied;\n      //     //readme : they have paid for oxygen that's not yet been used - use it!\n      //     timePassed -= (11 * diff);\n      //     oxygenBottlesApplied += diff;\n      // }\n      if(timeLeft > 0)\n      {\n        timePassed = timePassed += 1;\n        timeLeft = TIME_LIMIT - timePassed;\n      }\n\n      // readme: only do stuff if html rendered\n        if(timeLeft >= 0){\n          document.getElementById(\"base-timer-label\" + uniqueKey).innerHTML = formatTime(\n            timeLeft\n          );\n        }\n        setCircleDasharray(uniqueKey);\n        setRemainingPathColor(timeLeft,uniqueKey);\n\n        if(timeLeft === 0 && isDemoMode === 1)\n        {\n          alert(\"The timer ran out. Try and avoid that by using oxygen refills.\\n Because this is the training demo we'll carry on...\");\n          timeLeft = -1;\n          onTimesUp(uniqueKey);\n        }\n\n        if (timeLeft === 0 && isDemoMode === 0) {\n          onTimesUp(uniqueKey);\n          if(timerRanOutCallback != null && timerRanOutCallback != undefined \n            && uniqueKey != null && uniqueKey != undefined)\n          {\n            timerRanOutCallback(uniqueKey);\n            roundTheyWereOnWhenTimerExpired = uniqueKey;\n            // readme: so if the timer runs out, then here I reset the timers for the next time they might be used\n            ResetTimer(\"bcoz timer expired on \" + uniqueKey + \" oxygenApplied: \" + oxygenBottlesApplied + \" oxyBought: \" + oxygenBottlesBought);\n          }\n        }\n        if (timeLeft === 10) tickSoundQuiet.play();\n        if (timeLeft === 5) tickSoundUrgent.play();\n        \n    } else\n    {\n      // readme: hmm, I dont fully understand this - assume this else hit when doing a \"Replay\" and clears out stuff ahead of reusing timer class vars\n      ResetTimer(\"bcoz didn't find a timer for \" + uniqueKey);\n      onTimesUp(uniqueKey);\n    }\n  }, 1000);\n}\n\nfunction formatTime(time) {\n  const minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n\n  return `${minutes}:${seconds}`;\n}\n\nfunction setRemainingPathColor(timeLeft,uniqueKey) {\n  const { alert, warning, info } = COLOR_CODES;\n  if (timeLeft <= alert.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(warning.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(alert.color);\n  } else if (timeLeft <= warning.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(info.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(warning.color);\n  }\n}\n\nfunction calculateTimeFraction() {\n  const rawTimeFraction = timeLeft / TIME_LIMIT;\n  return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);\n}\n\nfunction setCircleDasharray(uniqueKey) {\n  const circleDasharray = `${(\n    calculateTimeFraction() * FULL_DASH_ARRAY\n  ).toFixed(0)} 283`;\n  document\n    .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n    .setAttribute(\"stroke-dasharray\", circleDasharray);\n}\n\nclass TimerCircle extends React.Component\n{ \n    // readme: dont appear to need each Tier to have their own state.\n    // am happy sharing the timer variables globally across all Timers (e.g. TimePassed and oxygenBottlesApplied are used by all 7)\nrender()\n    {\n      isDemoMode = this.props.isDemoMode;\n      oxygenBottlesBought = this.props.oxygenBottlesBought;\n      //console.log(\"uniqueKey:\" + this.props.uniqueKey + \" oxygenBottlesApplied:\" + oxygenBottlesApplied + \" oxygenBottlesBought:\" + oxygenBottlesBought + \" timePassed: \" + timePassed)\n\n      if(oxygenBottlesApplied < oxygenBottlesBought)\n      {\n        // readme: they appear to have bought oxygen - kill current timer thread,\n        // update the global timer numbers, and start a new thread. Designed to stop race conditions.\n         \n        if(this.props.uniqueKey == this.props.currentRoundBeingPlayed){\n          // readme: stop the exact timer in question.\n          onTimesUp(this.props.uniqueKey); \n         \n         // readme: these are global vars shared by all timers, update all.\n          let diff = oxygenBottlesBought - oxygenBottlesApplied;\n          timePassed -= (11 * diff);\n          oxygenBottlesApplied += diff;\n          console.log(\"oxygenBottlesApplied:\" + oxygenBottlesApplied);\n          startTimer(this.props.uniqueKey);\n         }\n         else\n         {\n           //console.log(\"not the timer we care about: \" +this.props.uniqueKey);\n         }\n      }\n\n      if(this.props.initializeTimers[0] == null)\n      {\n        // readme: bit of an assumption - if the first timer is null, the game has been started or replayed so reset timer.\n        ResetTimer(\"Init.\");\n      }\n\n      timerRanOutCallback = this.props.timerRanOut;\n        //console.log('Got here' + this.props.initializeTimers[this.props.uniqueKey - 1] + ' ' + this.props.uniqueKey);\n        \n        // readme: '1' means the timer's div is ready and the timer can be initialized. '2' means it's all setup, dont reinit it as that would reset it.\n        if(this.props.initializeTimers[this.props.uniqueKey - 1] == TIMER_NEEDS_INITIALIZING)\n        {\n            Init(this.props.uniqueKey);\n            //readme: to my surprise changing this array prop seems to change the STATE (possibly am breaking a pattern)\n            //readme: will leave for now, but could change later to a callback to the GameBoard and change the state in there instead.\n            this.props.initializeTimers[this.props.uniqueKey - 1] = TIMER_HAS_BEEN_INITIALIZED;\n        }\n\n        // readme: haltTimer will be true for any rounds that aren't the current round.\n        if(this.props.haltTimer)\n        {   \n            onTimesUp(this.props.uniqueKey);          \n        }\n\n        return(\n            <div id={\"TimerCircle\" + this.props.uniqueKey} style={this.props.style}></div>\n        );\n    }\n    //readme: putting this here solved a problem of a red warning the browser dev console when setting state inside Render()\n    componentDidUpdate()\n    {\n        //readme: have no longer got a reason to use this...\n    }\n}\n\nexport default TimerCircle;\n\n\n\n","import React from 'react';\nimport {render} from 'react-dom';\nimport Timer from './Timer';\nimport './ClueOuter.css';\nimport UserGuess from './UserGuess'; \nimport ClueScore from './ClueScore';\nimport TimerCircle from './TimerCircle.js';\nimport Alert from 'react-bootstrap/Alert';\n\nclass ClueOuter extends React.Component\n{\n\n    render(){\n        let clue = this.props.clue;\n        let thisRoundId = clue.roundId;\n        let userGuess = this.props.userGuess;\n        let foundTreasureInThisRound = this.props.foundTreasureInRound == thisRoundId;\n        let sharkAppearsInThisRound = this.props.sharkAppearsInRound == thisRoundId;\n        let mineAppearsInThisRound = this.props.mineAppearsInRound == thisRoundId;\n        let squidAppearsInThisRound = this.props.squidAppearsInRound == thisRoundId;\n\n        //console.log(this.props.foundTreasureInRound + \" ... \" + thisRoundId);\n        let treasureFoundClassName = foundTreasureInThisRound ? \" foundTreasure\" : \"\";\n\n        //console.log(treasureFoundClassName);\n        let isThisTheCurrentRound = this.props.currentRoundBeingPlayed == thisRoundId;\n        let diverClassName = isThisTheCurrentRound ? \"showBlock\" : \"hideBlock\";\n        let isDiverDead = this.props.roundTheyWereOnWhenTimerExpired != null;\n        let diverDisplay = DiverDisplayFunction(this.props.initializeTimers[clue.roundId - 1],this.props.roundTheyWereOnWhenTimerExpired, clue.roundId);\n        \n        let sharkEncounterClassName = sharkAppearsInThisRound && !foundTreasureInThisRound ? \" sharkEncounter\" : \"\" ;\n        let mineEncounterClassName = mineAppearsInThisRound && !foundTreasureInThisRound && !sharkAppearsInThisRound ? \" mineEncounter\" : \"\" ;\n        let squidEncounterClassName = squidAppearsInThisRound && !foundTreasureInThisRound && !sharkAppearsInThisRound && !mineAppearsInThisRound ? \" squidEncounter \" : \"\" ;\n        let combinedClassNames = treasureFoundClassName + sharkEncounterClassName + mineEncounterClassName + squidEncounterClassName;\n        // readme: this needs to come after all the above.\n        let clueOuterClassName = this.props.currentRoundBeingPlayed >= thisRoundId ? \"clueOuterInPlay clueOuter\" + combinedClassNames : \"clueOuterNotInPlay clueOuter\" + combinedClassNames;\n\n        function DiverDisplayFunction(initializedTimer, roundTheyWereOnWhenTimerExpired, roundId){\n            //readme: if timer initialized for this round then clock has started so hide the diver...\n            if(initializedTimer != null){\n                //readme: ...unless the timer has run out in which case display the diver on that round\n                //console.log('roundId:'+roundId+' roundExpired '+ roundTheyWereOnWhenTimerExpired + ' initializedTimer: ' + initializedTimer)\n                if(roundTheyWereOnWhenTimerExpired != null && roundId == roundTheyWereOnWhenTimerExpired){\n                    return '';\n                }\n                return  'none'\n            }\n            return '';\n        }\n        const OXYGEN_BOTTLES_AVAILABLE = 5;\n        //console.log(\"lol :\" +isThisTheCurrentRound);\n        return(\n        \n        <div className={clueOuterClassName}>\n            <div style={roundStyle}>\n                {clue.roundId}\n            </div>\n            {this.props.isDemoMode === 1 ? HelpAlert(clue.roundId, this.props.playerName) : \"\"}\n            {/* readme: this below probably should be another Component */}\n            <div style={inlineBlock} name={\"ClueOuterDiv\" + clue.roundId}>\n                <div style={floatLeft}>\n                    {ClueInner(clue, this.props.changeUserGuess, this.props.wordLookupFeedbackMessages[clue.roundId-1], isThisTheCurrentRound, this.props.startTimer, this.props.squidAppearsInRound, this.props.currentRoundBeingPlayed)}\n                </div>\n                <TimerCircle \n                    initializeTimers={this.props.initializeTimers} \n                    style={this.props.roundTheyWereOnWhenTimerExpired == clue.roundId ? displayNone : floatLeft} \n                    uniqueKey={clue.roundId}\n                    haltTimer={clue.roundId < this.props.currentRoundBeingPlayed || this.props.resurfaceClicked || this.props.roundTheyWereOnWhenTimerExpired == clue.roundId}\n                    oxygenBottlesBought={this.props.oxygenBottlesBought}\n                    currentRoundBeingPlayed={this.props.currentRoundBeingPlayed}\n                    timerRanOut={this.props.timerRanOut}\n                    oxygenBottlesApplied={this.props.oxygenBottlesApplied}\n                    isDemoMode={this.props.isDemoMode}\n                    /> \n                <div style={{...floatLeft,...{position:\"relative\"}}} className={diverClassName}>\n                    <span style={{...diverSpanStyle,...{display:diverDisplay}}}>{clue.roundId == 1 && !isDiverDead ? \"Enter a word\" : \"\"}</span>\n                    <span style={{...diverSpanStyle,...{display:diverDisplay, backgroundColor:\"rgb(255,255,255,0.60)\", color: \"red\", fontWeight: \"bold\", top : \"0\"}}}>{isDiverDead ? \"Submit and Dive to recover body\" : \"\"}</span>\n                    <img src=\"images/diver2.png\" height=\"51px\" style={{...isDiverDead ? diverStyleDead : diverStyleAlive,...{display:diverDisplay,paddingBottom:\"30px\"}}} onClick={(event) => this.props.onDiverClick(clue.roundId)}>\n                    </img>                    \n                </div>\n                <div style={floatRight}>\n                    <div style={buttonPadding}>\n                        <button disabled={!isThisTheCurrentRound} className=\"button\" style={{backgroundColor:\"coral\"}} tabIndex={clue.roundId + \"1\"}  onClick={(event) => this.props.onClick(clue.roundId)}>\n                            {clue.roundId == 7 ? \"Complete!\" : \"Submit And Dive\"}\n                        </button>\n                    </div>\n                    <div style={buttonPadding}>\n                        <button disabled={!isThisTheCurrentRound}  className=\"button\" style={{backgroundColor:\"antiquewhite\"}} onClick={(event) =>  this.props.onClickResurface(clue.roundId)}>\n                                Resurface\n                        </button>\n                    </div>\n                    <div style={buttonPadding}>\n                        <button disabled={!isThisTheCurrentRound || (OXYGEN_BOTTLES_AVAILABLE - this.props.oxygenBottlesBought) < 1 || sharkAppearsInThisRound} className=\"button\" onClick={(event) => this.props.onClickOxygen(clue.roundId)}>\n                                Refill O<sub>2</sub> (+10s)\n                        </button>\n                        <span style={displayBlock}>O<sub>2</sub> reserves: {(OXYGEN_BOTTLES_AVAILABLE - this.props.oxygenBottlesBought)}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\nfunction HelpAlert(thisRoundNumber, playerName)\n{\nif(thisRoundNumber === 1)\nreturn (\n    <Alert variant=\"Primary\">Hey {playerName} as it's your first time diving I'll accompany you.\n            Enter any word that meets the first clue shown below on the left - so a word that contains an 'e'. Submit your word by pressing enter or the \"Submit and Dive\" button. The oxygen timer will then start.\n            If your word is found in the dictionary you'll progress to the next round.\n            <br/>\n            Suggestion: \"<strong>Me</strong>\" \n    </Alert>\n);\nif(thisRoundNumber === 2)\nreturn (\n    <Alert variant=\"Primary\">A new clue - this time enter a word that meets it and the previous clue.\n    We cannot repeat \"Me\" or any other word we've already entered above. Think fast - oxygen will run out!\n    <br/>\n    Suggestion: \"<strong>Met</strong>\"\n    </Alert>\n);\nif(thisRoundNumber === 3)\nreturn (\n    <Alert variant=\"Primary\">Argh a shark! Fighting it prevents us refilling oxygen (the timer)!\n            Try and focus on entering a word that meets <strong>all 3 clues</strong>\n            <br/>\n            Suggestion: \"<strong>Bed</strong>\"\n    </Alert>\n);\nif(thisRoundNumber === 4)\nreturn (\n    <Alert variant=\"Primary\">The pressure builds the deeper you dive!\n    It's getting harder to think of a word that meets all the clues.\n    Entering a word that meets some clues is better than nothing! \n    <br/>\n    Suggestion: \"<strong>Bled</strong>\" \n    </Alert>\n);\nif(thisRoundNumber === 5)\nreturn (\n    <Alert variant=\"Primary\">Timer getting low? Press button to refill oxygen!\n    Used it all up? Better Resurface and 'bank' the points earned so far!   \n    <br/>\n    Suggestion: \"<strong>Read</strong>\"         \n    </Alert>\n);\nif(thisRoundNumber === 6)\nreturn (\n    <Alert variant=\"Primary\">Gosh! A giant squid has shot its load on the previous clues!\n    Hope you can remember what they were!! \n    <br/>\n    Suggestion: \"<strong>Bead</strong>\"    \n    </Alert>\n);\nif(thisRoundNumber === 7)\nreturn (\n    <Alert variant=\"Primary\">Whoa an old WWII German sea-mine! Be extra careful entering a word this round. \n    If your entry is not found in the dictionary the mine will detonate! Play it safe!\n    <br/>\n    Suggestion: \"<strong>Beard</strong>\" <br/>\n    (If we'd already entered Beard earlier we'd have to enter something else here - e.g Breed)\n    </Alert>\n);\n}\n\n// readme: this was once a separate component but I was having to pass from parent to child to child and it felt messy\nfunction ClueInner(clue, onChange, wordLookupFeedbackMessage, isThisTheCurrentRound, startTimer, squidAppearsInRound, currentRoundBeingPlayed){\n    // console.log(clue.roundId);   \n    let haveTheyReachedTheSquidLevelYet = currentRoundBeingPlayed == squidAppearsInRound;\n\n    if(haveTheyReachedTheSquidLevelYet && squidAppearsInRound > 0 && clue.roundId < squidAppearsInRound)\n    {\n        return (\n            <div className='ClueInner' style={style}>\n                <span>*<label className='clueSquid'>{clue.clueText}</label>*</span>\n                \n                <UserGuess \n                    isThisTheCurrentRound={isThisTheCurrentRound} \n                    changeUserGuess={onChange} \n                    clueId={clue.roundId} \n                    wordLookupFeedbackMessage={wordLookupFeedbackMessage}\n                    startTimer={startTimer}\n                />  \n             \n            </div>\n        );\n    }\n\n    return (\n        <div className='ClueInner' style={style}>\n            <label className='ClueInnerLabel'>{clue.clueText}</label>\n            \n            <UserGuess \n                isThisTheCurrentRound={isThisTheCurrentRound} \n                changeUserGuess={onChange} \n                clueId={clue.roundId} \n                wordLookupFeedbackMessage={wordLookupFeedbackMessage}\n                startTimer={startTimer}\n            />  \n         \n        </div>\n    );\n}\nvar textAlignLeft ={\n    textAlign: 'left'\n}\n// var diverFontSize={\n//     fontSize: 'xlarge'\n// }\n\nvar diverStyleAlive ={\n    display: 'block',\n    margin: 'auto',\n    transform: 'rotate(0deg)'\n}\nvar diverStyleDead ={\n    display: 'block',\n    margin: 'auto',\n    transform: 'rotate(180deg)',\n    filter: 'grayscale(1)'\n}\nvar diverSpanStyle={\n    position: 'absolute',\n    left: '0',\n    right: '0',\n    bottom: '1%'\n}\nvar style = {\n    fontFamily: 'Courier,Arial',\n    // margin: '10px',\n    padding: '10px',\n    textAlignLast: 'center',\n    backgroundColor: 'rgb(255,255,255,0.70)',\n  }\nvar roundStyle = {\n    backgroundColor: 'steelblue',\n    color: 'white',\n    fontFamily: 'Courier,Arial',\n    left: '10px',\n    width: '20px',\n    textAlign: 'center'\n  }\n\n  var styleTimer = {\n    textAlign: 'center',\n    backgroundColor : 'skyblue',\n    width: '80px',\n    padding: '5px',\n    margin: 'auto',\n    borderRadius: '25px'\n  }\n\n  var inlineBlock = {\n    display: 'inline-block',\n    width: '100%'\n  }\n\nvar buttonPadding = {\n    padding: '6px'\n}\n\n  var floatRight = {\n    float: 'right',\n    width: '33%',\n    textAlign: 'center'\n  }\n\n  var floatNone = {\n      float: 'none',\n      width: '33%'\n  }\n\n  var floatLeft = {\n    float: 'left',\n    width: '33%'\n  }\n\n  var displayBlock={\n    display: 'block'\n  }\n\n  var displayNone ={\n      display: 'none'\n  }\n\nexport default ClueOuter;\n","import React, {useState, Component} from 'react';\nimport Loader from 'react-loader-spinner'\n\nexport default class Spinner extends React.Component {\n //other logic\n   render() {\n    return(\n     <Loader\n        type=\"ThreeDots\"\n        color=\"#00BFFF\"\n        height={100}\n        width={100}\n        timeout={0} //3 secs\n\n     />\n    );\n   }\n}","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nclass UserName extends React.Component\n{\n    //const [count, setCount] = useState(0);\nrender()\n{\n\n    if(this.props.userName != null && this.props.userName != \"\")\n    {\n        return (\n            <div className='UserName'>\n                <label style={style}>Catch your breath <span style={userStyle}>{this.props.userName}</span> and then we'll go again!</label>\n            </div>  \n        );\n    }\n\n    return (       \n        <div className='UserName'>\n            <label  style={style}>I hereby declare that I, </label>\n            <input maxLength=\"20\" type='text' tabIndex={\"0\"} onKeyUp={(event) => this.props.changeUserName(event.target.value, event.key)} onBlur={(event) => this.props.changeUserName(event.target.value, \"Enter\")} placeholder=\" ... your name ... \"/>\n            <label  style={style}>accept the risks in exploring the Deep Sea.</label>\n            <br/>\n            <br/>\n            <a href=\"#\" style={{color:\"aliceblue\"}} >Then click anywhere to advance.</a>\n        </div>  \n    )\n    }\n}\nvar style = {\n    fontFamily: 'Phosphate,Futura,Rockwell,Impact',\n    margin: '5px 5px 0px 5px',\n    padding: '5px',\n    fontSize: \"larger\"\n  }\n  var userStyle = {\n    color: \"yellow\",\n    fontSize: \"largest\"\n  }\nexport default UserName;\n","import ReactModal from 'react-modal';\nimport React, {useState, Component} from 'react';\nimport Spinner from './Loader';\nimport './ResultsModal.css';\nimport ReactTooltip from 'react-tooltip';\nimport UIfx from 'uifx';\nimport perfectSfx from './sounds/perfect.mp3'; \nimport sadSfx from './sounds/sad.mp3'; \n\nconst perfectSound = new UIfx(perfectSfx);\nperfectSound.setVolume(0.9);\nconst sadSound = new UIfx(sadSfx);\nsadSound.setVolume(0.4);\n\nfunction DisplayLeaderboard()\n{\n  var leadDiv = document.getElementById(\"LeaderboardDiv\");\n  leadDiv.style.display = \"block\";\n\n  var rulesDiv = document.getElementById(\"RulesDiv\");\n  rulesDiv.style.display = \"none\";\n\n  document.getElementById(\"RulesSpan\").className = \"fontSmaller\";\n  document.getElementById(\"LeaderboardSpan\").className = \"fontBigger\";\n}\n\nfunction DisplayRules()\n{\n  var leadDiv = document.getElementById(\"LeaderboardDiv\");\n  leadDiv.style.display = \"none\";\n\n  var rulesDiv = document.getElementById(\"RulesDiv\");\n  rulesDiv.style.display = \"block\";\n\n  document.getElementById(\"RulesSpan\").className = \"fontBigger\";\n  document.getElementById(\"LeaderboardSpan\").className = \"fontSmaller\";\n}\n\nclass ResultsModal extends React.Component {\n    constructor () {\n      super();\n      this.state = {\n      };\n\n    }\n    //scoreData={scoreData.TotalScore} scoreDataDetail={scoreData.ClueScores}\n\n    render () {\n      //console.log(\"ResultsModal\" + this.props.showModal);\n      \n      if(this.props.showModal == false)\n      {\n        return \"\";\n      }\n\n      if(this.props.highScoreData != null)\n      {\n        const highScoringRows = []\n        for (let index = 0; index < this.props.highScoreData.length; index++) {\n          const element = this.props.highScoreData[index];\n          highScoringRows.push(\n          <tr key={element.playerName}>\n            <td>{element.playerName}</td>\n            <td>{element.timesPlayed}</td>\n            <td>{element.perfectDives}</td>\n            <td>{(element.foundTreasure / element.timesPlayed).toFixed(2) * 100}%</td>\n            <td>{(element.oxygenTanksUsed / element.timesPlayed).toFixed(2)}</td>\n            <td>${element.averagePointsPerDive}m</td>\n            <td>{element.longestStreak}</td>\n            <td>{element.currentStreak}</td>\n            <td>${element.totalPoints}m</td>\n          </tr>)\n        }\n\n        return (\n          <ReactModal \n          isOpen={this.props.showModal}\n          contentLabel=\"Minimal Modal Example\"\n          appElement={document.getElementById(\"root\")}\n          >\n            <div>\n              <span id=\"LeaderboardSpan\" className=\"fontBigger\"><a href=\"#\" onClick={()=>DisplayLeaderboard()}>Leaderboard</a></span>\n              <span> / </span>\n              <span id=\"RulesSpan\" className=\"fontSmaller\"><a href=\"#\" onClick={()=>DisplayRules()}>Rules</a></span>\n            </div>\n            <div id=\"LeaderboardDiv\">\n              <table>\n                  <thead>\n                    <tr>\n                      <th data-tip={\"Who\"}>Player Name</th>\n                      <th data-tip={\"Number of Times Played\"}># Dives Taken</th>\n                      <th data-tip={\"Number of Maximum Scores\"}># Perfect Dives</th>\n                      <th data-tip={\"FoundTreasure/TimesPlayed * 100\"}>% Treasure Found</th>\n                      <th data-tip={\"TanksOfOxygenUsed/TimesPlayed\"}>Oxygen Reliance</th>\n                      <th data-tip={\"TotalPoints/TimesPlayed\"}>Avg Points Per Dive</th>\n                      <th data-tip={\"Consecutive dives found treasure\"}>Longest Streak</th>\n                      <th data-tip={\"Consecutive dives found treasure\"}>Current Streak</th>\n                      <th data-tip={\"Total Points\"}>Total Points</th>\n                    </tr>\n                  </thead>\n                <tbody>\n                  {highScoringRows}\n                </tbody>\n              </table>\n            </div>\n            <div id=\"RulesDiv\" style={{display:\"none\"}}>\n              <h1>Dive School (Rules)</h1>\n              You are diving for a hidden Treasure Word - a series of 6 clues will reveal information about the word's make-up leading you ever closer to it, \n              <br/>\n              until the 7th clue will provide you with the dictionary's definition of the word.\n              <br/><br/>\n              The Treasure Word is always a noun, so guess those if you can, but any valid word will earn 1 point-per-clue-it-satisfies.\n              <br/><br/>\n              Even if you successfully guess the Treasure Word before the end, there are still points on the table for you to claim by entering<br/>\n              other words that meet as many clues as possible.\n              <br/><br/>\n              There might be plenty more fish in the sea but you'll only play each noun <span style={boldFont}>once</span> - avoid drowning and scoring zero<br/>\n              by using the oxygen to buy more time, or Resurface to \"bank\" i.e, end your turn and receive points for the words you've already submitted.\n              <br/><br/>\n              <span style={boldFont,red}>Sharks!</span> randomly appear. While struggling with them you cannot refill oxygen tanks!\n              <br/><br/>\n              <span style={boldFont,blue}>Mines!</span> randomly appear. Take great care to ensure your next answer is a valid dictionary word as the invalid-word buzzer will trigger the mine!\n              <br/><br/>\n              <span style={boldFont}>Squid!</span> randomly appear. They'll squirt ink to cover up the previous clues - hope you've memorized them!\n              <br/><br/>\n              A Perfect Dive is achieved by scoring the maximum 38 points.\n              This score can be reached by :\n              <ul>\n                <li>Getting 1pt for every clue that (each of) your submitted word satisfies. Max = 27pts </li>\n                <li> +2pts bonus if you got all 27pts</li>\n                <li> +3pts if you found the Treasure word</li>\n                <li> +1pts for using no oxygen</li>\n                <li> +1pts for every unused oxygen tank (up to 5)</li>\n              </ul>\n              There's treasure to be found - suit-up and lets dive in!\n              <br/><br/>\n            </div>\n            <button onClick={this.props.handleReplay} className=\"button\" value=\"Replay\">Dive Again!</button>\n            <ReactTooltip />\n          </ReactModal>\n        );\n      }\n\n      if(this.props.scoreData == null && this.props.highScoreData == null)\n      {\n        return (\n              <ReactModal \n              isOpen={this.props.showModal}\n              contentLabel=\"Minimal Modal Example\"\n              appElement={document.getElementById(\"root\")}\n              >\n              <div style={spinnerStyle}><Spinner/></div>\n              </ReactModal>\n        );\n      }\n\n      if(this.props.isDead)\n      {\n        sadSound.play();\n        return (\n              <ReactModal \n              isOpen={this.props.showModal}\n              contentLabel=\"Minimal Modal Example\"\n              appElement={document.getElementById(\"root\")}\n              style={{\n                content: {\n                  color: 'red',\n                   backgroundImage: 'url(/images/funeral.jpg)',\n                   backgroundSize: 'cover',\n                   backgroundPosition: 'center',\n                  backgroundColor: 'black',\n                  overflow: 'scroll',\n                  filter: 'drop-shadow(1px 2px 4px darkblue)'\n                }\n              }}\n              >\n              {/* <span className=\"DeadSpan\">Not all treasure hunters return home with loot...\n              <button onClick={this.props.handleReplay} className=\"button\" value=\"Replay\">Dive Again!</button>\n              </span> */}\n              <span className=\"DeadSpan\">\n                You perished in the seas while searching for <span style={resultStyle}>{this.props.scoreData.wordBeingSought}</span>\n                <br/>\n                Top Three Scores for {\"'\"+ this.props.scoreData.wordBeingSought + \"'\"} : \n                {DisplayTopThree(this.props.scoreData.topThreeScores)}\n                <button onClick={this.props.handleReplay} className=\"button\" value=\"Replay\">Dive Again!</button>\n              </span>\n              </ReactModal>\n        );\n      }\n\n      const clueScoringRows = []\n\n      for (let index = 0; index < 7; index++) {\n        const element = this.props.scoreData.clueScores[index];\n        clueScoringRows.push(\n        <tr>\n          <td>{this.props.userGuesses[index]}</td>\n          <td>{element.scorePerClue[0] > 0 ? SuccessImage() : FailImage(index, 0)}</td>\n          <td>{element.scorePerClue[1] > 0 ? SuccessImage() : FailImage(index, 1)}</td>\n          <td>{element.scorePerClue[2] > 0 ? SuccessImage() : FailImage(index, 2)}</td>\n          <td>{element.scorePerClue[3] > 0 ? SuccessImage() : FailImage(index, 3)}</td>\n          <td>{element.scorePerClue[4] > 0 ? SuccessImage() : FailImage(index, 4)}</td>\n          <td>{element.scorePerClue[5] > 0 ? SuccessImage() : FailImage(index, 5)}</td>\n          <td>{\"N/A\"}</td>\n        </tr>)\n      }\n\n      return (\n        <div>\n          \n          <ReactModal \n             isOpen={this.props.showModal}\n             contentLabel=\"Minimal Modal Example\"\n             appElement={document.getElementById(\"root\")}\n             style={{\n              content: {\n                color: 'darkblue',\n                backgroundColor: 'aliceblue',\n                overflow: 'scroll',\n                filter: 'drop-shadow(1px 2px 4px darkblue)'\n              }\n            }}\n            \n          >\n            {this.props.scoreData.isPerfectDive != null && this.props.scoreData.isPerfectDive == 1 ? PerfectDive() : \"\"}\n            <br/>  \n            You {this.props.scoreData.foundTreasure != null && this.props.scoreData.foundTreasure == 1 ? \"successfully found \" : \"were searching for \" } the Treasure Word : <span style={resultStyle}>{this.props.scoreData.wordBeingSought}</span>\n            <br/>\n            You consumed oxygen bottles : <span style={resultStyle}>{this.props.oxygenBottlesUsed}</span>\n            <br/>\n            Current Streak : {DisplayPlayerHighScore(this.props.scoreData.playerHighScore)}\n            <br/>\n            Total Score: <span style={resultStyle}>${this.props.scoreData.totalScore}m</span>\n            <br/>\n            Top Scores for {this.props.scoreData.wordBeingSought} : \n            {DisplayTopThree(this.props.scoreData.topThreeScores)}\n            <br/>\n            How you scored against the clues:\n            <br/>\n            <span style={smallerFont}> (hover over e.g 'Clue 2' to be reminded of that clue)</span>\n            <table>\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th data-tip={\"'\" + this.props.clues[0].clueText + \"'\"}>Clue 1</th>\n                    <th data-tip={\"'\" + this.props.clues[1].clueText + \"'\"}>Clue 2</th>\n                    <th data-tip={\"'\" + this.props.clues[2].clueText + \"'\"}>Clue 3</th>\n                    <th data-tip={\"'\" + this.props.clues[3].clueText + \"'\"}>Clue 4</th>\n                    <th data-tip={\"'\" + this.props.clues[4].clueText + \"'\"}>Clue 5</th>\n                    <th data-tip={\"'\" + this.props.clues[5].clueText + \"'\"}>Clue 6</th>\n                    <th data-tip={\"'\" + this.props.clues[6].clueText + \"'\"}>Clue 7</th>\n                  </tr>\n                </thead>\n              <tbody>\n                {clueScoringRows}\n              </tbody>\n            </table>\n            <br/>\n\n            <button onClick={this.props.handleReplay} className=\"button\" value=\"Replay\">Dive Again!</button>\n            <ReactTooltip />\n          </ReactModal>\n        </div>\n      );\n\n      function PerfectDive()\n      {\n        perfectSound.play();\n        return(\n          <div style={biggerFont}>\n            <span style={blue}>CON</span><span style={orange}>GRAT</span><span style={violet}>ULAT</span><span style={red}>IONS! </span>\n            <span style={green}>IT'S </span>\n            <span style={orange}>A </span>\n            <span style={violet}>*PERFECT* </span>\n            <span style={red}>DIVE! </span>\n          </div>            \n        ); \n\n      }\n      function SuccessImage()\n      {\n        return(\n            <img src=\"/images/Coin.png\" width=\"25px\" height=\"25px\" alt=\"Success Coin\"/>\n        );\n      }\n\n      function FailImage(answerIndex,clueIndex)\n      {\n        //console.log(\"aI: \" + answerIndex + \" cI:\" +clueIndex);\n        let isThisRelevant = (parseInt(clueIndex) <= parseInt(answerIndex));\n        if(!isThisRelevant)\n        {\n          //console.log(\"display N/A for aI: \" + answerIndex + \" cI:\" +clueIndex);\n          return \"N/A\";\n        }\n        //readme: otherwise it was relevant - a clue they knew about and didn't meet so FAILED\n        return(\n\n            <img src=\"/images/Skull.jpg\" width=\"25px\" height=\"25px\" alt=\"Incorrect Skull\"/>\n          \n        );\n      }\n\n      function DisplayTopThree(topThree)\n      {\n        //console.log(\"DisplayTopThree: \" + topThree[0].playerName);\n        return(\n          <ol>\n          <li>{topThree[0] != null && topThree[0] != undefined ? topThree[0].playerName : \"...no-one yet\"}<span style={resultStyle}>{topThree[0] != null && topThree[0] != undefined ? \" : $\" + topThree[0].totalPoints + \"m\" : \"\"}</span></li>\n          <li>{topThree[1] != null && topThree[1] != undefined ? topThree[1].playerName : \"...no-one yet\"}<span style={resultStyle}>{topThree[1] != null && topThree[1] != undefined  ? \" : $\" + topThree[1].totalPoints + \"m\" : \"\"}</span></li>\n          <li>{topThree[2] != null && topThree[2] != undefined ? topThree[2].playerName : \"...no-one yet\"}<span style={resultStyle}>{topThree[2] != null && topThree[2] != undefined ? \" : $\" + topThree[2].totalPoints + \"m\" : \"\"}</span></li>\n          </ol>\n        );\n      }\n      function DisplayPlayerHighScore(playerHighScore)\n      {\n        return(\n          <span style={resultStyle}>{playerHighScore[0].currentStreak}  consec. treasures found</span>\n        );\n      }\n\n    }\n  }\n\nvar smallerFont = {\n  fontSize: 'smaller'\n}\n\nvar boldFont = {\n  fontWeight: 'bold'\n}\n\nvar biggerFont = {\n  fontSize: 'larger'\n}\n\n  var resultStyle = {\n    color: 'coral',\n    fontFamily: 'Arial',\n    fontSize: 'larger',\n    textAlign: 'left'\n  }\n\n  var red = {\n    color: 'red'\n  }\n  var violet = {\n    color: 'violet'\n  }\n  var green = {\n    color: 'green'\n  }\n  var orange = {\n    color: 'orange'\n  }\n  var blue = {\n    color: 'blue'\n  }\n\n  var spinnerStyle = {\n    margin: \"0 auto\"\n  }\n\n  export default ResultsModal;","import React from 'react';\nimport {render} from 'react-dom';\nimport './GameBoard.css';\nimport ClueOuter from './ClueOuter';\nimport Spinner from './Loader';\nimport UserName from './UserName';\nimport ResultsModal from './ResultsModal';\nimport okaySfx from './sounds/okay.mp3'; \nimport waterSfx from './sounds/water.mp3'; \nimport treasureSfx from './sounds/treasure.mp3'; \nimport gaspSfx from './sounds/gasp.mp3'; \nimport rejectedSfx from './sounds/rejected.mp3';\nimport bombSfx from './sounds/bomb.mp3';\nimport sharkSfx from './sounds/jaws.mp3';\nimport squirtSfx from './sounds/squirt.mp3'; \nimport UIfx from 'uifx';\n\nconst okaySound = new UIfx(okaySfx);\nokaySound.setVolume(0.4);\nconst waterSound = new UIfx(waterSfx);\nwaterSound.setVolume(0.6);\nconst treasureSound = new UIfx(treasureSfx);\ntreasureSound.setVolume(1.0);\nconst gaspSound = new UIfx(gaspSfx);\ngaspSound.setVolume(0.5);\nconst rejectedSound = new UIfx(rejectedSfx);\nrejectedSound.setVolume(0.7);\nconst bombSound = new UIfx(bombSfx);\nbombSound.setVolume(0.9);\nconst sharkSound = new UIfx(sharkSfx);\nsharkSound.setVolume(0.3);\nconst squirtSound = new UIfx(squirtSfx);\nsquirtSound.setVolume(0.7);\n\nfunction getRandomInt(min, max) {\n  var num = Math.floor(Math.random() * Math.floor(max));\n  console.log(\"getRandomInt: \" + min + \" and \" + max);\n  console.log(\"num :\" + num);\n  if(num >= min && num <= max)\n  {\n    return num;\n  }\n  return 0;\n}\n\nclass GameBoard extends React.Component\n{\n    addressOfService = \"deepseaword.com\"; // localhost:5000 | deepseaword.com\n    // const [currentRoundBeingPlayed, setCount] = useState(1);\n    constructor(props) {\n        super(props);\n        this.state = {\n          userGuesses: Array(7).fill(null),\n          currentRound: 1,\n          oxygenBottlesBought: 0,\n          oxygenBottlesApplied: 0,\n          initializeTimers: Array(7).fill(null),\n          clues: null,\n          roundTheyWereOnWhenTimerExpired: null,\n          isLoadingPage: true,\n          wordLookupFeedbackMessages: Array(7).fill(null),\n          userName: \"\",\n          showModal: false,\n          dictionaryCheckInProgress: false,\n          scoreData: null,\n          scoreLoading: false,\n          resurfaceClicked: false,\n          highScoreData: null,\n          foundTreasureInRound: null,\n          sharkAppearsInRound: getRandomInt(1,4),\n          squidAppearsInRound: getRandomInt(5,7),\n          mineAppearsInRound: getRandomInt(6,8),\n          gameStarted: 0,\n          isDemoMode: 0\n        };\n      }\n\n     updateWordFeedback(thisRoundNumber, message){\n      const wordLookupFeedbackMessagesCopy = this.state.wordLookupFeedbackMessages.slice();\n      wordLookupFeedbackMessagesCopy[thisRoundNumber-1] = message;\n      this.setState({wordLookupFeedbackMessages : wordLookupFeedbackMessagesCopy})\n     }\n    \n     // readme: very important function!\n     checkWord(thisRoundNumber,userGuess){\n      //console.log(thisRoundNumber + \" checkWord : \" +userGuess )\n      this.updateWordFeedback(thisRoundNumber,'Checking dictionary...');\n      userGuess = userGuess.trim().toUpperCase();\n\n      if(userGuess == \"\" || userGuess == null)\n      {\n        this.updateWordFeedback(thisRoundNumber,'Enter word then Submit and Dive');\n        rejectedSound.play();\n        return false;\n      }\n\n      // readme : they have already used this word on prev round\n      // and the +1 because the array is indexed at 0.\n      if(this.state.userGuesses.indexOf(userGuess) > -1 && parseInt(this.state.userGuesses.indexOf(userGuess) + 1) < thisRoundNumber)\n      {\n        this.updateWordFeedback(thisRoundNumber,'Can\\'t use that word again!');\n        rejectedSound.play();\n        return false;\n      }\n\n      if(this.state.dictionaryCheckInProgress)\n      {\n        this.updateWordFeedback(thisRoundNumber,'Double-clickers will be left behind!');\n        rejectedSound.play();\n        return false;\n      }\n\n      this.setState({dictionaryCheckInProgress: true}); \n      //https://deepseaworddotnetservice.azurewebsites.net/Entries\n      fetch('http://' + this.addressOfService + '/Entries/LookupWord?word=' + userGuess + '&playerName=' + this.state.userName)\n        .then(res => res.json())\n        .then((data) => {\n          //this.setState({ clues: data })\n          if(data != null)\n          {\n            console.log('word def:' + data.definition);\n            // readme: word was a real word.\n            this.updateWordFeedback(thisRoundNumber,'Found in dictionary.');\n            //console.log(userGuess.trim().toUpperCase() + \" ? \" + this.state.clues.temporaryWord.trim().toUpperCase());\n            if(userGuess.trim().toUpperCase() == this.state.clues.temporaryWord.trim().toUpperCase())\n            {\n              treasureSound.play();\n              this.setState({foundTreasureInRound:thisRoundNumber })\n              this.updateWordFeedback(thisRoundNumber,'Great! Keep going - valid words earn $$');\n            }\n            else\n            {\n              okaySound.play();\n              //this.handleSoundOkay();\n            }\n            this.setState({currentRound: thisRoundNumber+1});\n\n            if(thisRoundNumber < 7)\n            {\n              this.handleDiverClick(thisRoundNumber+1);\n            }\n            else\n            {\n              //readme: kick-off the completion code.\n              //perform scoring and open lightbox to display response to that?\n              this.setState({showModal: true});\n              this.SendToScoringService();  \n            }\n          }\n          else\n          {\n            if(this.state.mineAppearsInRound == thisRoundNumber){\n              bombSound.play();\n              this.updateWordFeedback(thisRoundNumber,'NOT found - mine exploded!');\n              this.setState({roundTheyWereOnWhenTimerExpired: thisRoundNumber}); \n            }\n            else{\n              this.updateWordFeedback(thisRoundNumber,'NOT found - try another!');\n              rejectedSound.play();\n            }     \n          }\n\n          this.setState({dictionaryCheckInProgress: false}); \n\n      })\n      .catch( (error)=>\n      {\n        console.log(error);\n        this.updateWordFeedback(thisRoundNumber,'Apparatus failure. Try again')\n      });\n    }\n\n    SendToScoringService = () => {\n\n              this.setState({scoreLoading: true});\n              let clueInfo = Array(7).fill(null);\n              clueInfo = this.state.clues.clues.map(item => item.significantClueInfo)\n\n              const formData = new FormData();\n\n              formData.append('GUID', this.state.clues.guid);\n              formData.append('userName', this.state.userName);\n              //readme: replace 14 lines these with LOOPS!\n              formData.append('userGuesses[0]', (this.state.userGuesses[0] != null ? this.state.userGuesses[0] : 'realnull' ));\n              formData.append('userGuesses[1]', (this.state.userGuesses[1] != null ? this.state.userGuesses[1] : 'realnull' ));\n              formData.append('userGuesses[2]', (this.state.userGuesses[2] != null ? this.state.userGuesses[2] : 'realnull' ));\n              formData.append('userGuesses[3]', (this.state.userGuesses[3] != null ? this.state.userGuesses[3] : 'realnull' ));\n              formData.append('userGuesses[4]', (this.state.userGuesses[4] != null ? this.state.userGuesses[4] : 'realnull' ));\n              formData.append('userGuesses[5]', (this.state.userGuesses[5] != null ? this.state.userGuesses[5] : 'realnull' ));\n              formData.append('userGuesses[6]', (this.state.userGuesses[6] != null ? this.state.userGuesses[6] : 'realnull' ));\n              formData.append('clueInfo[0]', clueInfo[0]);\n              formData.append('clueInfo[1]', clueInfo[1]);\n              formData.append('clueInfo[2]', clueInfo[2]);\n              formData.append('clueInfo[3]', clueInfo[3]);\n              formData.append('clueInfo[4]', clueInfo[4]);\n              formData.append('clueInfo[5]', clueInfo[5]);\n              formData.append('clueInfo[6]', clueInfo[6]);\n              formData.append('oxygenUsed', this.state.oxygenBottlesBought);\n              formData.append('isDead', this.state.roundTheyWereOnWhenTimerExpired != null)\n\n              //http://deepseaworddotnetservice.azurewebsites.net\n              fetch('http://' + this.addressOfService + '/Entries/SubmitForScoring/', {\n                    method: 'POST',\n                    body: formData\n                  })\n                  .then(response => response.json())\n                  .then(data => {\n\n                    this.setState({scoreLoading: false, scoreData: data});\n\n                  });\n\n    }\n\n    handleReplay = () => {\n      document.body.scrollTop = 0;\n      document.documentElement.scrollTop = 0;\n      this.componentDidMount();\n      this.fetchNewWord();\n      //this.render();\n    }\n\n    handleSoundOkay = () => {\n      okaySound.play()\n    }\n\n    handleResurfaceClick = (thisRoundNumber) =>{\n      this.setState({resurfaceClicked: true});\n      this.setState({showModal: true});\n      this.SendToScoringService();  \n    }\n\n    handleSubmitAndDiveClick = (thisRoundNumber) => {\n      //readme: checking the word is good before advancing\n        console.log(this.state.mineAppearsInRound);\n        if(this.state.initializeTimers[0] == null)\n        {\n          alert(\"Please click the diver image to start the timer \\n  \");\n        }\n        else if(this.state.roundTheyWereOnWhenTimerExpired != null)\n        {\n          this.setState({showModal: true});\n          this.SendToScoringService();  \n        }\n        else\n        {\n          this.checkWord(thisRoundNumber, this.state.userGuesses[thisRoundNumber-1]);\n        }\n    };\n\n      // readme: is really a \"move to next round\" function - believed to only be possible to trigger once per round\n      // so doesn't have any protection to prevent multiple calls to it.\n      handleDiverClick = (thisRoundNumber) =>{\n        this.progressToNextRound(thisRoundNumber);\n      }\n\n      // readme: basically init the first timer, triggered by OnFocus on first word, so might (accidentally) be triggered many times\n      // hence need for \"gameStarted\" to ensure only first time does something.\n      startTimer = (thisRoundNumber) =>{\n        if(thisRoundNumber===1 && this.state.gameStarted == 0) {\n          this.progressToNextRound(thisRoundNumber);\n        }\n      }\n\n      progressToNextRound(thisRoundNumber){\n        //console.log(\"url :\" + window.location.search);\n        this.setState({gameStarted : 1})\n        if(thisRoundNumber===1) waterSound.play();\n        //console.log(\"thisROundNum : \" + thisRoundNumber + \" sk : \" + this.state.sharkAppearsInRound);\n        if(thisRoundNumber === this.state.sharkAppearsInRound) sharkSound.play();\n        if(thisRoundNumber === this.state.squidAppearsInRound) squirtSound.play();\n          //alert('Clicked on diver' + thisRoundNumber);\n          const initializeTimersCopy = this.state.initializeTimers.slice();\n          // readme: timer has been initialized\n          initializeTimersCopy[thisRoundNumber-1] = 1;\n          this.setState({initializeTimers : initializeTimersCopy})\n          \n      }\n\n      handleOxygenClick = (thisRoundNumber) => {\n        gaspSound.play();\n        //readme: not sure if I'll want to count which round the oxygen was used in, might leave param there til i decide\n        let oxygenBottlesBoughtNew = this.state.oxygenBottlesBought + 1;\n        this.setState({oxygenBottlesBought: oxygenBottlesBoughtNew});\n      };\n      \n    //readme: this is an example of 2 pieces of info being returned to the parent from a child so we can update the state\n      handleChangeUserGuess = (userGuess,i, key) => {\n        console.log(\"key was :\" + key);\n\n        const userGuessesCopy = this.state.userGuesses.slice();\n        userGuessesCopy[i-1] = userGuess.trim().toUpperCase();\n        this.setState({userGuesses: userGuessesCopy});\n          \n        if(key == \"Enter\")\n        {\n          // readme: they pressed enter, assume they want to trigger a SubmitAndDive\n          this.handleSubmitAndDiveClick(i);\n        }\n     }\n\n     handleEnterUserName = (theirUserName, key) => {\n       //console.log(\"key was :\" + key);\n       if(key == \"Enter\" && theirUserName.trim().length > 0)\n       {\n        this.setState({userName: theirUserName});\n        this.fetchNewWord(theirUserName.trim());\n       }\n     }\n\n      fetchNewWord(theirUserName){\n        var userName = this.state.userName;\n        if(userName.length == 0) userName = theirUserName;\n\n        fetch('http://' + this.addressOfService + '/Entries/GetWordWithClues?userName=' + userName)\n        .then(res => res.json())\n        .then((data) => {\n          this.setState({ clues: data, isLoadingPage: false })\n          if(data.isFirstTime)\n          {\n            this.setupDemoMode();\n          }\n        })\n        .catch(console.log)\n     }\n\n     setupDemoMode() {\n           // readme: first time playing? send them on demo mode.\n            // can also put ths shark, jellyfish and bomb to def show .\n            this.setState({sharkAppearsInRound: 3, mineAppearsInRound:7, squidAppearsInRound:6, isDemoMode:1});\n     }\n\n     handleHighScoreDisplay = () =>{\n      this.setState({showModal: true});\n\n          fetch('http://' + this.addressOfService + '/Entries/GetHighScores')\n          .then(res => res.json())\n          .then((data) => {\n            this.setState({ highScoreData: data})\n        })\n        .catch(console.log)\n     }\n\n     handleHighScoreHide = () =>{\n      this.setState({showModal: false, highScoreMode: 0});\n     }\n\n     handleTimerRanOut = (i) => {\n        this.setState({roundTheyWereOnWhenTimerExpired: i})\n        //todo: drown him!\n     }\n\n     componentDidMount() {\n       // readme: resets all state except username and then fetch a new word\n      this.setState({\n        userGuesses: Array(7).fill(null),\n        currentRound: 1,\n        oxygenBottlesBought: 0,\n        oxygenBottlesApplied: 0,\n        initializeTimers: Array(7).fill(null),\n        clues: null,\n        roundTheyWereOnWhenTimerExpired: null,\n        isLoadingPage: true,\n        wordLookupFeedbackMessages: Array(7).fill(null),\n        showModal: false,\n        dictionaryCheckInProgress: false,\n        scoreData: null,\n        scoreLoading: false,\n        resurfaceClicked: false,\n        highScoreData: null,\n        foundTreasureInRound : null,\n        sharkAppearsInRound: getRandomInt(1,4),\n        squidAppearsInRound: getRandomInt(5,7),\n        mineAppearsInRound: getRandomInt(6,8),\n        gameStarted: 0,\n        isDemoMode: 0\n        //userName: \"\"\n      });\n    }\n\n\n      render()\n      {\n        // let clues = GetJson();\n        // let parsedClues = JSON.parse(clues);\n        let parsedClues = this.state.clues; \n        // console.log(parsedClues);\n        // console.log(\" and \")\n        // console.log(parsedClues2);\n        return (\n            <div className=\"background center-screen\">\n                <div className='TitleBar' style={titleStyle}>\n                    DeepSeaWord                  \n                </div>\n                <div style={creditStyle}>\n                    by Chris Kerr               \n                </div>\n                <div className='GameBoard' style={instructionsStyle}>\n                    <a href=\"#\" style={{color:\"gold\", fontWeight: \"bold\", textAlign:\"left\", paddingRight:\"15px\"}} onClick={this.handleHighScoreDisplay} >High Scores</a>\n                    &nbsp;\n                    <a href=\"#\" style={{color:\"coral\", fontWeight: \"bold\", textAlign:\"right\", paddingLeft:\"15px\"}} onClick={this.handleHighScoreDisplay} >Dive School</a>\n                    {this.state.isLoadingPage || this.state.userName == \"\" ? <div><Spinner/><UserName userName={this.state.userName} changeUserName={this.handleEnterUserName}/></div>  : this.renderClues(parsedClues)}\n                    {this.renderScore()}\n                </div>\n   \n            </div>\n            )\n        }\n        renderScore()\n        {\n          console.log(\"renderScore(scoreData)\");\n          \n          if (this.state.clues == null)\n          {            \n            return(\n                \n              <ResultsModal highScoreData={this.state.highScoreData} isDead={this.state.roundTheyWereOnWhenTimerExpired != null} scoreData={this.state.scoreData} userGuesses={this.state.userGuesses} oxygenBottlesUsed={this.state.oxygenBottlesBought} showModal={this.state.showModal} handleReplay={this.handleReplay}/>\n          \n            );\n          }\n\n          return(\n              \n                  <ResultsModal highScoreData={this.state.highScoreData} isDead={this.state.roundTheyWereOnWhenTimerExpired != null} clues={this.state.clues.clues} scoreData={this.state.scoreData} userGuesses={this.state.userGuesses} oxygenBottlesUsed={this.state.oxygenBottlesBought} showModal={this.state.showModal} handleReplay={this.handleReplay}/>\n              \n          );\n        }\n\n        renderClues(parsedClues)\n        {\n            let rows = [];\n            var x = parsedClues;\n            if(x != null)\n            {\n              //console.log(x.clues[0]);\n            \n              for(var i = 1; i < parsedClues.clues.length + 1; i++){\n                  rows.push(this.renderClue(i, parsedClues.clues[i-1]));  \n              }\n            }\n\n            return rows;\n        }\n\n        renderClue(i, clue)\n        {\n            return (\n                //readme: wonder at what point its an antipattern to pass so much down.\n                <ClueOuter \n                    style={style} \n                    clue={clue} \n                    key={i} \n                    userGuess={this.state.userGuesses[i-1]} \n                    onClick={this.handleSubmitAndDiveClick} \n                    onClickResurface={this.handleResurfaceClick} \n                    onClickOxygen={this.handleOxygenClick} \n                    changeUserGuess={this.handleChangeUserGuess} \n                    currentRoundBeingPlayed={this.state.currentRound}\n                    initializeTimers={this.state.initializeTimers}\n                    onDiverClick={this.handleDiverClick}\n                    oxygenBottlesBought={this.state.oxygenBottlesBought} \n                    oxygenBottlesApplied={this.state.oxygenBottlesApplied}\n                    timerRanOut={this.handleTimerRanOut}\n                    roundTheyWereOnWhenTimerExpired={this.state.roundTheyWereOnWhenTimerExpired}\n                    wordLookupFeedbackMessages={this.state.wordLookupFeedbackMessages}    \n                    resurfaceClicked={this.state.resurfaceClicked}       \n                    foundTreasureInRound={this.state.foundTreasureInRound}   \n                    sharkAppearsInRound={this.state.sharkAppearsInRound}\n                    mineAppearsInRound={this.state.mineAppearsInRound}  \n                    squidAppearsInRound={this.state.squidAppearsInRound}  \n                    startTimer={this.startTimer}\n                    isDemoMode={this.state.isDemoMode}\n                    playerName={this.state.userName}\n                    />   \n            );\n        }\n}\n\nvar instructionsStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'white',\n    // readme: hehe 'Arial', get it?\n    fontFamily: 'Courier,Helvetica,Arial',\n    fontSize: '13px',\n    // margin: '20px 200px 40px 200px',\n    padding: '2px',\n    minWidth: '50%',\n    textAlign: 'center',\n    // readme: better on mobile if no % here\n    // width: '60%'\n}\n\nvar style = {\n    backgroundColor: 'lightblue',\n    color: 'darkblue',\n    // readme: hehe 'Arial', get it?\n    fontFamily: 'Courier,Helvetica,Arial',\n    fontSize: '12px',\n    // margin: '20px 200px 40px 200px',\n    padding: '20px',\n    textAlign: 'left'\n  }\n\n  var creditStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'gold',\n    fontFamily: 'Cochin',\n    fontSize: '11px',\n    textAlign: 'Center',\n    top: '0px'\n  }\n\n\nvar titleStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'yellow',\n    fontFamily: 'Phosphate,Impact,Helvetica,Arial',\n    fontSize: '45px',\n    textAlign: 'Center',\n    top: '0px'\n  }\n\n\nexport default GameBoard;\n","import React, {Component} from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Chris from './Chris';\nimport GameBoard from './GameBoard';\n\nrender(\n  <GameBoard/>,\n  document.getElementById('root') \n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}