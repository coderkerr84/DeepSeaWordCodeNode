{"version":3,"sources":["logo.svg","serviceWorker.js","Chris.js","Timer.js","UserGuess.js","ClueScore.js","TimerCircle.js","ClueOuter.js","Loader.js","UserName.js","ResultsModal.js","GameBoard.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Chris","Timer","UserGuess","className","style","disabled","this","props","isThisTheCurrentRound","width","height","fontSize","type","maxLength","tabIndex","clueId","onBlur","event","changeUserGuess","target","value","wordLookupFeedbackMessage","React","Component","fontFamily","margin","padding","COLOR_CODES","info","color","warning","threshold","alert","timePassed","timeLeft","timerInterval","Array","fill","remainingPathColor","oxygenBottlesApplied","timerRanOutCallback","Init","uniqueKey","onTimesUp","console","log","document","getElementById","innerHTML","formatTime","setInterval","circleDasharray","rawTimeFraction","calculateTimeFraction","toFixed","setAttribute","setCircleDasharray","classList","remove","add","setRemainingPathColor","undefined","ResetTimer","startTimer","calledBy","clearInterval","time","minutes","Math","floor","seconds","TimerCircle","sec","initializeTimers","timerRanOut","haltTimer","oxygenBottlesUsed","currentRoundBeingPlayed","id","ClueOuter","clue","thisRoundId","roundId","clueOuterClassName","userGuess","diverClassName","isDiverDead","roundTheyWereOnWhenTimerExpired","diverDisplay","initializedTimer","DiverDisplayFunction","roundStyle","inlineBlock","name","floatLeft","onChange","clueText","ClueInner","wordLookupFeedbackMessages","displayNone","resurfaceClicked","position","diverSpanStyle","display","top","src","diverStyleDead","diverStyleAlive","paddingBottom","onClick","onDiverClick","floatRight","buttonPadding","backgroundColor","onClickResurface","onClickOxygen","displayBlock","transform","filter","left","right","bottom","textAlignLast","textAlign","float","Spinner","timeout","UserName","changeUserName","placeholder","href","ResultsModal","state","showModal","scoreData","isOpen","contentLabel","appElement","spinnerStyle","isDead","content","backgroundImage","backgroundSize","backgroundPosition","overflow","handleReplay","topThree","clueScoringRows","index","element","clueScores","push","userGuesses","scorePerClue","SuccessImage","FailImage","isPerfectDive","biggerFont","blue","green","orange","violet","red","foundTreasure","resultStyle","wordBeingSought","totalScore","topThreeScores","playerName","totalPoints","smallerFont","data-tip","clues","answerIndex","clueIndex","parseInt","GameBoard","addressOfService","SendToScoringService","setState","scoreLoading","clueInfo","map","item","significantClueInfo","formData","FormData","append","guid","userName","fetch","method","body","then","response","json","data","componentDidMount","handleResurfaceClick","thisRoundNumber","handleSubmitAndDiveClick","checkWord","handleDiverClick","initializeTimersCopy","slice","handleOxygenClick","oxygenBottlesUsedNew","handleChangeUserGuess","i","userGuessesCopy","handleEnterUserName","theirUserName","handleTimerRanOut","currentRound","isLoadingPage","dictionaryCheckInProgress","message","wordLookupFeedbackMessagesCopy","updateWordFeedback","res","catch","parsedClues","titleStyle","creditStyle","instructionsStyle","renderClues","renderScore","rows","length","renderClue","key","render","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.97e03af6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nfunction Chris(){\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>You clicked {count} times</p>\n            <button onClick={() => setCount(count + 1)}>\n            Click me\n            </button>\n        </div>\n    )\n}\n\nexport default Chris;\n","import React, { Component } from 'react';\nimport { View,Text,Button,StyleSheet } from 'react';\nimport  { useEffect, useState } from \"react\";\n/*\n borrowed from here:\n https://www.digitalocean.com/community/tutorials/react-countdown-timer-react-hooks\n and consider wapping to this more beautiful one:\n https://css-tricks.com/how-to-create-an-animated-countdown-timer-with-html-css-and-javascript/\n \n*/\nfunction Timer() {\n    const calculateTimeLeft = () => {\n      let year = new Date().getFullYear();\n      const difference = +new Date(`${year}-10-1`) - +new Date();\n      let timeLeft = {};\n      const countdownFromSeconds = 60;\n      if (difference > 0) {\n        timeLeft = {\n          seconds: Math.floor((difference / 1000) % countdownFromSeconds),\n        };\n      }\n  \n      return timeLeft;\n    };\n    //readme: hooks?\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n    // readme: this next line appears to be not needed\n    const [year] = useState(new Date().getFullYear());\n  \n    useEffect(() => {\n      setTimeout(() => {\n        setTimeLeft(calculateTimeLeft());\n      }, 1000);\n    });\n  \n    const timerComponents = [];\n  \n    Object.keys(timeLeft).forEach((interval) => {\n      if (!timeLeft[interval]) {\n        return;\n      }\n  \n      timerComponents.push(\n        <span>\n          {timeLeft[interval]} {\"s \"}\n        </span>\n      );\n    });\n    return (\n      <span>\n        {timerComponents.length ? timerComponents : <span>Time's up!</span>}\n      </span>\n    );\n  }\n  \n  export default Timer;","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nclass UserGuess extends React.Component\n{\n    //const [count, setCount] = useState(0);\nrender()\n{\n    return (\n        \n        <div className='UserGuess' style={style}>\n            <input disabled={!this.props.isThisTheCurrentRound} style={{width:'100px',height:'30px', fontSize:'larger'}} type='text' maxLength='20' tabIndex={this.props.clueId + \"0\"} onBlur={(event) => this.props.changeUserGuess(event.target.value, this.props.clueId)}>\n            </input>\n            <div>{this.props.wordLookupFeedbackMessage}</div>\n        </div>  \n    )\n    }\n}\nvar style = {\n    fontFamily: 'Arial',\n    margin: '5px 5px 0px 0px',\n    padding: '1px'\n  }\nexport default UserGuess;\n","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nfunction ClueScore(){\n\n    return (\n        \n            <input type='Radio' color='lime' style={scoreStyle}/>\n        \n    )\n}\nvar scoreStyle = {\n    fontFamily: 'Arial',\n    margin: '5px 5px 0px 0px',\n    padding: '1px'\n  }\nexport default ClueScore;\n","// Credit: Mateusz Rybczonec\nimport React, {useState, Component} from 'react';\nimport './TimerCircle.css';\n\nconst FULL_DASH_ARRAY = 283;\nconst WARNING_THRESHOLD = 10;\nconst ALERT_THRESHOLD = 5;\nconst TIMER_NEEDS_INITIALIZING = 1;\nconst TIMER_HAS_BEEN_INITIALIZED = 2;\n\n\nconst COLOR_CODES = {\n  info: {\n    color: \"green\"\n  },\n  warning: {\n    color: \"orange\",\n    threshold: WARNING_THRESHOLD\n  },\n  alert: {\n    color: \"red\",\n    threshold: ALERT_THRESHOLD\n  }\n};\n\n//readme: these variables are shared by all TimerCircles (unlike State which they each have their own)\nconst TIME_LIMIT = 90;\nlet timePassed = 0;\nlet timeLeft = TIME_LIMIT;\nlet timerInterval =  Array(7).fill(null);\nlet remainingPathColor = COLOR_CODES.info.color;\nlet oxygenBottlesApplied = 0;\nlet timerRanOutCallback = null;\n// readme: not certain I need this next variable? Because this is global to all timers it saves me passing it back to here from the GameBoard state\n// but maybe having a copy here is undesirable and i should use the state one.\nlet roundTheyWereOnWhenTimerExpired = null;\n\nfunction Init(uniqueKey)\n{\n        // INIT;\n        timerInterval =  Array(7).fill(null);\n\n        onTimesUp(uniqueKey);\n\n        /*\n        * readme: bring these two back in if you want the timer to NOT be shared across all rounds\n        timePassed = 0;\n        timeLeft = TIME_LIMIT;\n        */\n        timerInterval[uniqueKey] = null;\n        remainingPathColor = COLOR_CODES.info.color;\n    \n        console.log('Timer started' + uniqueKey);\n        document.getElementById(\"TimerCircle\" + uniqueKey).innerHTML = '<div class=\"base-timer\"><svg class=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">   <g class=\"base-timer__circle\">    <circle class=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>    <path      id=\"base-timer-path-remaining'+uniqueKey+'\"      stroke-dasharray=\"283\"       class=\"base-timer__path-remaining '+remainingPathColor+'\"      d=\"        M 50, 50        m -45, 0        a 45,45 0 1,0 90,0        a 45,45 0 1,0 -90,0      \"    ></path>  </g></svg><span id=\"base-timer-label'+uniqueKey+'\" class=\"base-timer__label\">'+formatTime(timeLeft)+'</span></div>';\n        startTimer(uniqueKey);\n}\n\nfunction ResetTimer(calledBy)\n{\n  console.log(\"ResetTimer \" + calledBy)\n  //readme: reset the shared static timer vars - be careful when calling this as don't want to reset in between rounds \n  timePassed = 0;\n  timeLeft = TIME_LIMIT;\n}\n\nfunction AddToTimer(sec)\n{\n    console.log('timePassed'+ timePassed);\n    timePassed -= sec;\n}\n\nfunction onTimesUp(uniqueKey) {\n  clearInterval(timerInterval[uniqueKey]);\n}\n\nfunction startTimer(uniqueKey) {\n    timerInterval[uniqueKey] = setInterval(() => {\n    if(document.getElementById(\"base-timer-label\" + uniqueKey))\n    {\n      timePassed = timePassed += 1;\n      timeLeft = TIME_LIMIT - timePassed;\n      // readme: only do stuff if html rendered\n\n        document.getElementById(\"base-timer-label\" + uniqueKey).innerHTML = formatTime(\n          timeLeft\n        );\n        setCircleDasharray(uniqueKey);\n        setRemainingPathColor(timeLeft,uniqueKey);\n\n        if (timeLeft === 0) {\n          onTimesUp(uniqueKey);\n          if(timerRanOutCallback != null && timerRanOutCallback != undefined \n            && uniqueKey != null && uniqueKey != undefined)\n          {\n            timerRanOutCallback(uniqueKey);\n            roundTheyWereOnWhenTimerExpired = uniqueKey;\n            // readme: so if the timer runs out, then here I reset the timers for the next time they might be used\n            ResetTimer(\"bcoz timer expired on \" + uniqueKey);\n          }\n        }\n    } else\n    {\n      // readme: hmm, I dont fully understand this - assume this else hit when doing a \"Replay\" and clears out stuff ahead of reusing timer class vars\n      ResetTimer(\"bcoz didn't find a timer for \" + uniqueKey);\n      onTimesUp(uniqueKey);\n    }\n  }, 1000);\n}\n\nfunction formatTime(time) {\n  const minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n\n  return `${minutes}:${seconds}`;\n}\n\nfunction setRemainingPathColor(timeLeft,uniqueKey) {\n  const { alert, warning, info } = COLOR_CODES;\n  if (timeLeft <= alert.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(warning.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(alert.color);\n  } else if (timeLeft <= warning.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(info.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(warning.color);\n  }\n}\n\nfunction calculateTimeFraction() {\n  const rawTimeFraction = timeLeft / TIME_LIMIT;\n  return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);\n}\n\nfunction setCircleDasharray(uniqueKey) {\n  const circleDasharray = `${(\n    calculateTimeFraction() * FULL_DASH_ARRAY\n  ).toFixed(0)} 283`;\n  document\n    .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n    .setAttribute(\"stroke-dasharray\", circleDasharray);\n}\n\nclass TimerCircle extends React.Component\n{ \n    // readme: dont appear to need each Tier to have their own state.\n    // am happy sharing the timer variables globally across all Timers (e.g. TimePassed and oxygenBottlesApplied are used by all 7)\nrender()\n    {\n      if(this.props.initializeTimers[0] == null)\n      {\n        // readme: bit of an assumption - if the first timer is null, the game has been started or replayed so reset timer.\n        ResetTimer(\"Init.\");\n      }\n\n      timerRanOutCallback = this.props.timerRanOut;\n        //console.log('Got here' + this.props.initializeTimers[this.props.uniqueKey - 1] + ' ' + this.props.uniqueKey);\n        \n        // readme: '1' means the timer's div is ready and the timer can be initialized. '2' means it's all setup, dont reinit it as that would reset it.\n        if(this.props.initializeTimers[this.props.uniqueKey - 1] == TIMER_NEEDS_INITIALIZING)\n        {\n            Init(this.props.uniqueKey);\n            //readme: to my surprise changing this array prop seems to change the STATE (possibly am breaking a pattern)\n            //readme: will leave for now, but could change later to a callback to the GameBoard and change the state in there instead.\n            this.props.initializeTimers[this.props.uniqueKey - 1] = TIMER_HAS_BEEN_INITIALIZED;\n        }\n\n        // readme: haltTimer will be true for any rounds that aren't the current round.\n        if(this.props.haltTimer)\n        {   \n            onTimesUp(this.props.uniqueKey);          \n        }\n\n        if(oxygenBottlesApplied < this.props.oxygenBottlesUsed &&\n            this.props.currentRoundBeingPlayed == this.props.uniqueKey)\n        {\n            //readme: 11 because it takes about 1s for the 10 to be added!\n            //readme: note the condition checking what round we are on, necessary or ALL 7 timers would think they needed to update the timer.\n            AddToTimer(11);\n            oxygenBottlesApplied++;\n        }\n\n        return(\n            <div id={\"TimerCircle\" + this.props.uniqueKey} style={this.props.style}></div>\n        );\n    }\n    //readme: putting this here solved a problem of a red warning the browser dev console when setting state inside Render()\n    componentDidUpdate()\n    {\n        //readme: have no longer got a reason to use this...\n    }\n}\n\nexport default TimerCircle;\n\n\n\n","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\nimport Timer from './Timer';\nimport './ClueOuter.css';\nimport UserGuess from './UserGuess'; \nimport ClueScore from './ClueScore';\nimport TimerCircle from './TimerCircle.js';\n\nclass ClueOuter extends React.Component\n{\n\n    render(){\n        let clue = this.props.clue;\n        let thisRoundId = clue.roundId;\n        let userGuess = this.props.userGuess;\n        let clueOuterClassName = this.props.currentRoundBeingPlayed >= thisRoundId ? \"clueOuterInPlay clueOuter\" : \"clueOuterNotInPlay clueOuter\";\n        let isThisTheCurrentRound = this.props.currentRoundBeingPlayed == thisRoundId;\n        let diverClassName = isThisTheCurrentRound ? \"showBlock\" : \"hideBlock\";\n        let isDiverDead = this.props.roundTheyWereOnWhenTimerExpired != null;\n        let diverDisplay = DiverDisplayFunction(this.props.initializeTimers[clue.roundId - 1],this.props.roundTheyWereOnWhenTimerExpired, clue.roundId);\n\n        function DiverDisplayFunction(initializedTimer, roundTheyWereOnWhenTimerExpired, roundId){\n            //readme: if timer initialized for this round then clock has started so hide the diver...\n            if(initializedTimer != null){\n                //readme: ...unless the timer has run out in which case display the diver on that round\n                //console.log('roundId:'+roundId+' roundExpired '+ roundTheyWereOnWhenTimerExpired + ' initializedTimer: ' + initializedTimer)\n                if(roundTheyWereOnWhenTimerExpired != null && roundId == roundTheyWereOnWhenTimerExpired){\n                    return '';\n                }\n                return  'none'\n            }\n            return '';\n        }\n        const OXYGEN_BOTTLES_AVAILABLE = 5;\n        //console.log(\"lol :\" +isThisTheCurrentRound);\n        return(\n        \n        <div className={clueOuterClassName}>\n            <div style={roundStyle}>\n                {clue.roundId}\n            </div>\n  \n            {/* readme: this below probably should be another Component */}\n            <div style={inlineBlock} name={\"ClueOuterDiv\" + clue.roundId}>\n                <div style={floatLeft}>\n                    {ClueInner(clue, this.props.changeUserGuess, this.props.wordLookupFeedbackMessages[clue.roundId-1], isThisTheCurrentRound)}\n                </div>\n                <TimerCircle \n                    initializeTimers={this.props.initializeTimers} \n                    style={this.props.roundTheyWereOnWhenTimerExpired == clue.roundId ? displayNone : floatLeft} \n                    uniqueKey={clue.roundId}\n                    haltTimer={clue.roundId < this.props.currentRoundBeingPlayed || this.props.resurfaceClicked}\n                    oxygenBottlesUsed={this.props.oxygenBottlesUsed}\n                    currentRoundBeingPlayed={this.props.currentRoundBeingPlayed}\n                    timerRanOut={this.props.timerRanOut}\n                    /> \n                <div style={{...floatLeft,...{position:\"relative\"}}} className={diverClassName}>\n                    <span style={{...diverSpanStyle,...{display:diverDisplay}}}>{clue.roundId == 1 && !isDiverDead ? \"Click Diver To Start\" : \"\"}</span>\n                    <span style={{...diverSpanStyle,...{display:diverDisplay, color: \"red\", top : \"0\"}}}>{isDiverDead ? \"Submit and Dive to recover body\" : \"\"}</span>\n                    <img src=\"images/diver2.png\" height=\"70px\" style={{...isDiverDead ? diverStyleDead : diverStyleAlive,...{display:diverDisplay,paddingBottom:\"20px\"}}} onClick={(event) => this.props.onDiverClick(clue.roundId)}>\n                    </img>                    \n                </div>\n                <div style={floatRight}>\n                    <div style={buttonPadding}>\n                        <button disabled={!isThisTheCurrentRound} className=\"button\" style={{backgroundColor:\"coral\"}} tabIndex={clue.roundId + \"1\"}  onClick={(event) => this.props.onClick(clue.roundId)}>\n                            {clue.roundId == 7 ? \"Complete!\" : \"Submit And Dive\"}\n                        </button>\n                    </div>\n                    <div style={buttonPadding}>\n                        <button disabled={!isThisTheCurrentRound}  className=\"button\" style={{backgroundColor:\"antiquewhite\"}} onClick={(event) =>  this.props.onClickResurface(clue.roundId)}>\n                                Resurface\n                        </button>\n                    </div>\n                    <div style={buttonPadding}>\n                        <button disabled={!isThisTheCurrentRound || (OXYGEN_BOTTLES_AVAILABLE - this.props.oxygenBottlesUsed) < 1} className=\"button\" onClick={(event) => this.props.onClickOxygen(clue.roundId)}>\n                                Refill O<sub>2</sub> (+10s)\n                        </button>\n                        <span style={displayBlock}>{ (OXYGEN_BOTTLES_AVAILABLE - this.props.oxygenBottlesUsed) + \"+ bottles remain\"}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\n// readme: this was once a separate component but I was having to pass from parent to child to child and it felt messy\nfunction ClueInner(clue, onChange, wordLookupFeedbackMessage, isThisTheCurrentRound){\n    // console.log(clue.roundId);   \n    return (\n        <div className='ClueInner' style={style}>\n            <label className='ClueInnerLabel'>{clue.clueText}</label>\n            \n            <UserGuess isThisTheCurrentRound={isThisTheCurrentRound} changeUserGuess={onChange} clueId={clue.roundId} wordLookupFeedbackMessage={wordLookupFeedbackMessage}/>  \n\n            {/* consider making this ClueScores into another component?    */}\n            {/* <div className='ClueScores' style={textAlignLeft}>                \n                {[...Array(clue.roundId)].map((e, i) =>  <ClueScore key={i}/>)}\n            </div> */}\n         \n        </div>\n    );\n}\nvar textAlignLeft ={\n    textAlign: 'left'\n}\n// var diverFontSize={\n//     fontSize: 'xlarge'\n// }\n\nvar diverStyleAlive ={\n    display: 'block',\n    margin: 'auto',\n    transform: 'rotate(0deg)'\n}\nvar diverStyleDead ={\n    display: 'block',\n    margin: 'auto',\n    transform: 'rotate(180deg)',\n    filter: 'grayscale(1)'\n}\nvar diverSpanStyle={\n    position: 'absolute',\n    left: '0',\n    right: '0',\n    bottom: '1%'\n}\nvar style = {\n    fontFamily: 'Arial',\n    margin: '10px',\n    padding: '10px',\n    textAlignLast: 'center'\n  }\nvar roundStyle = {\n    backgroundColor: 'steelblue',\n    color: 'white',\n    fontFamily: 'Arial',\n    left: '10px',\n    width: '20px',\n    textAlign: 'center'\n  }\n\n  var styleTimer = {\n    textAlign: 'center',\n    backgroundColor : 'skyblue',\n    width: '80px',\n    padding: '5px',\n    margin: 'auto',\n    borderRadius: '25px'\n  }\n\n  var inlineBlock = {\n    display: 'inline-block',\n    width: '100%'\n  }\n\nvar buttonPadding = {\n    padding: '5px'\n}\n\n  var floatRight = {\n    float: 'right',\n    width: '33%',\n    textAlign: 'center'\n  }\n\n  var floatNone = {\n      float: 'none',\n      width: '33%'\n  }\n\n  var floatLeft = {\n    float: 'left',\n    width: '33%'\n  }\n\n  var displayBlock={\n    display: 'block'\n  }\n\n  var displayNone ={\n      display: 'none'\n  }\n\nexport default ClueOuter;\n","import React, {useState, Component} from 'react';\nimport Loader from 'react-loader-spinner'\n\nexport default class Spinner extends React.Component {\n //other logic\n   render() {\n    return(\n     <Loader\n        type=\"ThreeDots\"\n        color=\"#00BFFF\"\n        height={100}\n        width={100}\n        timeout={0} //3 secs\n\n     />\n    );\n   }\n}","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nclass UserName extends React.Component\n{\n    //const [count, setCount] = useState(0);\nrender()\n{\n    return (       \n        <div className='UserName'>\n            <label  style={style}>I hereby declare that I, </label>\n            <input maxLength=\"20\" type='text' tabIndex={\"0\"} onBlur={(event) => this.props.changeUserName(event.target.value)} placeholder=\" ... your name ... \"/>\n            <label  style={style}>accept the risk in exploring the Deep Sea.</label>\n            <br/>\n            <br/>\n            <a href=\"#\" style={{color:\"aliceblue\"}} >Then click anywhere to advance.</a>\n        </div>  \n    )\n    }\n}\nvar style = {\n    fontFamily: 'Phosphate,Futura,Rockwell,Impact',\n    margin: '5px 5px 0px 5px',\n    padding: '5px',\n    fontSize: \"larger\"\n  }\nexport default UserName;\n","import ReactModal from 'react-modal';\nimport React, {useState, Component} from 'react';\nimport Spinner from './Loader';\nimport './ResultsModal.css';\nimport ReactTooltip from 'react-tooltip';\n\nclass ResultsModal extends React.Component {\n    constructor () {\n      super();\n      this.state = {\n      };\n\n    }\n    //scoreData={scoreData.TotalScore} scoreDataDetail={scoreData.ClueScores}\n\n    render () {\n      console.log(\"ResultsModal\" + this.props.showModal);\n      \n      if(this.props.showModal == false)\n      {\n        return \"\";\n      }\n\n      if(this.props.scoreData == null)\n      {\n        return (\n              <ReactModal \n              isOpen={this.props.showModal}\n              contentLabel=\"Minimal Modal Example\"\n              appElement={document.getElementById(\"root\")}\n              >\n              <div style={spinnerStyle}><Spinner/></div>\n              </ReactModal>\n        );\n      }\n\n      if(this.props.isDead)\n      {\n        return (\n              <ReactModal \n              isOpen={this.props.showModal}\n              contentLabel=\"Minimal Modal Example\"\n              appElement={document.getElementById(\"root\")}\n              style={{\n                content: {\n                  color: 'red',\n                   backgroundImage: 'url(/images/Wife.png)',\n                   backgroundSize: 'cover',\n                   backgroundPosition: 'center',\n                  //backgroundColor: 'aliceblue',\n                  overflow: 'scroll',\n                  filter: 'drop-shadow(1px 2px 4px darkblue)'\n                }\n              }}\n              >\n              <span className=\"DeadSpan\">Not all treasure hunters return home with loot...\n              <button onClick={this.props.handleReplay} className=\"button\" value=\"Replay\">Dive Again!</button>\n              </span>\n              </ReactModal>\n        );\n      }\n\n      const clueScoringRows = []\n\n      for (let index = 0; index < 7; index++) {\n        const element = this.props.scoreData.clueScores[index];\n        clueScoringRows.push(\n        <tr>\n          <td>{this.props.userGuesses[index]}</td>\n          <td>{element.scorePerClue[0] > 0 ? SuccessImage() : FailImage(index, 0)}</td>\n          <td>{element.scorePerClue[1] > 0 ? SuccessImage() : FailImage(index, 1)}</td>\n          <td>{element.scorePerClue[2] > 0 ? SuccessImage() : FailImage(index, 2)}</td>\n          <td>{element.scorePerClue[3] > 0 ? SuccessImage() : FailImage(index, 3)}</td>\n          <td>{element.scorePerClue[4] > 0 ? SuccessImage() : FailImage(index, 4)}</td>\n          <td>{element.scorePerClue[5] > 0 ? SuccessImage() : FailImage(index, 5)}</td>\n          <td>{\"N/A\"}</td>\n        </tr>)\n      }\n\n      return (\n        <div>\n          \n          <ReactModal \n             isOpen={this.props.showModal}\n             contentLabel=\"Minimal Modal Example\"\n             appElement={document.getElementById(\"root\")}\n             style={{\n              content: {\n                color: 'darkblue',\n                backgroundColor: 'aliceblue',\n                overflow: 'scroll',\n                filter: 'drop-shadow(1px 2px 4px darkblue)'\n              }\n            }}\n            \n          >\n            {this.props.scoreData.isPerfectDive != null && this.props.scoreData.isPerfectDive == 1 ? PerfectDive() : \"\"}\n            <br/>  \n            You {this.props.scoreData.foundTreasure != null && this.props.scoreData.foundTreasure == 1 ? \"succesfully found \" : \"were searching for \" } : <span style={resultStyle}>{this.props.scoreData.wordBeingSought}</span>\n            <br/>\n            You consumed oxygen bottles : <span style={resultStyle}>{this.props.oxygenBottlesUsed}</span>\n            <br/>\n            Total Score: <span style={resultStyle}>${this.props.scoreData.totalScore}m</span>\n            <br/>\n            Top Three Scores for {\"'\"+ this.props.scoreData.wordBeingSought + \"'\"} : \n            {DisplayTopThree(this.props.scoreData.topThreeScores)}\n\n            How you did against all the clues :\n            <br/>\n            <span style={smallerFont}> (hover over e.g 'Clue 2' to be reminded of that clue)</span>\n            <table>\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th data-tip={\"'\" + this.props.clues[0].clueText + \"'\"}>Clue 1</th>\n                    <th data-tip={\"'\" + this.props.clues[1].clueText + \"'\"}>Clue 2</th>\n                    <th data-tip={\"'\" + this.props.clues[2].clueText + \"'\"}>Clue 3</th>\n                    <th data-tip={\"'\" + this.props.clues[3].clueText + \"'\"}>Clue 4</th>\n                    <th data-tip={\"'\" + this.props.clues[4].clueText + \"'\"}>Clue 5</th>\n                    <th data-tip={\"'\" + this.props.clues[5].clueText + \"'\"}>Clue 6</th>\n                    <th data-tip={\"'\" + this.props.clues[6].clueText + \"'\"}>Clue 7</th>\n                  </tr>\n                </thead>\n              <tbody>\n                {clueScoringRows}\n              </tbody>\n            </table>\n            <br/>\n\n            <button onClick={this.props.handleReplay} className=\"button\" value=\"Replay\">Dive Again!</button>\n            <ReactTooltip />\n          </ReactModal>\n        </div>\n      );\n\n      function PerfectDive()\n      {\n        return(\n          <div style={biggerFont}>\n            <span style={blue}>Congratulations </span>\n            <span style={green}>It's </span>\n            <span style={orange}>A </span>\n            <span style={violet}>*PERFECT* </span>\n            <span style={red}>Dive! </span>\n          </div>            \n        ); \n\n      }\n      function SuccessImage()\n      {\n        return(\n            <img src=\"/images/Coin.png\" width=\"25px\" height=\"25px\"/>\n        );\n      }\n\n      function FailImage(answerIndex,clueIndex)\n      {\n        console.log(\"aI: \" + answerIndex + \" cI:\" +clueIndex);\n        let isThisRelevant = (parseInt(clueIndex) <= parseInt(answerIndex));\n        if(!isThisRelevant)\n        {\n          console.log(\"display N/A for aI: \" + answerIndex + \" cI:\" +clueIndex);\n          return \"N/A\";\n        }\n        //readme: otherwise it was relevant - a clue they knew about and didn't meet so FAILED\n        return(\n\n            <img src=\"/images/Skull.jpg\" width=\"25px\" height=\"25px\"/>\n          \n        );\n      }\n\n      function DisplayTopThree(topThree)\n      {\n        console.log(\"DisplayTopThree: \" + topThree[0].playerName);\n        return(\n          <ol>\n          <li>{topThree[0] != null && topThree[0] != undefined ? topThree[0].playerName : \"...no-one yet!\"}<span style={resultStyle}>{topThree[0] != null && topThree[0] != undefined ? \"- $\" + topThree[0].totalPoints + \"m\" : \"\"}</span></li>\n          <li>{topThree[1] != null && topThree[1] != undefined ? topThree[1].playerName : \"...no-one yet!\"}<span style={resultStyle}>{topThree[1] != null && topThree[1] != undefined  ? \"- $\" + topThree[1].totalPoints + \"m\" : \"\"}</span></li>\n          <li>{topThree[2] != null && topThree[2] != undefined ? topThree[2].playerName : \"...no-one yet!\"}<span style={resultStyle}>{topThree[2] != null && topThree[2] != undefined ? \"- $\" + topThree[2].totalPoints + \"m\" : \"\"}</span></li>\n          </ol>\n        );\n      }\n\n    }\n  }\n\nvar smallerFont = {\n  fontSize: 'smaller'\n}\n\nvar biggerFont = {\n  fontSize: 'larger'\n}\n\n  var resultStyle = {\n    color: 'coral',\n    fontFamily: 'Arial',\n    fontSize: 'larger',\n    textAlign: 'left'\n  }\n\n  var red = {\n    color: 'red'\n  }\n  var violet = {\n    color: 'violet'\n  }\n  var green = {\n    color: 'green'\n  }\n  var orange = {\n    color: 'orange'\n  }\n  var blue = {\n    color: 'blue'\n  }\n\n  var spinnerStyle = {\n    margin: \"0 auto\"\n  }\n\n  export default ResultsModal;","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\nimport './GameBoard.css';\nimport ClueOuter from './ClueOuter';\nimport Spinner from './Loader';\nimport UserName from './UserName';\nimport ResultsModal from './ResultsModal';\n\nclass GameBoard extends React.Component\n{\n    addressOfService = \"deepseaword.com\"; //localhost:5000\n    // const [currentRoundBeingPlayed, setCount] = useState(1);\n    constructor(props) {\n        super(props);\n        this.state = {\n          userGuesses: Array(7).fill(null),\n          currentRound: 1,\n          oxygenBottlesUsed: 0,\n          initializeTimers: Array(7).fill(null),\n          clues: null,\n          roundTheyWereOnWhenTimerExpired: null,\n          isLoadingPage: true,\n          wordLookupFeedbackMessages: Array(7).fill(null),\n          userName: \"\",\n          showModal: false,\n          dictionaryCheckInProgress: false,\n          scoreData: null,\n          scoreLoading: false,\n          resurfaceClicked: false\n        };\n      }\n\n     updateWordFeedback(thisRoundNumber, message){\n      const wordLookupFeedbackMessagesCopy = this.state.wordLookupFeedbackMessages.slice();\n      wordLookupFeedbackMessagesCopy[thisRoundNumber-1] = message;\n      this.setState({wordLookupFeedbackMessages : wordLookupFeedbackMessagesCopy})\n     }\n \n     checkWord(thisRoundNumber,userGuess){\n      console.log(thisRoundNumber + \" checkWord : \" +userGuess )\n      this.updateWordFeedback(thisRoundNumber,'Checking dictionary...');\n\n      if(userGuess == \"\" || userGuess == null)\n      {\n        this.updateWordFeedback(thisRoundNumber,'Enter word then Submit and Dive');\n        return false;\n      }\n      if(this.state.dictionaryCheckInProgress)\n      {\n        this.updateWordFeedback(thisRoundNumber,'Double-clickers will be left behind!');\n        return false;\n      }\n\n      this.setState({dictionaryCheckInProgress: true}); \n      \n      //https://deepseaworddotnetservice.azurewebsites.net/Entries\n      fetch('http://' + this.addressOfService + '/Entries/LookupWord?word=' + userGuess)\n        .then(res => res.json())\n        .then((data) => {\n          //this.setState({ clues: data })\n          if(data != null)\n          {\n            //console.log('word def:' + data.definition);\n            // readme: word was a real word.\n            this.updateWordFeedback(thisRoundNumber,'Found in dictionary.');\n            this.setState({currentRound: thisRoundNumber+1});\n            if(thisRoundNumber < 7)\n            {\n              this.handleDiverClick(thisRoundNumber+1);\n            }\n            else\n            {\n              //readme: kick-off the completion code.\n              //perform scoring and open lightbox to display response to that?\n              this.setState({showModal: true});\n              this.SendToScoringService();  \n            }\n          }\n          else\n          {\n            this.updateWordFeedback(thisRoundNumber,'NOT found - try another!');\n          }\n          this.setState({dictionaryCheckInProgress: false}); \n\n      })\n      .catch( ()=>\n      {\n        this.updateWordFeedback(thisRoundNumber,'Apparatus failure. Try again')\n      });\n    }\n\n    SendToScoringService = () => {\n\n              this.setState({scoreLoading: true});\n              let clueInfo = Array(7).fill(null);\n              clueInfo = this.state.clues.clues.map(item => item.significantClueInfo)\n\n              const formData = new FormData();\n\n              formData.append('GUID', this.state.clues.guid);\n              formData.append('userName', this.state.userName);\n              //readme: replace 14 lines these with LOOPS!\n              formData.append('userGuesses[0]', (this.state.userGuesses[0] != null ? this.state.userGuesses[0] : 'realnull' ));\n              formData.append('userGuesses[1]', (this.state.userGuesses[1] != null ? this.state.userGuesses[1] : 'realnull' ));\n              formData.append('userGuesses[2]', (this.state.userGuesses[2] != null ? this.state.userGuesses[2] : 'realnull' ));\n              formData.append('userGuesses[3]', (this.state.userGuesses[3] != null ? this.state.userGuesses[3] : 'realnull' ));\n              formData.append('userGuesses[4]', (this.state.userGuesses[4] != null ? this.state.userGuesses[4] : 'realnull' ));\n              formData.append('userGuesses[5]', (this.state.userGuesses[5] != null ? this.state.userGuesses[5] : 'realnull' ));\n              formData.append('userGuesses[6]', (this.state.userGuesses[6] != null ? this.state.userGuesses[6] : 'realnull' ));\n              formData.append('clueInfo[0]', clueInfo[0]);\n              formData.append('clueInfo[1]', clueInfo[1]);\n              formData.append('clueInfo[2]', clueInfo[2]);\n              formData.append('clueInfo[3]', clueInfo[3]);\n              formData.append('clueInfo[4]', clueInfo[4]);\n              formData.append('clueInfo[5]', clueInfo[5]);\n              formData.append('clueInfo[6]', clueInfo[6]);\n              formData.append('oxygenUsed', this.state.oxygenBottlesUsed);\n              formData.append('isDead', this.state.roundTheyWereOnWhenTimerExpired != null)\n\n              //http://deepseaworddotnetservice.azurewebsites.net\n              fetch('http://' + this.addressOfService + '/Entries/SubmitForScoring/', {\n                    method: 'POST',\n                    body: formData\n                  })\n                  .then(response => response.json())\n                  .then(data => {\n\n                    this.setState({scoreLoading: false, scoreData: data});\n\n                  });\n\n    }\n\n    handleReplay = () => {\n      this.componentDidMount()\n      //this.render();\n    }\n\n    handleResurfaceClick = (thisRoundNumber) =>{\n      this.setState({resurfaceClicked: true});\n      this.setState({showModal: true});\n      this.SendToScoringService();  \n    }\n\n    handleSubmitAndDiveClick = (thisRoundNumber) => {\n      //readme: checking the word is good before advancing\n\n        if(this.state.initializeTimers[0] == null)\n        {\n          alert(\"Please click the diver image to start the timer \\n  \");\n        }\n        else if(this.state.roundTheyWereOnWhenTimerExpired != null)\n        {\n          this.setState({showModal: true});\n          this.SendToScoringService();  \n        }\n        else\n        {\n          this.checkWord(thisRoundNumber, this.state.userGuesses[thisRoundNumber-1]);\n        }\n    };\n\n      handleDiverClick = (thisRoundNumber) =>{\n          //alert('Clicked on diver' + thisRoundNumber);\n          const initializeTimersCopy = this.state.initializeTimers.slice();\n          // readme: timer has been initialized\n          initializeTimersCopy[thisRoundNumber-1] = 1;\n          this.setState({initializeTimers : initializeTimersCopy})\n      }\n\n      handleOxygenClick = (thisRoundNumber) => {\n        //readme: not sure if I'll want to count which round the oxygen was used in, might leave param there til i decide\n        let oxygenBottlesUsedNew = this.state.oxygenBottlesUsed + 1;\n        this.setState({oxygenBottlesUsed: oxygenBottlesUsedNew});\n      };\n      \n    //   readme: this is an example of 2 pieces of info being returned to the parent from a child so we can update the state\n      handleChangeUserGuess = (userGuess,i) => {\n        const userGuessesCopy = this.state.userGuesses.slice();\n        userGuessesCopy[i-1] = userGuess;\n        this.setState({userGuesses: userGuessesCopy});\n     }\n\n     handleEnterUserName = (theirUserName) => {\n       this.setState({userName: theirUserName});\n     }\n\n     handleTimerRanOut = (i) => {\n        this.setState({roundTheyWereOnWhenTimerExpired: i})\n        //todo: drown him!\n     }\n\n     componentDidMount() {\n       // readme: resets all state except username and then fetch a new word\n      this.setState({\n        userGuesses: Array(7).fill(null),\n        currentRound: 1,\n        oxygenBottlesUsed: 0,\n        initializeTimers: Array(7).fill(null),\n        clues: null,\n        roundTheyWereOnWhenTimerExpired: null,\n        isLoadingPage: true,\n        wordLookupFeedbackMessages: Array(7).fill(null),\n        showModal: false,\n        dictionaryCheckInProgress: false,\n        scoreData: null,\n        scoreLoading: false,\n        resurfaceClicked: false\n        //userName: \"\"\n      });\n      \n      fetch('http://' + this.addressOfService + '/Entries/GetWordWithClues?userName=' + this.state.userName)\n          .then(res => res.json())\n          .then((data) => {\n            this.setState({ clues: data, isLoadingPage: false })\n        })\n        .catch(console.log)\n      }\n\n      render()\n      {\n        // let clues = GetJson();\n        // let parsedClues = JSON.parse(clues);\n        let parsedClues = this.state.clues; \n\n        // console.log(parsedClues);\n        // console.log(\" and \")\n        // console.log(parsedClues2);\n        return (\n            <div className=\"background center-screen\">\n                <div className='TitleBar' style={titleStyle}>\n                    DeepSeaWord                  \n                </div>\n                <div style={creditStyle}>\n                    by Chris Kerr                     \n                </div>\n                <div className='GameBoard' style={instructionsStyle}>\n                    In every round submit a word that meets that clue and all previous clues. <br/> \n                    Dont run out of oxygen! If the timer expires so do you! <br/> \n                    High scores require: speed, valid words, limited oxygen refills \n                    and finding that treasure!  \n                  \n                    {this.state.isLoadingPage || this.state.userName == \"\" ? <div><Spinner/><UserName changeUserName={this.handleEnterUserName}/></div>  : this.renderClues(parsedClues)}\n                    {this.renderScore()}\n                </div>\n   \n            </div>\n            )\n        }\n        renderScore()\n        {\n          console.log(\"renderScore(scoreData)\");\n          \n          if (this.state.clues == null)\n          {\n            return null;\n          }\n\n          return(\n              \n                  <ResultsModal isDead={this.state.roundTheyWereOnWhenTimerExpired != null} clues={this.state.clues.clues} scoreData={this.state.scoreData} userGuesses={this.state.userGuesses} oxygenBottlesUsed={this.state.oxygenBottlesUsed} showModal={this.state.showModal} handleReplay={this.handleReplay}/>\n              \n          );\n        }\n\n        renderClues(parsedClues)\n        {\n            let rows = [];\n            var x = parsedClues;\n            if(x != null)\n            {\n              //console.log(x.clues[0]);\n            \n              for(var i = 1; i < parsedClues.clues.length + 1; i++){\n                  rows.push(this.renderClue(i, parsedClues.clues[i-1]));  \n              }\n            }\n\n            return rows;\n        }\n\n        renderClue(i, clue)\n        {\n            return (\n                //readme: wonder at what point its an antipattern to pass so much down.\n                <ClueOuter \n                    style={style} \n                    clue={clue} \n                    key={i} \n                    userGuess={this.state.userGuesses[i-1]} \n                    onClick={this.handleSubmitAndDiveClick} \n                    onClickResurface={this.handleResurfaceClick} \n                    onClickOxygen={this.handleOxygenClick} \n                    changeUserGuess={this.handleChangeUserGuess} \n                    currentRoundBeingPlayed={this.state.currentRound}\n                    initializeTimers={this.state.initializeTimers}\n                    onDiverClick={this.handleDiverClick}\n                    oxygenBottlesUsed={this.state.oxygenBottlesUsed}  \n                    timerRanOut={this.handleTimerRanOut}\n                    roundTheyWereOnWhenTimerExpired={this.state.roundTheyWereOnWhenTimerExpired}\n                    wordLookupFeedbackMessages={this.state.wordLookupFeedbackMessages}    \n                    resurfaceClicked={this.state.resurfaceClicked}              \n                    />   \n            );\n        }\n}\n\nvar instructionsStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'white',\n    // readme: hehe 'Arial', get it?\n    fontFamily: 'Arial',\n    fontSize: '13px',\n    // margin: '20px 200px 40px 200px',\n    padding: '20px',\n\n    textAlign: 'center',\n    // readme: better on mobile if no % here\n    // width: '60%'\n}\n\nvar style = {\n    backgroundColor: 'lightblue',\n    color: 'darkblue',\n    // readme: hehe 'Arial', get it?\n    fontFamily: 'Arial',\n    fontSize: '12px',\n    // margin: '20px 200px 40px 200px',\n    padding: '20px',\n    textAlign: 'left'\n  }\n\n  var creditStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'gold',\n    fontFamily: 'Cochin',\n    fontSize: '11px',\n    textAlign: 'Center',\n    top: '0px'\n  }\n\n\nvar titleStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'yellow',\n    fontFamily: 'Phosphate,Futura,Rockwell',\n    fontSize: '45px',\n    textAlign: 'Center',\n    top: '0px'\n  }\n\n\nexport default GameBoard;\n","import React, {Component} from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Chris from './Chris';\nimport GameBoard from './GameBoard';\n\nrender(\n  <GameBoard/>,\n  document.getElementById('root') \n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}