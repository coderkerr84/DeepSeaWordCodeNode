{"version":3,"sources":["logo.svg","serviceWorker.js","Chris.js","Timer.js","UserGuess.js","ClueScore.js","TimerCircle.js","ClueOuter.js","ClueOuterList.js","Loader.js","UserName.js","GameBoard.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Chris","Timer","UserGuess","className","style","disabled","this","props","isThisTheCurrentRound","width","height","fontSize","type","tabIndex","clueId","onBlur","event","changeUserGuess","target","value","wordLookupFeedbackMessage","React","Component","fontFamily","margin","padding","COLOR_CODES","info","color","warning","threshold","alert","timePassed","timeLeft","timerInterval","Array","fill","remainingPathColor","oxygenBottlesApplied","timerRanOutCallback","Init","uniqueKey","onTimesUp","console","log","document","getElementById","innerHTML","formatTime","setInterval","circleDasharray","rawTimeFraction","calculateTimeFraction","toFixed","setAttribute","setCircleDasharray","classList","remove","add","setRemainingPathColor","undefined","ResetTimer","startTimer","clearInterval","time","minutes","Math","floor","seconds","TimerCircle","sec","timerRanOut","initializeTimers","haltTimer","oxygenBottlesUsed","currentRoundBeingPlayed","id","ClueOuter","clue","thisRoundId","roundId","clueOuterClassName","userGuess","diverClassName","isDiverDead","roundTheyWereOnWhenTimerExpired","diverDisplay","initializedTimer","DiverDisplayFunction","roundStyle","inlineBlock","name","floatLeft","onChange","clueText","ClueInner","wordLookupFeedbackMessages","displayNone","diverSpanStyle","display","src","diverStyleDead","diverStyleAlive","onClick","onDiverClick","floatRight","buttonPadding","backgroundColor","onClickOxygen","displayBlock","transform","filter","position","bottom","textAlignLast","left","textAlign","float","Spinner","timeout","UserName","changeUserName","placeholder","GameBoard","handleReplay","componentDidMount","handleSubmitAndDiveClick","thisRoundNumber","checkWord","state","userGuesses","handleDiverClick","initializeTimersCopy","slice","setState","handleOxygenClick","oxygenBottlesUsedNew","handleChangeUserGuess","i","userGuessesCopy","handleEnterUserName","theirUserName","userName","handleTimerRanOut","currentRound","clues","isLoadingPage","message","wordLookupFeedbackMessagesCopy","updateWordFeedback","fetch","then","res","json","data","temporaryWord","catch","parsedClues2","titleStyle","creditStyle","instructionsStyle","renderClues","parsedClues","rows","length","push","renderClue","key","top","Book","title","author","pages","freeBookmark","createElement","render","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b4663bf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nfunction Chris(){\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <p>You clicked {count} times</p>\n            <button onClick={() => setCount(count + 1)}>\n            Click me\n            </button>\n        </div>\n    )\n}\n\nexport default Chris;\n","import React, { Component } from 'react';\nimport { View,Text,Button,StyleSheet } from 'react';\nimport  { useEffect, useState } from \"react\";\n/*\n borrowed from here:\n https://www.digitalocean.com/community/tutorials/react-countdown-timer-react-hooks\n and consider wapping to this more beautiful one:\n https://css-tricks.com/how-to-create-an-animated-countdown-timer-with-html-css-and-javascript/\n \n*/\nfunction Timer() {\n    const calculateTimeLeft = () => {\n      let year = new Date().getFullYear();\n      const difference = +new Date(`${year}-10-1`) - +new Date();\n      let timeLeft = {};\n      const countdownFromSeconds = 60;\n      if (difference > 0) {\n        timeLeft = {\n          seconds: Math.floor((difference / 1000) % countdownFromSeconds),\n        };\n      }\n  \n      return timeLeft;\n    };\n    //readme: hooks?\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n    // readme: this next line appears to be not needed\n    const [year] = useState(new Date().getFullYear());\n  \n    useEffect(() => {\n      setTimeout(() => {\n        setTimeLeft(calculateTimeLeft());\n      }, 1000);\n    });\n  \n    const timerComponents = [];\n  \n    Object.keys(timeLeft).forEach((interval) => {\n      if (!timeLeft[interval]) {\n        return;\n      }\n  \n      timerComponents.push(\n        <span>\n          {timeLeft[interval]} {\"s \"}\n        </span>\n      );\n    });\n    return (\n      <span>\n        {timerComponents.length ? timerComponents : <span>Time's up!</span>}\n      </span>\n    );\n  }\n  \n  export default Timer;","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nclass UserGuess extends React.Component\n{\n    //const [count, setCount] = useState(0);\nrender()\n{\n    return (\n        \n        <div className='UserGuess' style={style}>\n            <input disabled={!this.props.isThisTheCurrentRound} style={{width:'100px',height:'30px', fontSize:'larger'}} type='text' tabIndex={this.props.clueId + \"0\"} onBlur={(event) => this.props.changeUserGuess(event.target.value, this.props.clueId)}>\n            </input>\n            <div>{this.props.wordLookupFeedbackMessage}</div>\n        </div>  \n    )\n    }\n}\nvar style = {\n    fontFamily: 'Arial',\n    margin: '5px 5px 0px 0px',\n    padding: '1px'\n  }\nexport default UserGuess;\n","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nfunction ClueScore(){\n\n    return (\n        \n            <input type='Radio' color='lime' style={scoreStyle}/>\n        \n    )\n}\nvar scoreStyle = {\n    fontFamily: 'Arial',\n    margin: '5px 5px 0px 0px',\n    padding: '1px'\n  }\nexport default ClueScore;\n","// Credit: Mateusz Rybczonec\nimport React, {useState, Component} from 'react';\nimport './TimerCircle.css';\n\nconst FULL_DASH_ARRAY = 283;\nconst WARNING_THRESHOLD = 10;\nconst ALERT_THRESHOLD = 5;\nconst TIMER_NEEDS_INITIALIZING = 1;\nconst TIMER_HAS_BEEN_INITIALIZED = 2;\n\n\nconst COLOR_CODES = {\n  info: {\n    color: \"green\"\n  },\n  warning: {\n    color: \"orange\",\n    threshold: WARNING_THRESHOLD\n  },\n  alert: {\n    color: \"red\",\n    threshold: ALERT_THRESHOLD\n  }\n};\n\n//readme: these variables are shared by all TimerCircles (unlike State which they each have their own)\nconst TIME_LIMIT = 90;\nlet timePassed = 0;\nlet timeLeft = TIME_LIMIT;\nlet timerInterval =  Array(7).fill(null);\nlet remainingPathColor = COLOR_CODES.info.color;\nlet oxygenBottlesApplied = 0;\nlet timerRanOutCallback = null;\n// readme: not certain I need this next variable? Because this is global to all timers it saves me passing it back to here from the GameBoard state\n// but maybe having a copy here is undesirable and i should use the state one.\nlet roundTheyWereOnWhenTimerExpired = null;\n\nfunction Init(uniqueKey)\n{\n        // INIT;\n        timerInterval =  Array(7).fill(null);\n\n        onTimesUp(uniqueKey);\n\n        /*\n        * readme: bring these two back in if you want the timer to NOT be shared across all rounds\n        timePassed = 0;\n        timeLeft = TIME_LIMIT;\n        */\n        timerInterval[uniqueKey] = null;\n        remainingPathColor = COLOR_CODES.info.color;\n    \n        console.log('Timer started' + uniqueKey);\n        document.getElementById(\"TimerCircle\" + uniqueKey).innerHTML = '<div class=\"base-timer\"><svg class=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">   <g class=\"base-timer__circle\">    <circle class=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>    <path      id=\"base-timer-path-remaining'+uniqueKey+'\"      stroke-dasharray=\"283\"       class=\"base-timer__path-remaining '+remainingPathColor+'\"      d=\"        M 50, 50        m -45, 0        a 45,45 0 1,0 90,0        a 45,45 0 1,0 -90,0      \"    ></path>  </g></svg><span id=\"base-timer-label'+uniqueKey+'\" class=\"base-timer__label\">'+formatTime(timeLeft)+'</span></div>';\n        startTimer(uniqueKey);\n}\n\nfunction ResetTimer()\n{\n  //readme: reset the shared static timer vars - be careful when calling this as don't want to reset in between rounds \n  timePassed = 0;\n  timeLeft = TIME_LIMIT;\n}\n\nfunction AddToTimer(sec)\n{\n    console.log('timePassed'+ timePassed);\n    timePassed -= sec;\n}\n\nfunction onTimesUp(uniqueKey) {\n  clearInterval(timerInterval[uniqueKey]);\n}\n\nfunction startTimer(uniqueKey) {\n    timerInterval[uniqueKey] = setInterval(() => {\n    if(document.getElementById(\"base-timer-label\" + uniqueKey))\n    {\n      timePassed = timePassed += 1;\n      timeLeft = TIME_LIMIT - timePassed;\n      // readme: only do stuff if html rendered\n\n        document.getElementById(\"base-timer-label\" + uniqueKey).innerHTML = formatTime(\n          timeLeft\n        );\n        setCircleDasharray(uniqueKey);\n        setRemainingPathColor(timeLeft,uniqueKey);\n\n        if (timeLeft === 0) {\n          onTimesUp(uniqueKey);\n          if(timerRanOutCallback != null && timerRanOutCallback != undefined \n            && uniqueKey != null && uniqueKey != undefined)\n          {\n            timerRanOutCallback(uniqueKey);\n            roundTheyWereOnWhenTimerExpired = uniqueKey;\n            // readme: so if the timer runs out, then here I reset the timers for the next time they might be used\n            ResetTimer();\n          }\n        }\n    } else\n    {\n      // readme: hmm, I dont fully understand this - assume this else hit when doing a \"Replay\" and clears out stuff ahead of reusing timer class vars\n      ResetTimer();\n      onTimesUp(uniqueKey);\n    }\n  }, 1000);\n}\n\nfunction formatTime(time) {\n  const minutes = Math.floor(time / 60);\n  let seconds = time % 60;\n\n  if (seconds < 10) {\n    seconds = `0${seconds}`;\n  }\n\n  return `${minutes}:${seconds}`;\n}\n\nfunction setRemainingPathColor(timeLeft,uniqueKey) {\n  const { alert, warning, info } = COLOR_CODES;\n  if (timeLeft <= alert.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(warning.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(alert.color);\n  } else if (timeLeft <= warning.threshold) {\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.remove(info.color);\n    document\n      .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n      .classList.add(warning.color);\n  }\n}\n\nfunction calculateTimeFraction() {\n  const rawTimeFraction = timeLeft / TIME_LIMIT;\n  return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);\n}\n\nfunction setCircleDasharray(uniqueKey) {\n  const circleDasharray = `${(\n    calculateTimeFraction() * FULL_DASH_ARRAY\n  ).toFixed(0)} 283`;\n  document\n    .getElementById(\"base-timer-path-remaining\" + uniqueKey)\n    .setAttribute(\"stroke-dasharray\", circleDasharray);\n}\n\nclass TimerCircle extends React.Component\n{ \n    // readme: dont appear to need each Timer to have their own state.\n    // am happy sharing the timer variables globally across all Timers (e.g. TimePassed and oxygenBottlesApplied are used by all 7)\nrender()\n    {\n      timerRanOutCallback = this.props.timerRanOut;\n        //console.log('Got here' + this.props.initializeTimers[this.props.uniqueKey - 1] + ' ' + this.props.uniqueKey);\n        \n        // readme: '1' means the timer's div is ready and the timer can be initialized. '2' means it's all setup, dont reinit it as that would reset it.\n        if(this.props.initializeTimers[this.props.uniqueKey - 1] == TIMER_NEEDS_INITIALIZING)\n        {\n            Init(this.props.uniqueKey);\n            //readme: to my surprise changing this array prop seems to change the STATE (possibly am breaking a pattern)\n            //readme: will leave for now, but could change later to a callback to the GameBoard and change the state in there instead.\n            this.props.initializeTimers[this.props.uniqueKey - 1] = TIMER_HAS_BEEN_INITIALIZED;\n        }\n\n        // readme: haltTimer will be true for any rounds that aren't the current round.\n        if(this.props.haltTimer)\n        {   \n            onTimesUp(this.props.uniqueKey);          \n        }\n\n        if(oxygenBottlesApplied < this.props.oxygenBottlesUsed &&\n            this.props.currentRoundBeingPlayed == this.props.uniqueKey)\n        {\n            //readme: 11 because it takes about 1s for the 10 to be added!\n            //readme: note the condition checking what round we are on, necessary or ALL 7 timers would think they needed to update the timer.\n            AddToTimer(11);\n            oxygenBottlesApplied++;\n        }\n\n        return(\n            <div id={\"TimerCircle\" + this.props.uniqueKey} style={this.props.style}></div>\n        );\n    }\n    //readme: putting this here solved a problem of a red warning the browser dev console when setting state inside Render()\n    componentDidUpdate()\n    {\n        //readme: have no longer got a reason to use this...\n    }\n}\n\nexport default TimerCircle;\n\n\n\n","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\nimport Timer from './Timer';\nimport './ClueOuter.css';\nimport UserGuess from './UserGuess'; \nimport ClueScore from './ClueScore';\nimport TimerCircle from './TimerCircle.js';\n\nclass ClueOuter extends React.Component\n{\n\n    render(){\n        let clue = this.props.clue;\n        let thisRoundId = clue.roundId;\n        let userGuess = this.props.userGuess;\n        let clueOuterClassName = this.props.currentRoundBeingPlayed >= thisRoundId ? \"clueOuterInPlay clueOuter\" : \"clueOuterNotInPlay clueOuter\";\n        let isThisTheCurrentRound = this.props.currentRoundBeingPlayed == thisRoundId;\n        let diverClassName = isThisTheCurrentRound ? \"showBlock\" : \"hideBlock\";\n        let isDiverDead = this.props.roundTheyWereOnWhenTimerExpired != null;\n        let diverDisplay = DiverDisplayFunction(this.props.initializeTimers[clue.roundId - 1],this.props.roundTheyWereOnWhenTimerExpired, clue.roundId);\n\n        function DiverDisplayFunction(initializedTimer, roundTheyWereOnWhenTimerExpired, roundId){\n            //readme: if timer initialized for this round then clock has started so hide the diver...\n            if(initializedTimer != null){\n                //readme: ...unless the timer has run out in which case display the diver on that round\n                //console.log('roundId:'+roundId+' roundExpired '+ roundTheyWereOnWhenTimerExpired + ' initializedTimer: ' + initializedTimer)\n                if(roundTheyWereOnWhenTimerExpired != null && roundId == roundTheyWereOnWhenTimerExpired){\n                    return '';\n                }\n                return  'none'\n            }\n            return '';\n        }\n        const OXYGEN_BOTTLES_AVAILABLE = 5;\n        //console.log(\"lol :\" +isThisTheCurrentRound);\n        return(\n        \n        <div className={clueOuterClassName}>\n            <div style={roundStyle}>\n                {clue.roundId}\n            </div>\n  \n            {/* readme: this below probably should be another Component */}\n            <div style={inlineBlock} name={\"ClueOuterDiv\" + clue.roundId}>\n                <div style={floatLeft}>\n                    {ClueInner(clue, this.props.changeUserGuess, this.props.wordLookupFeedbackMessages[clue.roundId-1], isThisTheCurrentRound)}\n                </div>\n                <TimerCircle \n                    initializeTimers={this.props.initializeTimers} \n                    style={this.props.roundTheyWereOnWhenTimerExpired == clue.roundId ? displayNone : floatLeft} \n                    uniqueKey={clue.roundId}\n                    haltTimer={clue.roundId < this.props.currentRoundBeingPlayed}\n                    oxygenBottlesUsed={this.props.oxygenBottlesUsed}\n                    currentRoundBeingPlayed={this.props.currentRoundBeingPlayed}\n                    timerRanOut={this.props.timerRanOut}\n                    /> \n                <div style={floatLeft} className={diverClassName}>\n                    <span style={{...diverSpanStyle,...{display:diverDisplay}}}>{clue.roundId == 1 ? \"Click Diver To Start\" : \"\"}</span>\n                    <img src=\"images/diver2.png\" height=\"80px\" style={{...isDiverDead ? diverStyleDead : diverStyleAlive,...{display:diverDisplay}}} onClick={(event) => this.props.onDiverClick(clue.roundId)}>\n                    </img>                    \n                </div>\n                <div style={floatRight}>\n                    <div style={buttonPadding}>\n                        <button disabled={!isThisTheCurrentRound} className=\"button\" style={{backgroundColor:\"coral\"}} tabIndex={clue.roundId + \"1\"}  onClick={(event) => this.props.onClick(clue.roundId)}>\n                            {clue.roundId == 7 ? \"Complete!\" : \"Submit And Dive\"}\n                        </button>\n                    </div>\n                    <div style={buttonPadding}>\n                        <button disabled={!isThisTheCurrentRound}  className=\"button\" style={{backgroundColor:\"antiquewhite\"}} onClick={function() { alert('Resurface'); }}>\n                                Resurface\n                        </button>\n                    </div>\n                    <div style={buttonPadding}>\n                        <button disabled={!isThisTheCurrentRound || (OXYGEN_BOTTLES_AVAILABLE - this.props.oxygenBottlesUsed) < 1} className=\"button\" onClick={(event) => this.props.onClickOxygen(clue.roundId)}>\n                                Refill O<sub>2</sub> (+10s)\n                        </button>\n                        <span style={displayBlock}>{ (OXYGEN_BOTTLES_AVAILABLE - this.props.oxygenBottlesUsed) + \"+ bottles remain\"}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\n// readme: this was once a separate component but I was having to pass from parent to child to child and it felt messy\nfunction ClueInner(clue, onChange, wordLookupFeedbackMessage, isThisTheCurrentRound){\n    // console.log(clue.roundId);   \n    return (\n        <div className='ClueInner' style={style}>\n            <label className='ClueInnerLabel'>{clue.clueText}</label>\n            \n            <UserGuess isThisTheCurrentRound={isThisTheCurrentRound} changeUserGuess={onChange} clueId={clue.roundId} wordLookupFeedbackMessage={wordLookupFeedbackMessage}/>  \n\n            {/* consider making this ClueScores into another component?    */}\n            {/* <div className='ClueScores' style={textAlignLeft}>                \n                {[...Array(clue.roundId)].map((e, i) =>  <ClueScore key={i}/>)}\n            </div> */}\n         \n        </div>\n    );\n}\nvar textAlignLeft ={\n    textAlign: 'left'\n}\n// var diverFontSize={\n//     fontSize: 'xlarge'\n// }\n\nvar diverStyleAlive ={\n    display: 'block',\n    margin: 'auto',\n    transform: 'rotate(0deg)'\n}\nvar diverStyleDead ={\n    display: 'block',\n    margin: 'auto',\n    transform: 'rotate(180deg)',\n    filter: 'grayscale(1)'\n}\nvar diverSpanStyle={\n    position: 'absolute',\n    bottom: '4%'\n}\nvar style = {\n    fontFamily: 'Arial',\n    margin: '10px',\n    padding: '10px',\n    textAlignLast: 'center'\n  }\nvar roundStyle = {\n    backgroundColor: 'steelblue',\n    color: 'white',\n    fontFamily: 'Arial',\n    left: '10px',\n    width: '20px',\n    textAlign: 'center'\n  }\n\n  var styleTimer = {\n    textAlign: 'center',\n    backgroundColor : 'skyblue',\n    width: '80px',\n    padding: '5px',\n    margin: 'auto',\n    borderRadius: '25px'\n  }\n\n  var inlineBlock = {\n    display: 'inline-block',\n    width: '100%'\n  }\n\nvar buttonPadding = {\n    padding: '5px'\n}\n\n  var floatRight = {\n    float: 'right',\n    width: '33%',\n    textAlign: 'center'\n  }\n\n  var floatNone = {\n      float: 'none',\n      width: '33%'\n  }\n\n  var floatLeft = {\n    float: 'left',\n    width: '33%'\n  }\n\n  var displayBlock={\n    display: 'block'\n  }\n\n  var displayNone ={\n      display: 'none'\n  }\n\nexport default ClueOuter;\n","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\nimport ClueInner from './ClueInner';\nimport ClueOuter from './ClueOuter';\n\n// readme: hoping to abandon this class\n\nclass ClueOuterList extends React.Component\n{\n    render(){\n        //console.log(this.props.clues);\n        let parsedClues = JSON.parse(this.props.clues);\n        //console.log(parsedClues.table);\n        let d = CreateOuters(parsedClues.table, this.props.userGuesses);\n        return(\n        <div className='ClueOuterList' style={style}>\n            {/* here we print out all the contents of the d object */}\n            {d.map(x => x)}\n        </div>\n        );\n    }\n}\n\nfunction CreateOuters(clues, userGuesses)\n{\n    console.log(clues.length); \n    let rows = [];\n    for(var i = 1; i < clues.length + 1; i++){\n      //console.log('x' + clues.table);  \n      rows.push(<ClueOuter roundNum={i} clue={clues[i-1]} key={i} userGuess={userGuesses[i-1]}/>);\n    }\n    return rows;\n}\n\nvar style = {\n    margin: 'auto',\n    width: '90%',\n    padding: '10px'\n  }\n\nexport default ClueOuterList;   \n","import React, {useState, Component} from 'react';\nimport Loader from 'react-loader-spinner'\n\nexport default class Spinner extends React.Component {\n //other logic\n   render() {\n    return(\n     <Loader\n        type=\"ThreeDots\"\n        color=\"#00BFFF\"\n        height={100}\n        width={100}\n        timeout={0} //3 secs\n\n     />\n    );\n   }\n}","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\n\nclass UserName extends React.Component\n{\n    //const [count, setCount] = useState(0);\nrender()\n{\n    return (       \n        <div className='UserName'>\n            <label  style={style}>I, the willing diver, </label>\n            <input type='text' tabIndex={\"0\"} onBlur={(event) => this.props.changeUserName(event.target.value)} placeholder=\" ... your name ... \"/>\n            \n            <label  style={style}>accept the risk in exploring the deep ocean.</label>\n            <br/>\n            <br/>\n            Click anywhere to advance.\n        </div>  \n    )\n    }\n}\nvar style = {\n    fontFamily: 'Phosphate,Futura,Rockwell',\n    margin: '5px 5px 0px 5px',\n    padding: '5px',\n    fontSize: \"larger\"\n  }\nexport default UserName;\n","import React, {useState, Component} from 'react';\nimport {render} from 'react-dom';\nimport ClueOuterList from './ClueOuterList';\nimport './GameBoard.css';\nimport ClueOuter from './ClueOuter';\nimport Spinner from './Loader';\nimport UserName from './UserName';\nclass GameBoard extends React.Component\n{ \n    // const [currentRoundBeingPlayed, setCount] = useState(1);\n    constructor(props) {\n        super(props);\n        this.state = {\n          userGuesses: Array(7).fill(null),\n          currentRound: 1,\n          oxygenBottlesUsed: 0,\n          initializeTimers: Array(7).fill(null),\n          clues: null,\n          roundTheyWereOnWhenTimerExpired: null,\n          isLoadingPage: true,\n          wordLookupFeedbackMessages: Array(7).fill(null),\n          userName: \"\"\n        };\n      }\n\n     updateWordFeedback(thisRoundNumber, message){\n      const wordLookupFeedbackMessagesCopy = this.state.wordLookupFeedbackMessages.slice();\n      wordLookupFeedbackMessagesCopy[thisRoundNumber-1] = message;\n      this.setState({wordLookupFeedbackMessages : wordLookupFeedbackMessagesCopy})\n     }\n\n     checkWord(thisRoundNumber,userGuess){\n\n      this.updateWordFeedback(thisRoundNumber,'Checking dictionary...');\n\n      fetch('https://deepseaworddotnetservice.azurewebsites.net/Entries/LookupWord?word=' + userGuess)\n        .then(res => res.json())\n        .then((data) => {\n          //this.setState({ clues: data })\n          if(data != null)\n          {\n            //console.log('word def:' + data.definition);\n            // readme: word was a real word.\n            this.updateWordFeedback(thisRoundNumber,'Found in dictionary.');\n            this.setState({currentRound: thisRoundNumber+1});\n            if(thisRoundNumber < 7)\n            {\n              this.handleDiverClick(thisRoundNumber+1);\n            }\n            else\n            {\n              //readme: kick-off the completion code.\n              //perform scoring and open lightbox to display response to that?\n              alert('You were searching for : ' + this.state.clues.temporaryWord\n              + '\\n' + 'And used oxygen bottles : ' + this.state.oxygenBottlesUsed);\n            }\n          }\n          else\n          {\n            this.updateWordFeedback(thisRoundNumber,'NOT found - try another!');\n          }\n\n      })\n      .catch( ()=>\n      {\n        this.updateWordFeedback(thisRoundNumber,'Apparatus failure. Try again')\n      });\n    }\n\n    handleReplay = () => {\n      this.componentDidMount()\n      //this.render();\n    }\n\n      handleSubmitAndDiveClick = (thisRoundNumber) => {\n        //readme: checking the word is good before advancing\n        this.checkWord(thisRoundNumber, this.state.userGuesses[thisRoundNumber-1]);\n      };\n\n      handleDiverClick = (thisRoundNumber) =>{\n          //alert('Clicked on diver' + thisRoundNumber);\n          const initializeTimersCopy = this.state.initializeTimers.slice();\n          // readme: timer has been initialized\n          initializeTimersCopy[thisRoundNumber-1] = 1;\n          this.setState({initializeTimers : initializeTimersCopy})\n      }\n\n      handleOxygenClick = (thisRoundNumber) => {\n        //readme: not sure if I'll want to count which round the oxygen was used in, might leave param there til i decide\n          let oxygenBottlesUsedNew = this.state.oxygenBottlesUsed + 1;\n        this.setState({oxygenBottlesUsed: oxygenBottlesUsedNew});\n      };\n      \n    //   readme: this is an example of 2 pieces of info being returned to the parent from a child so we can update the state\n      handleChangeUserGuess = (userGuess,i) => {\n        const userGuessesCopy = this.state.userGuesses.slice();\n        userGuessesCopy[i-1] = userGuess;\n        this.setState({userGuesses: userGuessesCopy});\n     }\n\n     handleEnterUserName = (theirUserName) => {\n       this.setState({userName: theirUserName});\n     }\n\n     handleTimerRanOut = (i) => {\n        this.setState({roundTheyWereOnWhenTimerExpired: i})\n        //todo: drown him!\n     }\n\n     componentDidMount() {\n      this.setState({\n        userGuesses: Array(7).fill(null),\n        currentRound: 1,\n        oxygenBottlesUsed: 0,\n        initializeTimers: Array(7).fill(null),\n        clues: null,\n        roundTheyWereOnWhenTimerExpired: null,\n        isLoadingPage: true,\n        wordLookupFeedbackMessages: Array(7).fill(null)\n        //userName: \"\"\n      });\n        fetch('https://deepseaworddotnetservice.azurewebsites.net/Entries/GetWordWithClues')\n          .then(res => res.json())\n          .then((data) => {\n            this.setState({ clues: data, isLoadingPage: false })\n        })\n        .catch(console.log)\n      }\n\n      render()\n      {\n        // let clues = GetJson();\n        // let parsedClues = JSON.parse(clues);\n        let parsedClues2 = this.state.clues; \n\n        // console.log(parsedClues);\n        // console.log(\" and \")\n        // console.log(parsedClues2);\n        return (\n            <div className=\"background center-screen\">\n                <div className='TitleBar' style={titleStyle}>\n                    DeepSeaWord                    \n                </div>\n                <div style={creditStyle}>\n                    by Chris Kerr                     \n                </div>\n                <div className='GameBoard' style={instructionsStyle}>\n                    In every round submit a word that meets that clue and all previous clues. <br/> \n                    Dont run out of oxygen! If the timer expires so do you! <br/> \n                    High scores require: speed, valid words, limited oxygen refills \n                    and finding that treasure!\n                    \n                    {this.state.isLoadingPage || this.state.userName == \"\" ? <div><Spinner/><UserName changeUserName={this.handleEnterUserName}/></div>  : this.renderClues(parsedClues2)}\n                </div>\n                <input type=\"button\" onClick={this.handleReplay} value=\"Replay\"></input>\n            </div>\n            )\n        }\n\n        renderClues(parsedClues)\n        {\n            let rows = [];\n            var x = parsedClues;\n            if(x != null)\n            {\n              //console.log(x.clues[0]);\n            \n              for(var i = 1; i < parsedClues.clues.length + 1; i++){\n                  rows.push(this.renderClue(i, parsedClues.clues[i-1]));  \n              }\n            }\n\n            return rows;\n        }\n\n        renderClue(i, clue)\n        {\n            return (\n                //readme: wonder at what point its an antipattern to pass so much down.\n                <ClueOuter \n                    style={style} \n                    clue={clue} \n                    key={i} \n                    userGuess={this.state.userGuesses[i-1]} \n                    onClick={this.handleSubmitAndDiveClick} \n                    onClickOxygen={this.handleOxygenClick} \n                    changeUserGuess={this.handleChangeUserGuess} \n                    currentRoundBeingPlayed={this.state.currentRound}\n                    initializeTimers={this.state.initializeTimers}\n                    onDiverClick={this.handleDiverClick}\n                    oxygenBottlesUsed={this.state.oxygenBottlesUsed}  \n                    timerRanOut={this.handleTimerRanOut}\n                    roundTheyWereOnWhenTimerExpired={this.state.roundTheyWereOnWhenTimerExpired}\n                    wordLookupFeedbackMessages={this.state.wordLookupFeedbackMessages}                  \n                    />   \n            );\n        }\n}\n\nfunction GetJson2()\n{\n  fetch('https://deepseaworddotnetcore.azurewebsites.net/Entries/GetWordWithClues')\n  .then(\n    function(response) {\n      if (response.status !== 200) {\n        console.log('Looks like there was a problem. Status Code: ' +\n          response.status);\n        return;\n      }\n\n      // Examine the text in the response\n      response.json().then(function(data) {\n        console.log(data);\n        return data;\n      });\n    }\n  )\n  .catch(function(err) {\n    console.log('Fetch Error :-S', err);\n  });\n}\n\nfunction GetJson()\n{\n\n    var obj = {\n        table: []\n    }\n    // PIPE\n    obj.table.push({id: 1, clue: \"Contains letter 'i'.\"});\n    obj.table.push({id: 2, clue: \"Has fewer than 5 letters.\"});\n    obj.table.push({id: 3, clue: \"Ends with 'e'\"});\n    obj.table.push({id: 4, clue: \"Syallable count : 1\"});\n    obj.table.push({id: 5, clue: \"Vowel count : 2\"});\n    obj.table.push({id: 6, clue: \"First letter 'P'\"});\n    obj.table.push({id: 7, clue: \"A cask usually containing two hogsheads or 126 gallons\"});\n\n    var json = JSON.stringify(obj);\n    \n    return json;\n}\n\nvar instructionsStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'white',\n    // readme: hehe 'Arial', get it?\n    fontFamily: 'Arial',\n    fontSize: '12px',\n    // margin: '20px 200px 40px 200px',\n    padding: '20px',\n\n    textAlign: 'center',\n    // readme: better on mobile if no % here\n    // width: '60%'\n}\n\nvar style = {\n    backgroundColor: 'lightblue',\n    color: 'darkblue',\n    // readme: hehe 'Arial', get it?\n    fontFamily: 'Arial',\n    fontSize: '12px',\n    // margin: '20px 200px 40px 200px',\n    padding: '20px',\n    textAlign: 'left'\n  }\n\n  var creditStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'gold',\n    fontFamily: 'Cochin',\n    fontSize: '11px',\n    textAlign: 'Center',\n    top: '0px'\n  }\n\n\nvar titleStyle = {\n    //backgroundColor: 'lightblue',\n    color: 'yellow',\n    fontFamily: 'Phosphate,Futura,Rockwell',\n    fontSize: '45px',\n    textAlign: 'Center',\n    top: '0px'\n  }\n\n\nexport default GameBoard;\n","import React, {Component} from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Chris from './Chris';\nimport GameBoard from './GameBoard';\n\nlet bookList = [\n  {\"title\" : \"the sun also rises\", \"author\" : \"Orson Welles\", \"pages\": 222},\n  {\"title\" : \"Harry Potter\", \"author\" : \"JK Rowling\", \"pages\": 333} \n]\n\nconst Book = ({title, author, pages, freeBookmark}) => {\n  return(\n    <section>\n      <h2>{title}</h2>\n      <p>by: {author}</p>\n      <p>Pages: {pages} pages</p>\n      <p>Free Bookmark Today {freeBookmark ? 'yes!' : 'no!'}</p>\n    </section>\n  )\n}\n\n class Library extends React.Component{\n   state = {  \n     open: true,\n     freeBookmark: true \n    }\n\n   toggleOpenClosed = () => {\n      this.setState( prevState => ({\n        open: !prevState.open\n      }))\n  }         \n  render() {\n     const { books } = this.props\n    return (\n    <div>\n      <h1>The library is {this.state.open ? 'open' : 'closed'}</h1>\n      <button onClick={this.toggleOpenClosed}>Change</button>\n      {books.map(\n          (book, i) => \n            <Book \n              key={i}\n              title={book.title} \n              author={book.author} \n              pages={book.pages}\n              freeBookmark={this.state.freeBookmark}/>\n    )}\n    </div>\n  )\n  }\n}\n\n\nconst title = React.createElement(\n  'h1',\n  {id: 'title', className: 'header'},\n  'Hello Chris'\n);\n\nlet skiData = {\n  total: 50,\n  powder: 20,\n  backCountry: 10,\n  goal: 100\n}\n\nconst getPercent = decimal => {\n  return decimal * 100 + '%'\n}\nconst calcGoalProgress = (total, goal) => {\n  return getPercent(total/goal)\n}\n\nclass Message extends Component{\n  render(){\n    console.log(this.props)\n    return (\n      <div>\n        <h1 style={{color: this.props.color}}>\n    {this.props.msg}\n        </h1>\n        <p>\n          I'll check back in {this.props.minutes} minutes\n        </p>\n      </div>\n    )\n  }\n}\n\nconst SkiDayCounter = ({total,powder,backCountry, goal}) => {\n    return (\n      <section>\n        <div>\n          <p>\n            Total Days : {total}\n          </p>\n        </div>\n        <div>\n          <p>\n            Powder Days : {powder}\n          </p>\n        </div>\n        <div>\n          <p>\n            BackCountry Days : {backCountry}\n          </p>\n        </div>\n        <div>\n          <p>\n            Goal Progress : {calcGoalProgress(total,goal)}\n          </p>\n        </div>\n      </section>\n    )\n}\n\nvar style = {\n  backgroundColor: 'orange',\n  color: 'white',\n  fontFamily: 'Arial'\n}\n\n// ReactDOM.render(\n//   <Message color=\"blue\" minutes={50} msg=\"how are you?\"/>,\n//   document.getElementById('root')\n// );\n\n\n// render(\n//   <SkiDayCounter \n//   total={skiData.total}\n//   powder = {skiData.powder}\n//   backCountry = {skiData.backCountry}\n//   goal = {skiData.goal}\n//   />,\n//   document.getElementById('root')\n// );\n\n// render(\n//   <Library books={bookList}/>,\n//   document.getElementById('root')  \n// )\n\nrender(\n  <GameBoard/>,\n  document.getElementById('root') \n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}